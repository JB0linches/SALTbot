{"description": [{"excerpt": "NLTK -- the Natural Language Toolkit -- is a suite of open source Python\nmodules, data sets, and tutorials supporting research and development in Natural\nLanguage Processing. NLTK requires Python version 3.7, 3.8, 3.9 or 3.10. \n", "confidence": [[0.8144207993555527]], "technique": "Supervised classification", "originalHeader": "Natural Language Toolkit (NLTK)"}, {"excerpt": "See also [how to contribute to NLTK](https://www.nltk.org/contribute.html). \nHave you found the toolkit helpful?  Please support NLTK development by donating\nto the project via PayPal, using the link on the NLTK homepage. \nCopyright (C) 2001-2022 NLTK Project \n", "confidence": [[0.8082440980516395, 0.9523412133303845, 0.9629962971611608]], "technique": "Supervised classification", "originalHeader": "Copyright", "parentHeader": "Natural Language Toolkit (NLTK)"}, {"excerpt": "NLTK Source", "confidence": [1.0], "technique": "GitHub API"}], "citation": [{"originalHeader": "Citing", "excerpt": "If you publish work that uses NLTK, please cite the NLTK book, as follows:\n\n    Bird, Steven, Edward Loper and Ewan Klein (2009).\n    Natural Language Processing with Python.  O'Reilly Media Inc.\n\n", "parentHeader": "Natural Language Toolkit (NLTK)", "confidence": [1], "technique": "Header extraction"}, {"excerpt": "cff-version: 1.2.0\ntitle: >-\n  Natural Language ToolKit (NLTK)\nmessage: >-\n  Please cite this software using the metadata from\n  'preferred-citation'.\ntype: software\nauthors:\n  - name: \"NLTK Team\"\n    email: \"nltk.team@gmail.com\"\nrepository-code: \"https://github.com/nltk/nltk\"\nurl: \"https://www.nltk.org\"\nlicense: Apache-2.0\nkeywords:\n  - \"NLP\"\n  - \"CL\"\n  - \"natural language processing\"\n  - \"computational linguistics\"\n  - \"parsing\"\n  - \"tagging\"\n  - \"tokenizing\"\n  - \"syntax\"\n  - \"linguistics\"\n  - \"language\"\n  - \"natural language\"\n  - \"text analytics\"\npreferred-citation:\n  title: >-\n    Natural Language Processing with Python: Analyzing\n    Text with the Natural Language Toolkit\n  type: book\n  authors:\n    - given-names: Steven\n      family-names: Bird\n      orcid: https://orcid.org/0000-0003-3782-7733\n    - given-names: Ewan\n      family-names: Klein\n      orcid: https://orcid.org/0000-0002-0520-8447\n    - given-names: Edward\n      family-names: Loper\n  year: 2009\n  publisher:\n    name: \"O'Reilly Media, Inc.\"", "confidence": [1.0], "technique": "File Exploration"}, {"excerpt": "[![PyPI](https://img.shields.io/pypi/v/nltk.svg)](https://pypi.python.org/pypi/nltk)\n![CI](https://github.com/nltk/nltk/actions/workflows/ci.yaml/badge.svg?branch=develop) \n", "confidence": [[0.984900915328879]], "technique": "Supervised classification", "originalHeader": "Natural Language Toolkit (NLTK)"}, {"excerpt": "For documentation, please visit [nltk.org](https://www.nltk.org/). \n", "confidence": [[0.9846485830992547]], "technique": "Supervised classification", "originalHeader": "Natural Language Toolkit (NLTK)"}], "installation": [{"excerpt": "[![PyPI](https://img.shields.io/pypi/v/nltk.svg)](https://pypi.python.org/pypi/nltk)\n![CI](https://github.com/nltk/nltk/actions/workflows/ci.yaml/badge.svg?branch=develop) \n", "confidence": [[0.9402076982845873]], "technique": "Supervised classification", "originalHeader": "Natural Language Toolkit (NLTK)"}], "longTitle": {"excerpt": "Natural Language Toolkit (NLTK)", "confidence": [1.0], "technique": "Regular expression"}, "codeRepository": {"excerpt": "https://github.com/nltk/nltk", "confidence": [1.0], "technique": "GitHub API"}, "owner": {"excerpt": "nltk", "confidence": [1.0], "technique": "GitHub API"}, "ownerType": {"excerpt": "Organization", "confidence": [1.0], "technique": "GitHub API"}, "dateCreated": {"excerpt": "2009-09-07T10:53:58Z", "confidence": [1.0], "technique": "GitHub API"}, "dateModified": {"excerpt": "2022-04-19T13:56:57Z", "confidence": [1.0], "technique": "GitHub API"}, "license": {"excerpt": {"name": "Apache License 2.0", "url": "https://api.github.com/licenses/apache-2.0"}, "confidence": [1.0], "technique": "GitHub API"}, "name": {"excerpt": "nltk", "confidence": [1.0], "technique": "GitHub API"}, "fullName": {"excerpt": "nltk/nltk", "confidence": [1.0], "technique": "GitHub API"}, "issueTracker": {"excerpt": "https://api.github.com/repos/nltk/nltk/issues{/number}", "confidence": [1.0], "technique": "GitHub API"}, "forksUrl": {"excerpt": "https://api.github.com/repos/nltk/nltk/forks", "confidence": [1.0], "technique": "GitHub API"}, "downloadUrl": {"excerpt": "https://github.com/nltk/nltk/releases", "confidence": [1.0], "technique": "GitHub API"}, "topics": {"excerpt": ["nltk", "python", "nlp", "natural-language-processing", "machine-learning"], "confidence": [1.0], "technique": "GitHub API"}, "stargazersCount": {"excerpt": {"count": 10651, "date": "Tue, 19 Apr 2022 15:00:22 GMT"}, "confidence": [1.0], "technique": "GitHub API"}, "forksCount": {"excerpt": {"count": 2588, "date": "Tue, 19 Apr 2022 15:00:22 GMT"}, "confidence": [1.0], "technique": "GitHub API"}, "languages": {"excerpt": ["Python", "Jupyter Notebook", "HTML", "Shell", "Makefile", "CSS"], "confidence": [1.0], "technique": "GitHub API"}, "readmeUrl": {"excerpt": "https://github.com/nltk/nltk/blob/develop/README.md", "confidence": [1.0], "technique": "GitHub API"}, "contributingGuidelines": {"excerpt": "Contributing to NLTK\nHi! Thanks for your interest in contributing to NLTK.\n:-) You'll be joining a long list of contributors.\nIn this document we'll try to summarize everything that you need to know to\ndo a good job.\nCode and Issues\nWe use GitHub to host our code repositories and\nissues. The NLTK organization on GitHub has many\nrepositories, so we can manage better the issues and development. The most\nimportant are:\n\nnltk/nltk, the main repository with code\n  related to the library;\nnltk/nltk_data, repository with data\n  related to corpora, taggers and other useful data that are not shipped by\n  default with the library, which can be downloaded by nltk.downloader;\nnltk/nltk.github.com, NLTK website\n  with information about the library, documentation, link for downloading NLTK\n  Book etc.;\nnltk/nltk_book, source code for the NLTK\n  Book.\n\nDevelopment priorities\nNLTK consists of the functionality that the Python/NLP community is motivated to contribute.\nSome priority areas for development are listed in the NLTK Wiki.\nGit and our Branching model\nGit\nWe use Git as our version control\nsystem, so the best way to\ncontribute is to learn how to use it and put your changes on a Git repository.\nThere's a plenty of documentation about Git -- you can start with the Pro Git\nbook.\nSetting up a Development Environment\nTo set up your local development environment for contributing to the main\nrepository nltk/nltk:\n\nFork the nltk/nltk repository on GitHub\n  to your account;\nClone your forked repository locally\n  (git clone https://github.com/&lt;your-github-username&gt;/nltk.git);\nRun cd nltk to get to the root directory of the nltk code base;\nInstall the dependencies (pip install -r pip-req.txt);\nInstall the pre-commit hooks: (pre-commit install)\nDownload the datasets for running tests\n  (python -m nltk.downloader all);\nCreate a remote link from your local repository to the\n  upstream nltk/nltk on GitHub\n  (git remote add upstream https://github.com/nltk/nltk.git) --\n  you will need to use this upstream link when updating your local repository\n  with all the latest contributions.\n\nGitHub Pull requests\nWe use the famous\ngitflow to manage our\nbranches.\nSummary of our git branching model:\n- Go to the develop branch (git checkout develop);\n- Get all the latest work from the upstream nltk/nltk repository\n  (git pull upstream develop);\n- Create a new branch off of develop with a descriptive name (for example:\n  feature/portuguese-sentiment-analysis, hotfix/bug-on-downloader). You can\n  do it by switching to the develop branch (git checkout develop) and then\n  creating a new branch (git checkout -b name-of-the-new-branch);\n- Do many small commits on that branch locally (git add files-changed,\n  git commit -m \"Add some change\");\n- Run the tests to make sure nothing breaks\n  (tox -e py37 if you are on Python 3.7);\n- Add your name to the AUTHORS.md file as a contributor;\n- Push to your fork on GitHub (with the name as your local branch:\n  git push origin branch-name);\n- Create a pull request using the GitHub Web interface (asking us to pull the\n  changes from your new branch and add to them our develop branch);\n- Wait for comments.\nTips\n\nWrite helpful commit\n  messages.\nAnything in the develop branch should be deployable (no failing tests).\nNever use git add .: it can add unwanted files;\nAvoid using git commit -a unless you know what you're doing;\nCheck every change with git diff before adding them to the index (stage\n  area) and with git diff --cached before committing;\nMake sure you add your name to our list of contributors;\nIf you have push access to the main repository, please do not commit directly\n  to develop: your access should be used only to accept pull requests; if you\n  want to make a new feature, you should use the same process as other\n  developers so you code will be reviewed.\nSee RELEASE-HOWTO.txt to see everything you\n  need before creating a new NLTK release.\n\nCode Guidelines\n\nUse PEP8;\nWrite tests for your new features (please see \"Tests\" topic below);\nAlways remember that commented code is dead\n  code;\nName identifiers (variables, classes, functions, module names) with readable\n  names (x is always wrong);\nWhen manipulating strings, we prefer either f-string\n  formatting\n  (f'{a} = {b}') or new-style\n  formatting\n  ('{} = {}'.format(a, b)), instead of the old-style formatting ('%s = %s' % (a, b));\nAll #TODO comments should be turned into issues (use our\n  GitHub issue system);\nRun all tests before pushing (just execute tox) so you will know if your\n  changes broke something;\n\nSee also our developer's\nguide.\nTests\nYou should write tests for every feature you add or bug you solve in the code.\nHaving automated tests for every line of our code lets us make big changes\nwithout worries: there will always be tests to verify if the changes introduced\nbugs or lack of features. If we don't have tests we will be blind and every\nchange will come with some fear of possibly breaking something.\nFor a better design of your code, we recommend using a technique called\ntest-driven development,\nwhere you write your tests before writing the actual code that implements\nthe desired feature.\nYou can use pytest to run your tests, no matter which type of test it is:\ncd nltk/test\npytest util.doctest  # doctest\npytest unit/translate/test_nist.py  # unittest\npytest  # all tests\nContinuous Integration\nDeprecated: NLTK uses Cloudbees for continuous integration.\nDeprecated: NLTK uses Travis for continuous integration.\nNLTK uses GitHub Actions for continuous integration. See here for GitHub's documentation.\nThe .github/workflows/ci.yaml file configures the CI:\n\non: section\n\nensures that this CI is run on code pushes, pull request, or through the GitHub website via a button.\n\n\nThe cache_nltk_data job\n\n\nperforms these steps:\n\nDownloads the nltk source code.\nLoad nltk_data via cache.\nOtherwise, download all the data packages through nltk.download('all').\n\n\n\nThe test job\n\ntests against supported Python versions (3.7, 3.8, 3.9).\ntests on ubuntu-latest and macos-latest.\nrelies on the cache_nltk_data job to ensure that nltk_data is available.\nperforms these steps:\nDownloads the nltk source code.\nSet up Python using whatever version is being checked in the current execution.\nLoad module dependencies via cache.\nOtherwise, install dependencies via pip install -U -r requirements-ci.txt.\n\n\nLoad cached nltk_data loaded via cache_nltk_data.\nRun pytest --numprocesses auto -rsx nltk/test.\n\n\n\nThe pre-commit job\n\nperforms these steps:\nDownloads the nltk source code.\nRuns pre-commit on all files in the repository. (Similar to pre-commit run --all-files)\nFails if any hooks performed a change.\n\n\n\nTo test with tox locally\nFirst setup a new virtual environment, see https://docs.python-guide.org/dev/virtualenvs/\nThen run tox -e py37.\nFor example, using pipenv:\ngit clone https://github.com/nltk/nltk.git\ncd nltk\npipenv install -r pip-req.txt\npipenv install tox\ntox -e py37\nDiscussion\nWe have three mail lists on Google Groups:\n\nnltk, for announcements only;\nnltk-users, for general discussion and user questions;\nnltk-dev, for people interested in NLTK development.\n\nPlease feel free to contact us through the nltk-dev mail list if\nyou have any questions or suggestions. Every contribution is very welcome!\nHappy hacking! (;", "confidence": [1.0], "technique": "File Exploration"}, "hasExecutableNotebook": {"excerpt": ["https://raw.githubusercontent.com/nltk/nltk/develop/nltk/test/twitter.ipynb"], "confidence": [1.0], "technique": "File Exploration"}, "hasScriptFile": {"excerpt": ["https://raw.githubusercontent.com/nltk/nltk/develop/tools/github_actions/third-party.sh", "https://raw.githubusercontent.com/nltk/nltk/develop/tools/jenkins/pre-install.sh", "https://raw.githubusercontent.com/nltk/nltk/develop/tools/travis/third-party.sh", "https://raw.githubusercontent.com/nltk/nltk/develop/tools/travis/pre-install.sh", "https://raw.githubusercontent.com/nltk/nltk/develop/tools/travis/travis-ci-commenter.sh", "https://raw.githubusercontent.com/nltk/nltk/develop/tools/travis/coverage-pylint.sh", "https://raw.githubusercontent.com/nltk/nltk/develop/tools/travis/install.sh"], "confidence": [1.0], "technique": "File Exploration"}}
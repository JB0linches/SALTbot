{"description": [{"excerpt": "The Stanford NLP Group's official Python NLP library. It contains support for running various accurate natural language processing tools on 60+ languages and for accessing the Java Stanford CoreNLP software from Python. For detailed information please visit our [official website](https://stanfordnlp.github.io/stanza/). \n\ud83d\udd25 &nbsp;A new collection of **biomedical** and **clinical** English model packages are now available, offering seamless experience for syntactic analysis and named entity recognition (NER) from biomedical literature text and clinical notes. For more information, check out our [Biomedical models documentation page](https://stanfordnlp.github.io/stanza/biomed.html).\n \n", "confidence": [[0.96906727115036, 0.9732762953883958]], "technique": "Supervised classification", "originalHeader": "Stanza: A Python NLP Library for Many Human Languages"}, {"excerpt": "Aside from the neural pipeline, this package also includes an official wrapper for accessing the Java Stanford CoreNLP software with Python code. \n", "confidence": [[0.9564685284739753]], "technique": "Supervised classification", "originalHeader": "References", "parentHeader": "Stanza: A Python NLP Library for Many Human Languages"}, {"excerpt": "* Go to the [Google Colab website](https://colab.research.google.com)\n* Navigate to `File` -> `Open notebook`, and choose `GitHub` in the pop-up menu\n* Note that you do **not** need to give Colab access permission to your github account\n* Type `stanfordnlp/stanza` in the search bar, and click enter\n \nWe currently provide models for all of the [Universal Dependencies](https://universaldependencies.org/) treebanks v2.8, as well as NER models for a few widely-spoken languages. You can find instructions for downloading and using these models [here](https://stanfordnlp.github.io/stanza/models.html).\n \nTo maximize speed performance, it is essential to run the pipeline on batches of documents. Running a for loop on one sentence at a time will be very slow. The best approach at this time is to concatenate documents together, with each document separated by a blank line (i.e., two line breaks `\\n\\n`).  The tokenizer will recognize blank lines as sentence breaks. We are actively working on improving multi-document processing.\n \nAll neural modules in this library can be trained with your own data. The tokenizer, the multi-word token (MWT) expander, the POS/morphological features tagger, the lemmatizer and the dependency parser require [CoNLL-U](https://universaldependencies.org/format.html) formatted data, while the NER model requires the BIOES format. Currently, we do not support model training via the `Pipeline` interface. Therefore, to train your own models, you need to clone this git repository and run training from the source. \n", "confidence": [[0.9479888346132233, 0.8459632836076963, 0.9098477419918952, 0.842986776870789]], "technique": "Supervised classification", "originalHeader": "References", "parentHeader": "Stanza: A Python NLP Library for Many Human Languages"}, {"excerpt": "Official Stanford NLP Python Library for Many Human Languages", "confidence": [1.0], "technique": "GitHub API"}], "citation": [{"originalHeader": "References", "excerpt": "If you use this library in your research, please kindly cite our [ACL2020 Stanza system demo paper](https://arxiv.org/abs/2003.07082):\n\n```bibtex\n@inproceedings{qi2020stanza,\n    title={Stanza: A {Python} Natural Language Processing Toolkit for Many Human Languages},\n    author={Qi, Peng and Zhang, Yuhao and Zhang, Yuhui and Bolton, Jason and Manning, Christopher D.},\n    booktitle = \"Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics: System Demonstrations\",\n    year={2020}\n}\n```\n\nIf you use our biomedical and clinical models, please also cite our [Stanza Biomedical Models description paper](https://arxiv.org/abs/2007.14640):\n\n```bibtex\n@article{zhang2021biomedical,\n    author = {Zhang, Yuhao and Zhang, Yuhui and Qi, Peng and Manning, Christopher D and Langlotz, Curtis P},\n    title = {Biomedical and clinical {E}nglish model packages for the {S}tanza {P}ython {NLP} library},\n    journal = {Journal of the American Medical Informatics Association},\n    year = {2021},\n    month = {06},\n    issn = {1527-974X}\n}\n```\n\nThe PyTorch implementation of the neural pipeline in this repository is due to [Peng Qi](http://qipeng.me) (@qipeng), [Yuhao Zhang](http://yuhao.im) (@yuhaozhang), and [Yuhui Zhang](https://cs.stanford.edu/~yuhuiz/) (@yuhui-zh15), with help from [Jason Bolton](mailto:jebolton@stanford.edu) (@j38), [Tim Dozat](https://web.stanford.edu/~tdozat/) (@tdozat) and [John Bauer](https://www.linkedin.com/in/john-bauer-b3883b60/) (@AngledLuffa). Maintenance of this repo is currently led by [John Bauer](https://www.linkedin.com/in/john-bauer-b3883b60/).\n\nIf you use the CoreNLP software through Stanza, please cite the CoreNLP software package and the respective modules as described [here](https://stanfordnlp.github.io/CoreNLP/#citing-stanford-corenlp-in-papers) (\"Citing Stanford CoreNLP in papers\"). The CoreNLP client is mostly written by [Arun Chaganty](http://arun.chagantys.org/), and [Jason Bolton](mailto:jebolton@stanford.edu) spearheaded merging the two projects together.\n\n## Issues and Usage Q&A\n\nTo ask questions, report issues or request features \ud83e\udd14, please use the [GitHub Issue Tracker](https://github.com/stanfordnlp/stanza/issues). Before creating a new issue, please make sure to search for existing issues that may solve your problem, or visit the [Frequently Asked Questions (FAQ) page](https://stanfordnlp.github.io/stanza/faq.html) on our website.\n\n## Contributing to Stanza\n\nWe welcome community contributions to Stanza in the form of bugfixes \ud83d\udee0\ufe0f and enhancements \ud83d\udca1! If you want to contribute, please first read [our contribution guideline](CONTRIBUTING.md).\n\n## Installation\n\n### pip\n\nStanza supports Python 3.6 or later. We recommend that you install Stanza via [pip](https://pip.pypa.io/en/stable/installing/), the Python package manager. To install, simply run:\n```bash\npip install stanza\n```\nThis should also help resolve all of the dependencies of Stanza, for instance [PyTorch](https://pytorch.org/) 1.3.0 or above.\n\nIf you currently have a previous version of `stanza` installed, use:\n```bash\npip install stanza -U\n```\n\n### Anaconda\n\nTo install Stanza via Anaconda, use the following conda command:\n\n```bash\nconda install -c stanfordnlp stanza\n```\n\nNote that for now installing Stanza via Anaconda does not work for Python 3.8. For Python 3.8 please use pip installation.\n\n### From Source\n\nAlternatively, you can also install from source of this git repository, which will give you more flexibility in developing on top of Stanza. For this option, run\n```bash\ngit clone https://github.com/stanfordnlp/stanza.git\ncd stanza\npip install -e .\n```\n\n## Running Stanza\n\n### Getting Started with the neural pipeline\n\nTo run your first Stanza pipeline, simply following these steps in your Python interactive interpreter:\n\n```python\n>>> import stanza\n>>> stanza.download('en')       # This downloads the English models for the neural pipeline\n>>> nlp = stanza.Pipeline('en') # This sets up a default neural pipeline in English\n>>> doc = nlp(\"Barack Obama was born in Hawaii.  He was elected president in 2008.\")\n>>> doc.sentences[0].print_dependencies()\n```\n\nIf you encounter `requests.exceptions.ConnectionError`, please try to use a proxy:\n\n```python\n>>> import stanza\n>>> proxies = {'http': 'http://ip:port', 'https': 'http://ip:port'}\n>>> stanza.download('en', proxies=proxies)  # This downloads the English models for the neural pipeline\n>>> nlp = stanza.Pipeline('en')             # This sets up a default neural pipeline in English\n>>> doc = nlp(\"Barack Obama was born in Hawaii.  He was elected president in 2008.\")\n>>> doc.sentences[0].print_dependencies()\n```\n\nThe last command will print out the words in the first sentence in the input string (or [`Document`](https://stanfordnlp.github.io/stanza/data_objects.html#document), as it is represented in Stanza), as well as the indices for the word that governs it in the Universal Dependencies parse of that sentence (its \"head\"), along with the dependency relation between the words. The output should look like:\n\n```\n('Barack', '4', 'nsubj:pass')\n('Obama', '1', 'flat')\n('was', '4', 'aux:pass')\n('born', '0', 'root')\n('in', '6', 'case')\n('Hawaii', '4', 'obl')\n('.', '4', 'punct')\n```\n\nSee [our getting started guide](https://stanfordnlp.github.io/stanza/installation_usage.html#getting-started) for more details.\n\n### Accessing Java Stanford CoreNLP software\n\nAside from the neural pipeline, this package also includes an official wrapper for accessing the Java Stanford CoreNLP software with Python code.\n\nThere are a few initial setup steps.\n\n* Download [Stanford CoreNLP](https://stanfordnlp.github.io/CoreNLP/) and models for the language you wish to use\n* Put the model jars in the distribution folder\n* Tell the Python code where Stanford CoreNLP is located by setting the `CORENLP_HOME` environment variable (e.g., in *nix): `export CORENLP_HOME=/path/to/stanford-corenlp-4.1.0`\n\nWe provide [comprehensive examples](https://stanfordnlp.github.io/stanza/corenlp_client.html) in our documentation that show how one can use CoreNLP through Stanza and extract various annotations from it.\n\n### Online Colab Notebooks\n\nTo get your started, we also provide interactive Jupyter notebooks in the `demo` folder. You can also open these notebooks and run them interactively on [Google Colab](https://colab.research.google.com). To view all available notebooks, follow these steps:\n\n* Go to the [Google Colab website](https://colab.research.google.com)\n* Navigate to `File` -> `Open notebook`, and choose `GitHub` in the pop-up menu\n* Note that you do **not** need to give Colab access permission to your github account\n* Type `stanfordnlp/stanza` in the search bar, and click enter\n\n### Trained Models for the Neural Pipeline\n\nWe currently provide models for all of the [Universal Dependencies](https://universaldependencies.org/) treebanks v2.8, as well as NER models for a few widely-spoken languages. You can find instructions for downloading and using these models [here](https://stanfordnlp.github.io/stanza/models.html).\n\n### Batching To Maximize Pipeline Speed\n\nTo maximize speed performance, it is essential to run the pipeline on batches of documents. Running a for loop on one sentence at a time will be very slow. The best approach at this time is to concatenate documents together, with each document separated by a blank line (i.e., two line breaks `\\n\\n`).  The tokenizer will recognize blank lines as sentence breaks. We are actively working on improving multi-document processing.\n\n## Training your own neural pipelines\n\nAll neural modules in this library can be trained with your own data. The tokenizer, the multi-word token (MWT) expander, the POS/morphological features tagger, the lemmatizer and the dependency parser require [CoNLL-U](https://universaldependencies.org/format.html) formatted data, while the NER model requires the BIOES format. Currently, we do not support model training via the `Pipeline` interface. Therefore, to train your own models, you need to clone this git repository and run training from the source.\n\nFor detailed step-by-step guidance on how to train and evaluate your own models, please visit our [training documentation](https://stanfordnlp.github.io/stanza/training.html).\n\n## LICENSE\n\nStanza is released under the Apache License, Version 2.0. See the [LICENSE](https://github.com/stanfordnlp/stanza/blob/master/LICENSE) file for more details.\n", "parentHeader": "Stanza: A Python NLP Library for Many Human Languages", "confidence": [1], "technique": "Header extraction"}, {"excerpt": "@article{zhang2021biomedical,\n    author = {Zhang, Yuhao and Zhang, Yuhui and Qi, Peng and Manning, Christopher D and Langlotz, Curtis P},\n    title = {Biomedical and clinical {E}nglish model packages for the {S}tanza {P}ython {NLP} library},\n    journal = {Journal of the American Medical Informatics Association},\n    year = {2021},\n    month = {06},\n    issn = {1527-974X}\n}", "confidence": [1.0], "technique": "Regular expression"}, {"excerpt": "@inproceedings{qi2020stanza,\n    title={Stanza: A {Python} Natural Language Processing Toolkit for Many Human Languages},\n    author={Qi, Peng and Zhang, Yuhao and Zhang, Yuhui and Bolton, Jason and Manning, Christopher D.},\n    booktitle = \"Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics: System Demonstrations\",\n    year={2020}\n}", "confidence": [1.0], "technique": "Regular expression"}, {"excerpt": "<div align=\"center\">\n    <a href=\"https://github.com/stanfordnlp/stanza/actions\">\n       <img alt=\"Run Tests\" src=\"https://github.com/stanfordnlp/stanza/actions/workflows/stanza-tests.yaml/badge.svg\">\n    </a>\n    <a href=\"https://pypi.org/project/stanza/\">\n        <img alt=\"PyPI Version\" src=\"https://img.shields.io/pypi/v/stanza?color=blue\">\n    </a>\n    <a href=\"https://anaconda.org/stanfordnlp/stanza\">\n        <img alt=\"Conda Versions\" src=\"https://img.shields.io/conda/vn/stanfordnlp/stanza?color=blue&label=conda\">\n    </a>\n    <a href=\"https://pypi.org/project/stanza/\">\n        <img alt=\"Python Versions\" src=\"https://img.shields.io/pypi/pyversions/stanza?colorB=blue\">\n    </a>\n</div> \n", "confidence": [[0.9912101316991447]], "technique": "Supervised classification", "originalHeader": "Stanza: A Python NLP Library for Many Human Languages"}], "installation": [{"excerpt": "<div align=\"center\">\n    <a href=\"https://github.com/stanfordnlp/stanza/actions\">\n       <img alt=\"Run Tests\" src=\"https://github.com/stanfordnlp/stanza/actions/workflows/stanza-tests.yaml/badge.svg\">\n    </a>\n    <a href=\"https://pypi.org/project/stanza/\">\n        <img alt=\"PyPI Version\" src=\"https://img.shields.io/pypi/v/stanza?color=blue\">\n    </a>\n    <a href=\"https://anaconda.org/stanfordnlp/stanza\">\n        <img alt=\"Conda Versions\" src=\"https://img.shields.io/conda/vn/stanfordnlp/stanza?color=blue&label=conda\">\n    </a>\n    <a href=\"https://pypi.org/project/stanza/\">\n        <img alt=\"Python Versions\" src=\"https://img.shields.io/pypi/pyversions/stanza?colorB=blue\">\n    </a>\n</div> \n", "confidence": [[0.9259803807545552]], "technique": "Supervised classification", "originalHeader": "Stanza: A Python NLP Library for Many Human Languages"}, {"excerpt": "Stanza supports Python 3.6 or later. We recommend that you install Stanza via [pip](https://pip.pypa.io/en/stable/installing/), the Python package manager. To install, simply run:\n```bash\npip install stanza\n```\nThis should also help resolve all of the dependencies of Stanza, for instance [PyTorch](https://pytorch.org/) 1.3.0 or above. \nIf you currently have a previous version of `stanza` installed, use:\n```bash\npip install stanza -U\n```\n \nTo install Stanza via Anaconda, use the following conda command:\n```bash\nconda install -c stanfordnlp stanza\n```\n \nNote that for now installing Stanza via Anaconda does not work for Python 3.8. For Python 3.8 please use pip installation.\n \nAlternatively, you can also install from source of this git repository, which will give you more flexibility in developing on top of Stanza. For this option, run\n```bash\ngit clone https://github.com/stanfordnlp/stanza.git\ncd stanza\npip install -e .\n```\n \n", "confidence": [[0.9996907396037341, 0.9837381127728364, 0.9995478923879376, 0.9859374193013405, 0.9973764242251897]], "technique": "Supervised classification", "originalHeader": "From Source", "parentHeader": "Installation"}, {"excerpt": "We currently provide models for all of the [Universal Dependencies](https://universaldependencies.org/) treebanks v2.8, as well as NER models for a few widely-spoken languages. You can find instructions for downloading and using these models [here](https://stanfordnlp.github.io/stanza/models.html).\n \n", "confidence": [[0.8392972042502539]], "technique": "Supervised classification", "originalHeader": "Trained Models for the Neural Pipeline", "parentHeader": "Running Stanza"}], "arxivLinks": {"excerpt": ["https://arxiv.org/abs/2003.07082", "https://arxiv.org/abs/2007.14640"], "confidence": [1.0], "technique": "Regular expression"}, "logo": {"excerpt": "https://github.com/stanfordnlp/stanza/raw/dev/images/stanza-logo.png", "confidence": [1.0], "technique": "Regular expression"}, "license": {"excerpt": {"name": "Other", "url": "https://raw.githubusercontent.com/stanfordnlp/stanza/main/LICENSE"}, "confidence": [1.0], "technique": "GitHub API"}, "usage": [{"originalHeader": "Issues and Usage Q&amp;A", "excerpt": "<h2 align=\"center\">Stanza: A Python NLP Library for Many Human Languages</h2>\n\n<div align=\"center\">\n    <a href=\"https://github.com/stanfordnlp/stanza/actions\">\n       <img alt=\"Run Tests\" src=\"https://github.com/stanfordnlp/stanza/actions/workflows/stanza-tests.yaml/badge.svg\">\n    </a>\n    <a href=\"https://pypi.org/project/stanza/\">\n        <img alt=\"PyPI Version\" src=\"https://img.shields.io/pypi/v/stanza?color=blue\">\n    </a>\n    <a href=\"https://anaconda.org/stanfordnlp/stanza\">\n        <img alt=\"Conda Versions\" src=\"https://img.shields.io/conda/vn/stanfordnlp/stanza?color=blue&label=conda\">\n    </a>\n    <a href=\"https://pypi.org/project/stanza/\">\n        <img alt=\"Python Versions\" src=\"https://img.shields.io/pypi/pyversions/stanza?colorB=blue\">\n    </a>\n</div>\n\nThe Stanford NLP Group's official Python NLP library. It contains support for running various accurate natural language processing tools on 60+ languages and for accessing the Java Stanford CoreNLP software from Python. For detailed information please visit our [official website](https://stanfordnlp.github.io/stanza/).\n\n\ud83d\udd25 &nbsp;A new collection of **biomedical** and **clinical** English model packages are now available, offering seamless experience for syntactic analysis and named entity recognition (NER) from biomedical literature text and clinical notes. For more information, check out our [Biomedical models documentation page](https://stanfordnlp.github.io/stanza/biomed.html).\n\n### References\n\nIf you use this library in your research, please kindly cite our [ACL2020 Stanza system demo paper](https://arxiv.org/abs/2003.07082):\n\n```bibtex\n@inproceedings{qi2020stanza,\n    title={Stanza: A {Python} Natural Language Processing Toolkit for Many Human Languages},\n    author={Qi, Peng and Zhang, Yuhao and Zhang, Yuhui and Bolton, Jason and Manning, Christopher D.},\n    booktitle = \"Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics: System Demonstrations\",\n    year={2020}\n}\n```\n\nIf you use our biomedical and clinical models, please also cite our [Stanza Biomedical Models description paper](https://arxiv.org/abs/2007.14640):\n\n```bibtex\n@article{zhang2021biomedical,\n    author = {Zhang, Yuhao and Zhang, Yuhui and Qi, Peng and Manning, Christopher D and Langlotz, Curtis P},\n    title = {Biomedical and clinical {E}nglish model packages for the {S}tanza {P}ython {NLP} library},\n    journal = {Journal of the American Medical Informatics Association},\n    year = {2021},\n    month = {06},\n    issn = {1527-974X}\n}\n```\n\nThe PyTorch implementation of the neural pipeline in this repository is due to [Peng Qi](http://qipeng.me) (@qipeng), [Yuhao Zhang](http://yuhao.im) (@yuhaozhang), and [Yuhui Zhang](https://cs.stanford.edu/~yuhuiz/) (@yuhui-zh15), with help from [Jason Bolton](mailto:jebolton@stanford.edu) (@j38), [Tim Dozat](https://web.stanford.edu/~tdozat/) (@tdozat) and [John Bauer](https://www.linkedin.com/in/john-bauer-b3883b60/) (@AngledLuffa). Maintenance of this repo is currently led by [John Bauer](https://www.linkedin.com/in/john-bauer-b3883b60/).\n\nIf you use the CoreNLP software through Stanza, please cite the CoreNLP software package and the respective modules as described [here](https://stanfordnlp.github.io/CoreNLP/#citing-stanford-corenlp-in-papers) (\"Citing Stanford CoreNLP in papers\"). The CoreNLP client is mostly written by [Arun Chaganty](http://arun.chagantys.org/), and [Jason Bolton](mailto:jebolton@stanford.edu) spearheaded merging the two projects together.\n\n## Issues and Usage Q&A\n\nTo ask questions, report issues or request features \ud83e\udd14, please use the [GitHub Issue Tracker](https://github.com/stanfordnlp/stanza/issues). Before creating a new issue, please make sure to search for existing issues that may solve your problem, or visit the [Frequently Asked Questions (FAQ) page](https://stanfordnlp.github.io/stanza/faq.html) on our website.\n", "confidence": [1], "technique": "Header extraction"}, {"originalHeader": "Getting Started with the neural pipeline", "excerpt": "To run your first Stanza pipeline, simply following these steps in your Python interactive interpreter:\n\n```python\n>>> import stanza\n>>> stanza.download('en')       # This downloads the English models for the neural pipeline\n>>> nlp = stanza.Pipeline('en') # This sets up a default neural pipeline in English\n>>> doc = nlp(\"Barack Obama was born in Hawaii.  He was elected president in 2008.\")\n>>> doc.sentences[0].print_dependencies()\n```\n\nIf you encounter `requests.exceptions.ConnectionError`, please try to use a proxy:\n\n```python\n>>> import stanza\n>>> proxies = {'http': 'http://ip:port', 'https': 'http://ip:port'}\n>>> stanza.download('en', proxies=proxies)  # This downloads the English models for the neural pipeline\n>>> nlp = stanza.Pipeline('en')             # This sets up a default neural pipeline in English\n>>> doc = nlp(\"Barack Obama was born in Hawaii.  He was elected president in 2008.\")\n>>> doc.sentences[0].print_dependencies()\n```\n\nThe last command will print out the words in the first sentence in the input string (or [`Document`](https://stanfordnlp.github.io/stanza/data_objects.html#document), as it is represented in Stanza), as well as the indices for the word that governs it in the Universal Dependencies parse of that sentence (its \"head\"), along with the dependency relation between the words. The output should look like:\n\n```\n('Barack', '4', 'nsubj:pass')\n('Obama', '1', 'flat')\n('was', '4', 'aux:pass')\n('born', '0', 'root')\n('in', '6', 'case')\n('Hawaii', '4', 'obl')\n('.', '4', 'punct')\n```\n\nSee [our getting started guide](https://stanfordnlp.github.io/stanza/installation_usage.html#getting-started) for more details.\n", "parentHeader": "Running Stanza", "confidence": [1], "technique": "Header extraction"}], "codeRepository": {"excerpt": "https://github.com/stanfordnlp/stanza", "confidence": [1.0], "technique": "GitHub API"}, "owner": {"excerpt": "stanfordnlp", "confidence": [1.0], "technique": "GitHub API"}, "ownerType": {"excerpt": "Organization", "confidence": [1.0], "technique": "GitHub API"}, "dateCreated": {"excerpt": "2017-09-26T08:00:56Z", "confidence": [1.0], "technique": "GitHub API"}, "dateModified": {"excerpt": "2022-04-18T12:55:45Z", "confidence": [1.0], "technique": "GitHub API"}, "name": {"excerpt": "stanza", "confidence": [1.0], "technique": "GitHub API"}, "fullName": {"excerpt": "stanfordnlp/stanza", "confidence": [1.0], "technique": "GitHub API"}, "issueTracker": {"excerpt": "https://api.github.com/repos/stanfordnlp/stanza/issues{/number}", "confidence": [1.0], "technique": "GitHub API"}, "forksUrl": {"excerpt": "https://api.github.com/repos/stanfordnlp/stanza/forks", "confidence": [1.0], "technique": "GitHub API"}, "downloadUrl": {"excerpt": "https://github.com/stanfordnlp/stanza/releases", "confidence": [1.0], "technique": "GitHub API"}, "topics": {"excerpt": ["python", "nlp", "natural-language-processing", "machine-learning", "deep-learning", "artificial-intelligence", "pytorch", "universal-dependencies", "named-entity-recognition", "corenlp"], "confidence": [1.0], "technique": "GitHub API"}, "stargazersCount": {"excerpt": {"count": 6082, "date": "Tue, 19 Apr 2022 15:43:15 GMT"}, "confidence": [1.0], "technique": "GitHub API"}, "forksCount": {"excerpt": {"count": 787, "date": "Tue, 19 Apr 2022 15:43:15 GMT"}, "confidence": [1.0], "technique": "GitHub API"}, "languages": {"excerpt": ["Python", "JavaScript", "Shell", "Perl", "HTML", "CSS"], "confidence": [1.0], "technique": "GitHub API"}, "readmeUrl": {"excerpt": "https://github.com/stanfordnlp/stanza/blob/main/README.md", "confidence": [1.0], "technique": "GitHub API"}, "licenseText": {"excerpt": "b'Copyright 2019 The Board of Trustees of The Leland Stanford Junior University\\n\\nLicensed under the Apache License, Version 2.0 (the \"License\");\\nyou may not use this file except in compliance with the License.\\nYou may obtain a copy of the License at\\n\\n    http://www.apache.org/licenses/LICENSE-2.0\\n\\nUnless required by applicable law or agreed to in writing, software\\ndistributed under the License is distributed on an \"AS IS\" BASIS,\\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\\nSee the License for the specific language governing permissions and\\nlimitations under the License.\\n'", "confidence": [1.0], "technique": "File Exploration"}, "contributingGuidelines": {"excerpt": "Contributing to Stanza\nWe would love to see contributions to Stanza from the community! Contributions that we welcome include bugfixes and enhancements. If you want to report a bug or suggest a feature but don't intend to fix or implement it by yourself, please create a corresponding issue on our issues page. If you plan to contribute a bugfix or enhancement, please read the following.\n\ud83d\udee0\ufe0f Bugfixes\nFor bugfixes, please follow these steps:\n\nMake sure a fix does not already exist, by searching through existing issues (including closed ones) and pull requests.\nConfirm the bug with us by creating a bug-report issue. In your issue, you should at least include the platform and environment that you are running with, and a minimal code snippet that will reproduce the bug.\nOnce the bug is confirmed, you can go ahead with implementing the bugfix, and create a pull request against the dev branch.\n\n\ud83d\udca1 Enhancements\nFor enhancements, please follow these steps:\n\nMake sure a similar enhancement suggestion does not already exist, by searching through existing issues.\nCreate a feature-request issue and discuss about this enhancement with us. We'll need to make sure this enhancement won't break existing user interface and functionalities.\nOnce the enhancement is confirmed with us, you can go ahead with implementing it, and create a pull request against the dev branch.", "confidence": [1.0], "technique": "File Exploration"}, "hasExecutableNotebook": {"excerpt": ["https://raw.githubusercontent.com/stanfordnlp/stanza/main/demo/Stanza_Beginners_Guide.ipynb", "https://raw.githubusercontent.com/stanfordnlp/stanza/main/demo/Stanza_CoreNLP_Interface.ipynb"], "confidence": [1.0], "technique": "File Exploration"}, "hasScriptFile": {"excerpt": ["https://raw.githubusercontent.com/stanfordnlp/stanza/main/scripts/config.sh", "https://raw.githubusercontent.com/stanfordnlp/stanza/main/scripts/run_sentiment.sh", "https://raw.githubusercontent.com/stanfordnlp/stanza/main/scripts/download_vectors.sh", "https://raw.githubusercontent.com/stanfordnlp/stanza/main/scripts/treebank_to_shorthand.sh", "https://raw.githubusercontent.com/stanfordnlp/stanza/main/scripts/run_charlm.sh", "https://raw.githubusercontent.com/stanfordnlp/stanza/main/scripts/prep_sentiment.sh", "https://raw.githubusercontent.com/stanfordnlp/stanza/main/scripts/sentiment/process_sst.sh", "https://raw.githubusercontent.com/stanfordnlp/stanza/main/stanza/tests/setup_test.sh"], "confidence": [1.0], "technique": "File Exploration"}, "releases": {"excerpt": [{"tagName": "v1.3.0", "name": "Stanza 1.3.0: LangID and Constituency Parser", "authorName": "AngledLuffa", "authorType": "User", "body": "# Overview\r\n\r\nStanza 1.3.0 introduces a language id model, a constituency parser, a dictionary in the tokenizer, and some additional features and bugfixes.\r\n\r\n## New features\r\n\r\n- **Langid model and multilingual pipeline**\r\nBased on \"A reproduction of Apple's bi-directional LSTM models for language identification in short strings.\" by Toftrup et al 2021\r\n(https://github.com/stanfordnlp/stanza/commit/154b0e8e59d3276744ae0c8ea56dc226f777fba8)\r\n\r\n- **Constituency parser**\r\nBased on \"In-Order Transition-based Constituent Parsing\" by Jiangming Liu and Yue Zhang.  Currently an `en_wsj` model available, with more to come.\r\n(https://github.com/stanfordnlp/stanza/commit/90318023432d584c62986123ef414a1fa93683ca)\r\n\r\n- **Evalb interface to CoreNLP**\r\nUseful for evaluating the parser - requires CoreNLP 4.3.0 or later\r\n\r\n- **Dictonary tokenizer feature**\r\nNoticeably improved performance for ZH, VI, TH\r\n(https://github.com/stanfordnlp/stanza/pull/776)\r\n\r\n## Bugfixes / Reliability\r\n\r\n- **HuggingFace integration**\r\nNo more git issues complaining about unavailable models!  (Hopefully)\r\n(https://github.com/stanfordnlp/stanza/commit/f7af5049568f81a716106fee5403d339ca246f38)\r\n\r\n- **Sentiment processor crashes on certain inputs**\r\n(issue https://github.com/stanfordnlp/stanza/issues/804, fixed by https://github.com/stanfordnlp/stanza/commit/e232f67f3850a32a1b4f3a99e9eb4f5c5580c019)\r\n", "tarballUrl": "https://api.github.com/repos/stanfordnlp/stanza/tarball/v1.3.0", "zipballUrl": "https://api.github.com/repos/stanfordnlp/stanza/zipball/v1.3.0", "htmlUrl": "https://github.com/stanfordnlp/stanza/releases/tag/v1.3.0", "url": "https://api.github.com/repos/stanfordnlp/stanza/releases/50863402", "dateCreated": "2021-10-05T02:15:34Z", "datePublished": "2021-10-06T06:28:19Z"}, {"tagName": "v1.2.3", "name": "Stanza v1.2.3: Two new NER models and some minor bugfixes", "authorName": "AngledLuffa", "authorType": "User", "body": "# Overview\r\n\r\nIn anticipation of a larger release with some new features, we make a small update to fix some existing bugs and add two more NER models.\r\n\r\n## Bugfixes\r\n\r\n- **Sentiment models would crash on no text** (issue https://github.com/stanfordnlp/stanza/issues/769, fixed by https://github.com/stanfordnlp/stanza/pull/781/commits/47889e3043c27f9c5abd9913016929f1857de7bf)\r\n\r\n- **Java processes as a context were not properly closed** (https://github.com/stanfordnlp/stanza/pull/781/commits/a39d2ff6801a23aa73add1f710d809a9c0a793b1)\r\n\r\n## Interface improvements\r\n\r\n- **Downloading tokenize now downloads mwt for languages which require it** (issue https://github.com/stanfordnlp/stanza/issues/774, fixed by https://github.com/stanfordnlp/stanza/pull/777, from davidrft)\r\n\r\n- **NER model can finetune and save to/from different filenames** (https://github.com/stanfordnlp/stanza/pull/781/commits/0714a0134f0af6ef486b49ce934f894536e31d43)\r\n\r\n- **NER model now displays a confusion matrix at the end of training** (https://github.com/stanfordnlp/stanza/pull/781/commits/9bbd3f712f97cb2702a0852e1c353d4d54b4b33b)\r\n\r\n## NER models\r\n\r\n- **Afrikaans, trained in NCHLT** (https://github.com/stanfordnlp/stanza/pull/781/commits/6f1f04b6d674691cf9932d780da436063ebd3381)\r\n\r\n- **Italian, trained on a model from FBK** (https://github.com/stanfordnlp/stanza/pull/781/commits/d9a361fd7f13105b68569fddeab650ea9bd04b7f)\r\n\r\n", "tarballUrl": "https://api.github.com/repos/stanfordnlp/stanza/tarball/v1.2.3", "zipballUrl": "https://api.github.com/repos/stanfordnlp/stanza/zipball/v1.2.3", "htmlUrl": "https://github.com/stanfordnlp/stanza/releases/tag/v1.2.3", "url": "https://api.github.com/repos/stanfordnlp/stanza/releases/47569987", "dateCreated": "2021-08-09T23:11:56Z", "datePublished": "2021-08-09T23:12:42Z"}, {"tagName": "v1.2.2", "name": "Stanza v1.2.2", "authorName": "AngledLuffa", "authorType": "User", "body": "# Overview\r\n\r\nA regression in NER results occurred in 1.2.1 when fixing a bug in VI models based around spaces.\r\n\r\n## Bugfixes\r\n\r\n- **Fix Sentiment not loading correctly on Windows because of pickling issue** (https://github.com/stanfordnlp/stanza/pull/742) (thanks to @BramVanroy)\r\n\r\n- **Fix NER bulk process not filling out data structures as expected** (https://github.com/stanfordnlp/stanza/issues/721) (https://github.com/stanfordnlp/stanza/pull/722)\r\n\r\n- **Fix NER space issue causing a performance regression** (https://github.com/stanfordnlp/stanza/issues/739) (https://github.com/stanfordnlp/stanza/pull/732)\r\n\r\n## Interface improvements\r\n\r\n- **Add an NER run script** (https://github.com/stanfordnlp/stanza/pull/738)\r\n", "tarballUrl": "https://api.github.com/repos/stanfordnlp/stanza/tarball/v1.2.2", "zipballUrl": "https://api.github.com/repos/stanfordnlp/stanza/zipball/v1.2.2", "htmlUrl": "https://github.com/stanfordnlp/stanza/releases/tag/v1.2.2", "url": "https://api.github.com/repos/stanfordnlp/stanza/releases/44814871", "dateCreated": "2021-07-13T04:49:50Z", "datePublished": "2021-07-15T18:49:01Z"}, {"tagName": "v1.2.1", "name": "Stanza v1.2.1", "authorName": "AngledLuffa", "authorType": "User", "body": "# Overview\r\n\r\nAll models other than NER and Sentiment were retrained with the new UD 2.8 release.  All of the updates include the data augmentation fixes applied in 1.2.0, along with new augmentations tokenization issues and end-of-sentence issues.  This release also features various enhancements, bug fixes, and performance improvements, along with 4 new NER models.\r\n\r\n## Model improvements\r\n\r\n- **Add Bulgarian, Finnish, Hungarian, Vietnamese NER models**\r\n  - The Bulgarian model is trained on BSNLP 2019 data.\r\n  - The Finnish model is trained on the Turku NER data.\r\n  - The Hungarian model is trained on a combination of the NYTK dataset and earlier business and criminal NER datasets.\r\n  - The Vietnamese model is trained on the VLSP 2018 data.\r\n  - Furthermore, the script for preparing the lang-uk NER data has been integrated (https://github.com/stanfordnlp/stanza/commit/c1f0bee1074997d9376adaec45dc00f813d00b38)\r\n\r\n- **Use new word vectors for Armenian, including better coverage for the new Western Armenian dataset**(https://github.com/stanfordnlp/stanza/pull/718/commits/d9e8301addc93450dc880b06cb665ad10d869242)\r\n\r\n- **Add copy mechanism in the seq2seq model**.  This fixes some unusual Spanish multi-word token expansion errors and potentially improves lemmatization performance. (https://github.com/stanfordnlp/stanza/pull/692 https://github.com/stanfordnlp/stanza/issues/684)\r\n\r\n- **Fix Spanish POS and depparse mishandling a leading `\u00bf` missing** (https://github.com/stanfordnlp/stanza/pull/699 https://github.com/stanfordnlp/stanza/issues/698)\r\n\r\n- **Fix tokenization breaking when a newline splits a Chinese token**(https://github.com/stanfordnlp/stanza/pull/632 https://github.com/stanfordnlp/stanza/issues/531)\r\n\r\n- **Fix tokenization of parentheses in Chinese**(https://github.com/stanfordnlp/stanza/commit/452d842ed596bb7807e604eeb2295fd4742b7e89)\r\n\r\n- **Fix various issues with characters not present in UD training data** such as ellipses characters or unicode apostrophe\r\n(https://github.com/stanfordnlp/stanza/pull/719/commits/db0555253f0a68c76cf50209387dd2ff37794197 https://github.com/stanfordnlp/stanza/pull/719/commits/f01a1420755e3e0d9f4d7c2895e0261e581f7413 https://github.com/stanfordnlp/stanza/pull/719/commits/85898c50f14daed75b96eed9cd6e9d6f86e2d197)\r\n\r\n- **Fix a variety of issues with Vietnamese tokenization** - remove language specific model improvement which got roughly 1% F1 but caused numerous hard-to-track issues (https://github.com/stanfordnlp/stanza/pull/719/commits/3ccb132e03ce28a9061ec17d2c0ae84cc2000548)\r\n\r\n- **Fix spaces in the Vietnamese words not being found in the embedding used for POS and depparse**(https://github.com/stanfordnlp/stanza/pull/719/commits/197212269bc33b66759855a5addb99d1f465e4f4)\r\n\r\n- **Include UD_English-GUMReddit in the GUM models**(https://github.com/stanfordnlp/stanza/pull/719/commits/9e6367cb9bdd635d579fd8d389cb4d5fa121c413)\r\n\r\n- **Add Pronouns & PUD to the mixed English models** (various data improvements made this more appealing)(https://github.com/stanfordnlp/stanza/pull/719/commits/f74bef7b2ed171bf9c027ae4dfd3a10272040a46)\r\n\r\n## Interface enhancements\r\n\r\n- **Add ability to pass a Document to the pipeline in pretokenized mode**(https://github.com/stanfordnlp/stanza/commit/f88cd8c2f84aedeaec34a11b4bc27573657a66e2 https://github.com/stanfordnlp/stanza/issues/696)\r\n\r\n- **Track comments when reading and writing conll files** (https://github.com/stanfordnlp/stanza/pull/676 originally from @danielhers in https://github.com/stanfordnlp/stanza/pull/155)\r\n\r\n- **Add a proxy parameter for downloads to pass through to the requests module** (https://github.com/stanfordnlp/stanza/pull/638)\r\n\r\n- **add sent_idx to tokens** (https://github.com/stanfordnlp/stanza/commit/ee6135c538e24ff37d08b86f34668ccb223c49e1)\r\n\r\n## Bugfixes\r\n\r\n- **Fix Windows encoding issues when reading conll documents** from @yanirmr (b40379eaf229e7ffc7580def57ee1fad46080261 https://github.com/stanfordnlp/stanza/pull/695)\r\n\r\n- **Fix tokenization breaking when second batch is exactly eval_length**(https://github.com/stanfordnlp/stanza/commit/726368644d7b1019825f915fabcfe1e4528e068e https://github.com/stanfordnlp/stanza/issues/634 https://github.com/stanfordnlp/stanza/issues/631)\r\n\r\n## Efficiency improvements\r\n\r\n- **Bulk process for tokenization** - greatly speeds up the use case of many small docs (https://github.com/stanfordnlp/stanza/pull/719/commits/5d2d39ec822c65cb5f60d547357ad8b821683e3c)\r\n\r\n- **Optimize MWT usage in pipeline & fix MWT bulk_process** (https://github.com/stanfordnlp/stanza/pull/642 https://github.com/stanfordnlp/stanza/pull/643 https://github.com/stanfordnlp/stanza/pull/644)\r\n\r\n## CoreNLP integration\r\n\r\n- **Add a UD Enhancer tool which interfaces with CoreNLP's generic enhancer** (https://github.com/stanfordnlp/stanza/pull/675)\r\n\r\n- **Add an interface to CoreNLP tokensregex using stanza tokenization** (https://github.com/stanfordnlp/stanza/pull/659)\r\n\r\n", "tarballUrl": "https://api.github.com/repos/stanfordnlp/stanza/tarball/v1.2.1", "zipballUrl": "https://api.github.com/repos/stanfordnlp/stanza/zipball/v1.2.1", "htmlUrl": "https://github.com/stanfordnlp/stanza/releases/tag/v1.2.1", "url": "https://api.github.com/repos/stanfordnlp/stanza/releases/39087456", "dateCreated": "2021-06-08T22:32:56Z", "datePublished": "2021-06-17T17:12:31Z"}, {"tagName": "v1.2.0", "name": "Stanza v1.2.0", "authorName": "AngledLuffa", "authorType": "User", "body": "# Overview\r\n\r\nAll models other than NER and Sentiment were retrained with the new UD 2.7 release.  Quite a few of them have data augmentation fixes for problems which arise in common use rather than when running an evaluation task. This release also features various enhancements, bug fixes, and performance improvements.\r\n\r\n## New features and enhancements\r\n\r\n- **Models trained on combined datasets in English and Italian** The default models for English are now a combination of EWT and GUM.  The default models for Italian now combine ISDT, VIT, Twittiro, PosTWITA, and a custom dataset including MWT tokens.\r\n\r\n- **NER Transfer Learning** Allows users to fine-tune all or part of the parameters of trained NER models on a new dataset for transfer learning (#351, thanks to @gawy for the contribution)\r\n\r\n- **Multi-document support** The Stanza `Pipeline` now supports multi-`Document` input! To process multiple documents without having to worry about document boundaries, simply pass a list of Stanza `Document` objects into the `Pipeline`. (https://github.com/stanfordnlp/stanza/issues/70 https://github.com/stanfordnlp/stanza/pull/577)\r\n\r\n- **Added API links from token to sentence** It's easier to access Stanza data objects from related ones. To access the sentence object  a token or a word, simply use `token.sent` or `word.sent`. (https://github.com/stanfordnlp/stanza/issues/533 https://github.com/stanfordnlp/stanza/pull/554)\r\n\r\n- **New external tokenizer for Thai with PyThaiNLP** Try it out with, for example, `stanza.Pipeline(lang='th', processors={'tokenize': 'pythainlp'}, package=None)`. (https://github.com/stanfordnlp/stanza/pull/567)\r\n\r\n- **Faster tokenization** We have improved how the data pipeline works internally to reduce redundant data wrangling, and significantly sped up the tokenization of long texts. If you have a really long line of text, you could experience up to 10x speedup or more without changing anything. (#522)\r\n\r\n- **Added a method for getting all the supported languages from the resources file** Wondering what languages Stanza supports and want to determine it programmatically? Wonder no more! Try `stanza.resources.common.list_available_languages()`. (https://github.com/stanfordnlp/stanza/issues/511 https://github.com/stanfordnlp/stanza/commit/fa52f8562f20ab56807b35ba204d6f9ca60b47ab)\r\n\r\n- **Load mwt automagically if a model needs it** Multi-word token expansion is one of the most common things to miss from your `Pipeline` instantiation, and remembering to include it is a pain -- until now. (https://github.com/stanfordnlp/stanza/pull/516 https://github.com/stanfordnlp/stanza/issues/515  and many others)\r\n\r\n- **Vietnamese sentiment model based on VSFC** This is now part of the default language package for Vietnamese that you get from `stanza.download(\"vi\")`. Enjoy!\r\n\r\n- **More informative errors for missing models** Stanza now throws more helpful exceptions with informative exception messages when you are missing models (https://github.com/stanfordnlp/stanza/pull/437 https://github.com/stanfordnlp/stanza/issues/430 ... https://github.com/stanfordnlp/stanza/issues/324 https://github.com/stanfordnlp/stanza/pull/438 ... https://github.com/stanfordnlp/stanza/issues/529 https://github.com/stanfordnlp/stanza/commit/953966539c955951d01e3d6b4561fab02a1f546c ... https://github.com/stanfordnlp/stanza/issues/575 https://github.com/stanfordnlp/stanza/pull/578)\r\n\r\n## Bugfixes\r\n\r\n- **Fixed NER documentation for German** to correctly point to the GermEval 2014 model for download. (https://github.com/stanfordnlp/stanza/commit/4ee9f12be5911bb600d2f162b1684cb4686c391e https://github.com/stanfordnlp/stanza/issues/559)\r\n\r\n- **External tokenization library integration respects `no_ssplit`** so you can enjoy using them without messing up your preferred sentence segmentation just like Stanza tokenizers. (https://github.com/stanfordnlp/stanza/issues/523 https://github.com/stanfordnlp/stanza/pull/556)\r\n\r\n- **Telugu lemmatizer and tokenizer improvements** Telugu models set to use identity lemmatizer by default, and the tokenizer is retrained to separate sentence final punctuation (https://github.com/stanfordnlp/stanza/issues/524 https://github.com/stanfordnlp/stanza/commit/ba0aec30e6e691155bc0226e4cdbb829cb3489df)\r\n\r\n- **Spanish model would not tokenize foo,bar** Now fixed (https://github.com/stanfordnlp/stanza/issues/528 https://github.com/stanfordnlp/stanza/commit/123d5029303a04185c5574b76fbed27cb992cadd)\r\n\r\n- **Arabic model would not tokenize `asdf .`** Now fixed (https://github.com/stanfordnlp/stanza/issues/545 https://github.com/stanfordnlp/stanza/commit/03b7ceacf73870b2a15b46479677f4914ea48745)\r\n\r\n- **Various tokenization models would split URLs and/or emails** Now URLs and emails are robustly handled with regexes. (https://github.com/stanfordnlp/stanza/issues/539 https://github.com/stanfordnlp/stanza/pull/588)\r\n\r\n- **Various parser and pos models would deterministically label \"punct\" for the final word** Resolved via data augmentation (https://github.com/stanfordnlp/stanza/issues/471 https://github.com/stanfordnlp/stanza/issues/488 https://github.com/stanfordnlp/stanza/pull/491)\r\n\r\n- **Norwegian tokenizers retrained to separate final punct** The fix is an upstream data fix (https://github.com/stanfordnlp/stanza/issues/305 https://github.com/UniversalDependencies/UD_Norwegian-Bokmaal/pull/5)\r\n\r\n- **Bugfix for conll eval** Fix the error in data conversion from python object of Document to CoNLL format. (https://github.com/stanfordnlp/stanza/pull/484 https://github.com/stanfordnlp/stanza/issues/483, thanks @m0re4u )\r\n\r\n- **Less randomness in sentiment results** Fixes prediction fluctuation in sentiment prediction. (https://github.com/stanfordnlp/stanza/issues/458 https://github.com/stanfordnlp/stanza/commit/274474c3b0e4155ab6e221146ac347ca433f81a6)\r\n\r\n- **Bugfix which should make it easier to use in jupyter / colab** This fixes the issue where jupyter notebooks (and by extension colab) don't like it when you use sys.stderr as the stderr of popen (https://github.com/stanfordnlp/stanza/pull/434 https://github.com/stanfordnlp/stanza/issues/431)\r\n\r\n- **Misc fixes for training, concurrency, and edge cases in basic Pipeline usage**\r\n  - **Fix for mwt training** (https://github.com/stanfordnlp/stanza/pull/446)\r\n  - **Fix for race condition in seq2seq models** (https://github.com/stanfordnlp/stanza/pull/463 https://github.com/stanfordnlp/stanza/issues/462)\r\n  - **Fix for race condition in CRF** (https://github.com/stanfordnlp/stanza/pull/566 https://github.com/stanfordnlp/stanza/issues/561)\r\n  - **Fix for empty text in pipeline** (https://github.com/stanfordnlp/stanza/pull/475 https://github.com/stanfordnlp/stanza/issues/474)\r\n  - **Fix for resources not freed when downloading** (https://github.com/stanfordnlp/stanza/issues/502 https://github.com/stanfordnlp/stanza/pull/503)\r\n  - **Fix for vietnamese pipeline not working** (https://github.com/stanfordnlp/stanza/issues/531 https://github.com/stanfordnlp/stanza/pull/535)\r\n\r\n## BREAKING CHANGES\r\n\r\n- **Renamed `stanza.models.tokenize` -> `stanza.models.tokenization`** https://github.com/stanfordnlp/stanza/pull/452  This stops the tokenize directory shadowing a built in library", "tarballUrl": "https://api.github.com/repos/stanfordnlp/stanza/tarball/v1.2.0", "zipballUrl": "https://api.github.com/repos/stanfordnlp/stanza/zipball/v1.2.0", "htmlUrl": "https://github.com/stanfordnlp/stanza/releases/tag/v1.2.0", "url": "https://api.github.com/repos/stanfordnlp/stanza/releases/29792569", "dateCreated": "2021-01-27T23:00:47Z", "datePublished": "2021-01-29T20:05:25Z"}, {"tagName": "v1.1.1", "name": "Stanza v1.1.1", "authorName": "J38", "authorType": "User", "body": "## Overview\r\n\r\nThis release features support for extending the capability of the Stanza pipeline with customized processors, a new sentiment analysis tool, improvements to the `CoreNLPClient` functionality, new models for a few languages (including Thai, which is supported for the first time in Stanza), new biomedical and clinical English packages, alternative servers for downloading resource files, and various improvements and bugfixes.\r\n\r\n## New Features and Enhancements\r\n\r\n- **New Sentiment Analysis Models for English, German, Chinese**: The default Stanza pipelines for English, German and Chinese now include sentiment analysis models. The released models are based on a convolutional neural network architecture, and predict three-way sentiment labels (negative/neutral/positive). For more information and details on the datasets used to train these models and their performance, please visit the Stanza website.\r\n\r\n- **New Biomedical and Clinical English Model Packages**: Stanza now features syntactic analysis and named entity recognition functionality for English biomedical literature text and clinical notes. These newly introduced packages include: 2 individual biomedical syntactic analysis pipelines, 8 biomedical NER models, 1 clinical syntactic pipelines and 2 clinical NER models. For detailed information on how to download and use these pipelines, please visit [Stanza's biomedical models page](https://stanfordnlp.github.io/stanza/biomed.html).\r\n\r\n- **Support for Adding User Customized Processors via Python Decorators**: Stanza now supports adding customized processors or processor variants (i.e., an alternative of existing processors) into existing pipelines. The name and implementation of the added customized processors or processor variants can be specified via `@register_processor` or `@register_processor_variant` decorators. See Stanza website for more information and examples (see [custom Processors](https://stanfordnlp.github.io/stanza/pipeline.html#building-your-own-processors-and-using-them-in-the-neural-pipeline) and [Processor variants](https://stanfordnlp.github.io/stanza/pipeline.html#processor-variants)). (PR https://github.com/stanfordnlp/stanza/pull/322)\r\n\r\n- **Support for Editable Properties For Data Objects**: We have made it easier to extend the functionality of the Stanza neural pipeline by adding new annotations to Stanza's data objects (e.g., `Document`, `Sentence`, `Token`, etc). Aside from the annotation they already support, additional annotation can be easily attached through `data_object.add_property()`. See [our documentation](https://stanfordnlp.github.io/stanza/data_objects.html#adding-new-properties-to-stanza-data-objects) for more information and examples. (PR https://github.com/stanfordnlp/stanza/pull/323)\r\n\r\n- **Support for Automated CoreNLP Installation and CoreNLP Model Download**: CoreNLP can now be easily downloaded in Stanza with `stanza.install_corenlp(dir='path/to/corenlp/installation')`; CoreNLP models can now be downloaded with `stanza.download_corenlp_models(model='english', version='4.1.0', dir='path/to/corenlp/installation')`. For more details please see the Stanza website. (PR https://github.com/stanfordnlp/stanza/pull/363)\r\n\r\n- **Japanese Pipeline Supports SudachiPy as External Tokenizer**: You can now use the [SudachiPy library](https://github.com/WorksApplications/SudachiPy) as tokenizer in a Stanza Japanese pipeline. Turn on this when building a pipeline with `nlp = stanza.Pipeline('ja', processors={'tokenize': 'sudachipy'}`. Note that this will require a separate installation of the SudachiPy library via pip. (PR https://github.com/stanfordnlp/stanza/pull/365)\r\n\r\n- **New Alternative Server for Stable Download of Resource Files**: Users in certain areas of the world that do not have stable access to GitHub servers can now download models from alternative Stanford server by specifying a new `resources_url` argument. For example, `stanza.download(lang='en', resources_url='stanford')` will now download the resource file and English pipeline from Stanford servers. (Issue https://github.com/stanfordnlp/stanza/issues/331, PR https://github.com/stanfordnlp/stanza/pull/356)\r\n\r\n- **`CoreNLPClient` Supports New Multiprocessing-friendly Mechanism to Start the CoreNLP Server**: The `CoreNLPClient` now supports a new `Enum` values with better semantics for its `start_server` argument for finer-grained control over how the server is launched, including a new option called `StartServer.TRY_START` that launches the CoreNLP Server if one isn't running already, but doesn't fail if one has already been launched. This option makes it easier for `CoreNLPClient` to be used in a multiprocessing environment. Boolean values are still supported for backward compatibility, but we recommend `StartServer.FORCE_START` and `StartSerer.DONT_START` for better readability. (PR https://github.com/stanfordnlp/stanza/pull/302)\r\n\r\n- **New Semgrex Interface in CoreNLP Client for Dependency Parses of Arbitrary Languages**: Stanford CoreNLP has a module which allows searches over dependency graphs using a regex-like language.  Previously, this was only usable for languages which CoreNLP already supported dependency trees.  This release expands it to dependency graphs for any language.  (Issue https://github.com/stanfordnlp/stanza/issues/399, PR https://github.com/stanfordnlp/stanza/pull/392)\r\n\r\n- **New Tokenizer for Thai Language**: The available UD data for Thai is quite small.  The authors of [pythainlp](https://github.com/PyThaiNLP/pythainlp) helped provide us two tokenization datasets, Orchid and Inter-BEST.  Future work will include POS, NER, and Sentiment.  (Issue https://github.com/stanfordnlp/stanza/issues/148)\r\n\r\n- **Support for Serialization of Document Objects**: Now you can serialize and deserialize the entire document by running `serialized_string = doc.to_serialized()` and `doc = Document.from_serialized(serialized_string)`. The serialized string can be decoded into Python objects by running `objs = pickle.loads(serialized_string)`. (Issue https://github.com/stanfordnlp/stanza/issues/361, PR https://github.com/stanfordnlp/stanza/pull/366)\r\n\r\n- **Improved Tokenization Speed**: Previously, the tokenizer was the slowest member of the neural pipeline, several times slower than any of the other processors.  This release brings it in line with the others.  The speedup is from improving the text processing before the data is passed to the GPU.  (Relevant commits: https://github.com/stanfordnlp/stanza/commit/546ed13563c3530b414d64b5a815c0919ab0513a, https://github.com/stanfordnlp/stanza/commit/8e2076c6a0bc8890a54d9ed6931817b1536ae33c, https://github.com/stanfordnlp/stanza/commit/7f5be823a587c6d1bec63d47cd22818c838901e7, etc.)\r\n\r\n- **User provided Ukrainian NER model**: We now have a [model](https://github.com/gawy/stanza-lang-uk/releases/tag/v0.9) built from the [lang-uk NER dataset](https://github.com/lang-uk/ner-uk), provided by a user for redistribution.\r\n\r\n## Breaking Interface Changes\r\n\r\n- **Token.id is Tuple and Word.id is Integer**: The `id` attribute for a token will now return a tuple of integers to represent the indices of the token (or a singleton tuple in the case of a single-word token), and the `id` for a word will now return an integer to represent the word index. Previously both attributes are encoded as strings and requires manual conversion for downstream processing. This change brings more convenient handling of these attributes. (Issue: https://github.com/stanfordnlp/stanza/issues/211, PR: https://github.com/stanfordnlp/stanza/pull/357)\r\n\r\n- **Changed Default Pipeline Packages for Several Languages for Improved Robustness**: Languages that have changed default packages include: Polish (default is now `PDB` model, from previous `LFG`, https://github.com/stanfordnlp/stanza/issues/220), Korean (default is now `GSD`, from previous `Kaist`, https://github.com/stanfordnlp/stanza/issues/276), Lithuanian (default is now `ALKSNIS`, from previous `HSE`, https://github.com/stanfordnlp/stanza/issues/415).\r\n\r\n- **CoreNLP 4.1.0 is required**: `CoreNLPClient` requires CoreNLP 4.1.0 or a later version. The client expects recent modifications that were made to the CoreNLP server.\r\n\r\n- **Properties Cache removed from CoreNLP client**: The properties_cache has been removed from `CoreNLPClient` and the `CoreNLPClient's` `annotate()` method no longer has a `properties_key` argument. Python dictionaries with custom request properties should be directly supplied to `annotate()` via the `properties` argument.\r\n\r\n## Bugfixes and Other Improvements\r\n\r\n- **Fixed Logging Behavior**: This is mainly for fixing the issue that Stanza will override the global logging setting in Python and influence downstream logging behaviors. (Issue https://github.com/stanfordnlp/stanza/issues/278, PR https://github.com/stanfordnlp/stanza/pull/290)\r\n\r\n- **Compatibility Fix for PyTorch v1.6.0**: We've updated several processors to adapt to new API changes in PyTorch v1.6.0. (Issues https://github.com/stanfordnlp/stanza/issues/412 https://github.com/stanfordnlp/stanza/issues/417, PR https://github.com/stanfordnlp/stanza/pull/406)\r\n\r\n- **Improved Batching for Long Sentences in Dependency Parser**: This is mainly for fixing an issue where long sentences will cause an out of GPU memory issue in the dependency parser. (Issue https://github.com/stanfordnlp/stanza/issues/387)\r\n\r\n- **Improved neural tokenizer robustness to whitespaces**: the neural tokenizer is now more robust to the presence of multiple consecutive whitespace characters (PR https://github.com/stanfordnlp/stanza/pull/380)\r\n\r\n- **Resolved properties issue when switching languages with requests to CoreNLP server**: An issue with default properties has been resolved. Users can now switch between CoreNLP supported languages with and get expected properties for each language by default.", "tarballUrl": "https://api.github.com/repos/stanfordnlp/stanza/tarball/v1.1.1", "zipballUrl": "https://api.github.com/repos/stanfordnlp/stanza/zipball/v1.1.1", "htmlUrl": "https://github.com/stanfordnlp/stanza/releases/tag/v1.1.1", "url": "https://api.github.com/repos/stanfordnlp/stanza/releases/29594327", "dateCreated": "2020-08-13T06:05:37Z", "datePublished": "2020-08-13T06:26:20Z"}, {"tagName": "v1.0.1", "name": "Stanza v1.0.1", "authorName": "yuhaozhang", "authorType": "User", "body": "## Overview\r\n\r\nThis is a maintenance release of Stanza. It features new support for `jieba` as Chinese tokenizer, faster lemmatizer implementation, improved compatibility with CoreNLP v4.0.0, and many more!\r\n\r\n## Enhancements\r\n\r\n- **Supporting `jieba` library as Chinese tokenizer**. The Stanza (simplified and traditional) Chinese pipelines now support using the `jieba` Chinese word segmentation library as tokenizer. Turn on this feature in a pipeline with: `nlp = stanza.Pipeline('zh', processors={'tokenize': 'jieba'}`, or by specifying argument `tokenize_with_jieba=True`.\r\n\r\n- **Setting resource directory with environment variable**. You can now override the default model location `$HOME/stanza_resources` by setting an environmental variable `STANZA_RESOURCES_DIR` (https://github.com/stanfordnlp/stanza/issues/227). The new directory will then be used to store and look up model files. Thanks to @dhpollack for implementing this feature.\r\n\r\n- **Faster lemmatizer implementation.** The lemmatizer implementation has been improved to be about 3x faster on CPU and 5x faster on GPU (https://github.com/stanfordnlp/stanza/issues/249). Thanks to @mahdiman for identifying the original issue.\r\n\r\n- **Improved compatibility with CoreNLP 4.0.0**. The client is now fully compatible with the latest [v4.0.0 release of the CoreNLP package](https://stanfordnlp.github.io/CoreNLP/).\r\n\r\n## Bugfixes\r\n\r\n- **Correct character offsets in NER outputs from pre-tokenized text**. We fixed an issue where the NER outputs from pre-tokenized text may be off-by-one (https://github.com/stanfordnlp/stanza/issues/229). Thanks to @RyanElliott10 for reporting the issue.\r\n\r\n- **Correct Vietnamese tokenization on sentences beginning with punctuation**. We fixed an issue where the Vietnamese tokenizer may throw an `AssertionError` on sentences that begin with a punctuation (https://github.com/stanfordnlp/stanza/issues/217). Thanks to @aryamccarthy for reporting this issue.\r\n\r\n- **Correct pytorch version requirement**. Stanza is now asking for `pytorch>=1.3.0` to avoid a runtime error raised by pytorch ((https://github.com/stanfordnlp/stanza/issues/231)). Thanks to @Vodkazy for reporting this.\r\n\r\n## Known Model Issues & Solutions\r\n\r\n- **Default Korean Kaist tokenizer failing on punctuation.** The default Korean Kaist model is reported to have issues with separating punctuations during tokenization (https://github.com/stanfordnlp/stanza/issues/276). Switching to the Korean `GSD` model may solve this issue.\r\n\r\n- **Default Polish LFG POS tagger incorrectly labeling last word in sentence as `PUNCT`**. The default Polish model trained on the `LFG` treebank may incorrectly tag the last word in a sentence as `PUNCT` (https://github.com/stanfordnlp/stanza/issues/220). This issue may be solved by switching to the Polish `PDB` model.\r\n\r\n", "tarballUrl": "https://api.github.com/repos/stanfordnlp/stanza/tarball/v1.0.1", "zipballUrl": "https://api.github.com/repos/stanfordnlp/stanza/zipball/v1.0.1", "htmlUrl": "https://github.com/stanfordnlp/stanza/releases/tag/v1.0.1", "url": "https://api.github.com/repos/stanfordnlp/stanza/releases/25908143", "dateCreated": "2020-04-27T06:22:36Z", "datePublished": "2020-04-27T07:21:58Z"}, {"tagName": "1.0.1", "name": "Stanza v1.0.1", "authorName": "yuhaozhang", "authorType": "User", "body": "## Overview\r\n\r\nThis is a maintenance release of Stanza. It features new support for `jieba` as Chinese tokenizer, faster lemmatizer implementation, improved compatibility with CoreNLP v4.0.0, and many more!\r\n\r\n## Enhancements\r\n\r\n- **Supporting `jieba` library as Chinese tokenizer**. The Stanza (simplified and traditional) Chinese pipelines now support using the `jieba` Chinese word segmentation library as tokenizer. Turn on this feature in a pipeline with: `nlp = stanza.Pipeline('zh', processors={'tokenize': 'jieba'}`, or by specifying argument `tokenize_with_jieba=True`.\r\n\r\n- **Setting resource directory with environment variable**. You can now override the default model location `$HOME/stanza_resources` by setting an environmental variable `STANZA_RESOURCES_DIR` (https://github.com/stanfordnlp/stanza/issues/227). The new directory will then be used to store and look up model files. Thanks to @dhpollack for implementing this feature.\r\n\r\n- **Faster lemmatizer implementation.** The lemmatizer implementation has been improved to be about 3x faster on CPU and 5x faster on GPU (https://github.com/stanfordnlp/stanza/issues/249). Thanks to @mahdiman for identifying the original issue.\r\n\r\n- **Improved compatibility with CoreNLP 4.0.0**. The client is now fully compatible with the latest [v4.0.0 release of the CoreNLP package](https://stanfordnlp.github.io/CoreNLP/).\r\n\r\n## Bugfixes\r\n\r\n- **Correct character offsets in NER outputs from pre-tokenized text**. We fixed an issue where the NER outputs from pre-tokenized text may be off-by-one (https://github.com/stanfordnlp/stanza/issues/229). Thanks to @RyanElliott10 for reporting the issue.\r\n\r\n- **Correct Vietnamese tokenization on sentences beginning with punctuation**. We fixed an issue where the Vietnamese tokenizer may throw an `AssertionError` on sentences that begin with a punctuation (https://github.com/stanfordnlp/stanza/issues/217). Thanks to @aryamccarthy for reporting this issue.\r\n\r\n- **Correct pytorch version requirement**. Stanza is now asking for `pytorch>=1.3.0` to avoid a runtime error raised by pytorch ((https://github.com/stanfordnlp/stanza/issues/231)). Thanks to @Vodkazy for reporting this.\r\n\r\n## Known Model Issues & Solutions\r\n\r\n- **Default Korean Kaist tokenizer failing on punctuation.** The default Korean Kaist model is reported to have issues with separating punctuations during tokenization (https://github.com/stanfordnlp/stanza/issues/276). Switching to the Korean `GSD` model may solve this issue.\r\n\r\n- **Default Polish LFG POS tagger incorrectly labeling last word in sentence as `PUNCT`**. The default Polish model trained on the `LFG` treebank may incorrectly tag the last word in a sentence as `PUNCT` (https://github.com/stanfordnlp/stanza/issues/220). This issue may be solved by switching to the Polish `PDB` model.\r\n\r\n", "tarballUrl": "https://api.github.com/repos/stanfordnlp/stanza/tarball/1.0.1", "zipballUrl": "https://api.github.com/repos/stanfordnlp/stanza/zipball/1.0.1", "htmlUrl": "https://github.com/stanfordnlp/stanza/releases/tag/1.0.1", "url": "https://api.github.com/repos/stanfordnlp/stanza/releases/25940010", "dateCreated": "2020-04-27T06:22:36Z", "datePublished": "2020-04-27T21:43:25Z"}, {"tagName": "v1.0.0", "name": "Stanza v1.0.0", "authorName": "qipeng", "authorType": "User", "body": "## Overview\r\nThis is the first major release of Stanza (previously known as [StanfordNLP](https://github.com/stanfordnlp/stanfordnlp/)), a software package to process many human languages. The main features of this release are\r\n* **Multi-lingual named entity recognition support**. Stanza supports named entity recognition in 8 languages (and 12 datasets): Arabic, Chinese, Dutch, English, French, German, Russian, and Spanish. The most comprehensive NER models in each language is now part of the default model download of that model, along with other models trained on the largest dataset available.\r\n* **Accurate neural network models**. Stanza features highly accurate data-driven neural network models for a wide collection of natural language processing tasks, including tokenization, sentence segmentation, part-of-speech tagging, morphological feature tagging, dependency parsing, and named entity recognition.\r\n* **State-of-the-art pretrained models freely available**. Stanza features a few hundred pretrained models for 60+ languages, all freely availble and easily downloadable from native Python code. Most of these models achieve state-of-the-art (or competitive) performance on these tasks.\r\n* **Expanded language support**. Stanza now supports more than 60 human languages, representing a wide-range of language families.\r\n* **Easy-to-use native Python interface**. We've improved the usability of the interface to maximize transparency. Now intermediate processing results are more easily viewed and accessed as native Python objects.\r\n* **Anaconda support**. Stanza now officially supports installation from Anaconda. You can install Stanza through Stanford NLP Group's Anaconda channel `conda install -c stanfordnlp stanza`.\r\n* **Improved documentation**. We have improved [our documentation](https://stanfordnlp.github.io/stanza/) to include a comprehensive coverage of the basic and advanced functionalities supported by Stanza.\r\n* **Improved CoreNLP support in Python**. We have improved the robustness and efficiency of the `CoreNLPClient` to access the Java CoreNLP software from Python code. It is also forward compatible with the next major release of CoreNLP.\r\n## Enhancements and Bugfixes\r\nThis release also contains many enhancements and bugfixes:\r\n* [Enhancement] Improved lemmatization support with proper conditioning on POS tags (#143). Thanks to @nljubesi for the report!\r\n* [Enhancement] Get the text corresponding to sentences in the document. Access it through `sentence.text`. (#80)\r\n* [Enhancement] Improved logging. Stanza now uses Python's `logging` for all procedual logging, which can be controlled globally either through `logging_level` or a `verbose` shortcut. See [this page](https://stanfordnlp.github.io/stanza/pipeline.html#pipeline) for more information. (#81)\r\n* [Enhancement] Allow the user to use the Stanza tokenizer with their own sentence split, which might be useful for applications like machine translation. Simply set `tokenize_no_ssplit` to `True` at pipeline instantiation. (#108)\r\n* [Enhancement] Support running the dependency parser only given tokenized,  sentence segmented, and POS/morphological feature tagged data. Simply set `depparse_pretagged` to `True` at pipeline instantiation. (#141) Thanks @mrapacz for the contribution!\r\n* [Enhancement] Added spaCy as an option for tokenizing (and sentence segmenting) English text for efficiency. See this [documentation page](https://stanfordnlp.github.io/stanza/tokenize.html#use-spacy-for-fast-tokenization-and-sentence-segmentation) for a quick example.\r\n* [Enhancement] Add character offsets to tokens, sentences, and spans.\r\n* [Bugfix] Correctly decide whether to load pretrained embedding files given training flags. (#120)\r\n* [Bugfix] Google proto buffers reporting errors for long input when using the `CoreNLPClient`. (#154)\r\n* [Bugfix] Remove deprecation warnings from newer versions of PyTorch. (#162)\r\n## Breaking Changes\r\nNote that if your code was developed on a previous version of the package, there are potentially many breaking changes in this release. The most notable changes are in the `Document` objects, which contain all the annotations for the raw text or document fed into the Stanza pipeline. The underlying implementation of `Document` and all related data objects have broken away from using the CoNLL-U format as its internal representation for more flexibility and efficiency accessing their attributes, although it is still compatible with CoNLL-U to maintain ease of conversion between the two. Moreover, many properties have been renamed for clarity and sometimes aliased for ease of access. Please see our documentation page about these [data objects](https://stanfordnlp.github.io/stanza/data_objects.html) for more information.", "tarballUrl": "https://api.github.com/repos/stanfordnlp/stanza/tarball/v1.0.0", "zipballUrl": "https://api.github.com/repos/stanfordnlp/stanza/zipball/v1.0.0", "htmlUrl": "https://github.com/stanfordnlp/stanza/releases/tag/v1.0.0", "url": "https://api.github.com/repos/stanfordnlp/stanza/releases/24604222", "dateCreated": "2020-03-17T02:05:43Z", "datePublished": "2020-03-17T17:13:53Z"}, {"tagName": "v0.2.0", "name": "v0.2.0", "authorName": "J38", "authorType": "User", "body": "This release features major improvements on memory efficiency and speed of the neural network pipeline in stanfordnlp and various bugfixes. These features include:\r\n\r\n- The downloadable pretrained neural network models are now substantially smaller in size (due to the use of smaller pretrained vocabularies) with comparable performance. Notably, the default English model is now ~9x smaller in size, German ~11x, French ~6x and  Chinese ~4x. As a result, memory efficiency of the neural pipelines for most languages are substantially improved.\r\n\r\n- Substantial speedup of the neural lemmatizer via reduced neural sequence-to-sequence operations.\r\n\r\n- The neural network pipeline can now take in a Python list of strings representing pre-tokenized text. (https://github.com/stanfordnlp/stanfordnlp/issues/58)\r\n\r\n- A requirements checking framework is now added in the neural pipeline, ensuring the proper processors are specified for a given pipeline configuration. The pipeline will now raise an exception when a requirement is not satisfied. (https://github.com/stanfordnlp/stanfordnlp/issues/42)\r\n\r\n- Bugfix related to alignment between tokens and words post the multi-word expansion processor. (https://github.com/stanfordnlp/stanfordnlp/issues/71)\r\n\r\n- More options are added for customizing the Stanford CoreNLP server at start time, including specifying properties for the default pipeline, and setting all server options such as username/password. For more details on different options, please checkout the [client documentation page](https://stanfordnlp.github.io/stanfordnlp/corenlp_client.html#customizing-properties-for-server-start-and-requests).\r\n\r\n- `CoreNLPClient` instance can now be created with CoreNLP default language properties as:\r\n```python\r\nclient = CoreNLPClient(properties='chinese')\r\n```\r\n\r\n- Alternatively, a properties file can now be used during the creation of a `CoreNLPClient`:\r\n```python\r\nclient = CoreNLPClient(properties='/path/to/corenlp.props')\r\n```\r\n\r\n- All specified CoreNLP annotators are now preloaded by default when a `CoreNLPClient` instance is created. (https://github.com/stanfordnlp/stanfordnlp/issues/56)\r\n", "tarballUrl": "https://api.github.com/repos/stanfordnlp/stanza/tarball/v0.2.0", "zipballUrl": "https://api.github.com/repos/stanfordnlp/stanza/zipball/v0.2.0", "htmlUrl": "https://github.com/stanfordnlp/stanza/releases/tag/v0.2.0", "url": "https://api.github.com/repos/stanfordnlp/stanza/releases/17403050", "dateCreated": "2019-05-16T07:35:44Z", "datePublished": "2019-05-16T17:31:43Z"}, {"tagName": "v0.1.2", "name": "v0.1.2", "authorName": "qipeng", "authorType": "User", "body": "This is a maintenance release of stanfordnlp. This release features:\r\n\r\n* Allowing the tokenizer to treat the incoming document as pretokenized with space separated words in newline separated sentences. Set `tokenize_pretokenized` to `True` when building the pipeline to skip the neural tokenizer, and run all downstream components with your own tokenized text. (#24, #34)\r\n* Speedup in the POS/Feats tagger in evaluation (up to 2 orders of magnitude). (#18)\r\n* Various minor fixes and documentation improvements\r\n\r\nWe would also like to thank the following community members for their contribution:\r\nCode improvements: @lwolfsonkin \r\nDocumentation improvements: @0xflotus \r\nAnd thanks to everyone that raised issues and helped improve stanfordnlp!", "tarballUrl": "https://api.github.com/repos/stanfordnlp/stanza/tarball/v0.1.2", "zipballUrl": "https://api.github.com/repos/stanfordnlp/stanza/zipball/v0.1.2", "htmlUrl": "https://github.com/stanfordnlp/stanza/releases/tag/v0.1.2", "url": "https://api.github.com/repos/stanfordnlp/stanza/releases/15794254", "dateCreated": "2019-02-26T22:39:54Z", "datePublished": "2019-02-26T23:34:52Z"}, {"tagName": "v0.1.0", "name": "v0.1.0", "authorName": "yuhaozhang", "authorType": "User", "body": "The initial release of StanfordNLP. StanfordNLP is the combination of the software package used by the Stanford team in the CoNLL 2018 Shared Task on Universal Dependency Parsing, and the group\u2019s official Python interface to the [Stanford CoreNLP software](https://stanfordnlp.github.io/CoreNLP). This package is built with highly accurate neural network components that enables efficient training and evaluation with your own annotated data. The modules are built on top of [PyTorch](https://pytorch.org/) (v1.0.0).\r\n\r\nStanfordNLP features:\r\n\r\n- Native Python implementation requiring minimal efforts to set up;\r\n- Full neural network pipeline for robust text analytics, including tokenization, multi-word token (MWT) expansion, lemmatization, part-of-speech (POS) and morphological features tagging and dependency parsing;\r\n- Pretrained neural models supporting 53 (human) languages featured in 73 treebanks;\r\n- A stable, officially maintained Python interface to CoreNLP.", "tarballUrl": "https://api.github.com/repos/stanfordnlp/stanza/tarball/v0.1.0", "zipballUrl": "https://api.github.com/repos/stanfordnlp/stanza/zipball/v0.1.0", "htmlUrl": "https://github.com/stanfordnlp/stanza/releases/tag/v0.1.0", "url": "https://api.github.com/repos/stanfordnlp/stanza/releases/15277572", "dateCreated": "2019-01-30T00:55:00Z", "datePublished": "2019-01-30T22:10:15Z"}], "confidence": [1.0], "technique": "GitHub API"}}
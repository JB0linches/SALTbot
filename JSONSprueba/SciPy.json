{"description": [{"excerpt": "Writing code isn\u2019t the only way to contribute to SciPy. You can also: \n- review pull requests\n- triage issues\n- develop tutorials, presentations, and other educational materials\n- maintain and improve `our website <https://github.com/scipy/scipy.org>`__\n- develop graphic design for our brand assets and promotional materials\n- help with outreach and onboard new contributors\n- write grant proposals and help with other fundraising efforts \n", "confidence": [[0.8524022139026552, 0.9423742667240568]], "technique": "Supervised classification", "originalHeader": "Call for Contributions"}, {"excerpt": "SciPy library main repository", "confidence": [1.0], "technique": "GitHub API"}], "installation": [{"excerpt": "Writing code isn\u2019t the only way to contribute to SciPy. You can also: \n", "confidence": [[0.8090092324451624]], "technique": "Supervised classification", "originalHeader": "Call for Contributions"}, {"excerpt": "If you\u2019re unsure where to start or how your skills fit in, reach out! You can\nask on the mailing list or here, on GitHub, by leaving a\ncomment on a relevant issue that is already open. \n", "confidence": [[0.868116839846253]], "technique": "Supervised classification", "originalHeader": "Call for Contributions"}], "codeRepository": {"excerpt": "https://github.com/scipy/scipy", "confidence": [1.0], "technique": "GitHub API"}, "owner": {"excerpt": "scipy", "confidence": [1.0], "technique": "GitHub API"}, "ownerType": {"excerpt": "Organization", "confidence": [1.0], "technique": "GitHub API"}, "dateCreated": {"excerpt": "2011-03-09T18:52:03Z", "confidence": [1.0], "technique": "GitHub API"}, "dateModified": {"excerpt": "2022-04-19T12:29:18Z", "confidence": [1.0], "technique": "GitHub API"}, "license": {"excerpt": {"name": "BSD 3-Clause \"New\" or \"Revised\" License", "url": "https://api.github.com/licenses/bsd-3-clause"}, "confidence": [1.0], "technique": "GitHub API"}, "name": {"excerpt": "scipy", "confidence": [1.0], "technique": "GitHub API"}, "fullName": {"excerpt": "scipy/scipy", "confidence": [1.0], "technique": "GitHub API"}, "issueTracker": {"excerpt": "https://api.github.com/repos/scipy/scipy/issues{/number}", "confidence": [1.0], "technique": "GitHub API"}, "forksUrl": {"excerpt": "https://api.github.com/repos/scipy/scipy/forks", "confidence": [1.0], "technique": "GitHub API"}, "downloadUrl": {"excerpt": "https://github.com/scipy/scipy/releases", "confidence": [1.0], "technique": "GitHub API"}, "topics": {"excerpt": ["python", "scipy", "algorithms", "closember", "scientific-computing"], "confidence": [1.0], "technique": "GitHub API"}, "stargazersCount": {"excerpt": {"count": 9479, "date": "Tue, 19 Apr 2022 14:35:35 GMT"}, "confidence": [1.0], "technique": "GitHub API"}, "forksCount": {"excerpt": {"count": 4202, "date": "Tue, 19 Apr 2022 14:35:35 GMT"}, "confidence": [1.0], "technique": "GitHub API"}, "languages": {"excerpt": ["Python", "Fortran", "C", "Cython", "C++", "Meson", "TeX", "Dockerfile", "MATLAB", "Shell", "Makefile"], "confidence": [1.0], "technique": "GitHub API"}, "readmeUrl": {"excerpt": "https://github.com/scipy/scipy/blob/main/README.rst", "confidence": [1.0], "technique": "GitHub API"}, "licenseText": {"excerpt": "b'Copyright (c) 2002-2005, Jean-Sebastien Roy (js@jeannot.org)\\n\\nPermission is hereby granted, free of charge, to any person obtaining a\\ncopy of this software and associated documentation files (the\\n\"Software\"), to deal in the Software without restriction, including\\nwithout limitation the rights to use, copy, modify, merge, publish,\\ndistribute, sublicense, and/or sell copies of the Software, and to\\npermit persons to whom the Software is furnished to do so, subject to\\nthe following conditions:\\n\\nThe above copyright notice and this permission notice shall be included\\nin all copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n'", "confidence": [1.0], "technique": "File Exploration"}, "codeOfConduct": {"excerpt": "https://raw.githubusercontent.com/scipy/scipy/main/CODE_OF_CONDUCT.md", "confidence": [1.0], "technique": "File Exploration"}, "hasBuildFile": {"excerpt": ["https://raw.githubusercontent.com/scipy/scipy/main/tools/Dockerfile", "https://raw.githubusercontent.com/scipy/scipy/main/tools/docker_dev/Dockerfile"], "confidence": [1.0], "technique": "File Exploration"}, "hasDocumentation": {"excerpt": ["https://github.com/scipy/scipy/tree/main/scipy/signal/docs"], "confidence": [1.0], "technique": "File Exploration"}, "hasScriptFile": {"excerpt": ["https://raw.githubusercontent.com/scipy/scipy/main/tools/check_pyext_symbol_hiding.sh"], "confidence": [1.0], "technique": "File Exploration"}, "releases": {"excerpt": [{"tagName": "v1.8.0", "name": "SciPy 1.8.0", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.8.0 Release Notes\r\n====================\r\n\r\nSciPy `1.8.0` is the culmination of `6` months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.8.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.8+` and `NumPy 1.17.3` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0+` is required.\r\n\r\n\r\n\r\nHighlights of this release\r\n===================\r\n\r\n- A sparse array API has been added for early testing and feedback; this\r\n  work is ongoing, and users should expect minor API refinements over\r\n  the next few releases.\r\n- The sparse SVD library PROPACK is now vendored with SciPy, and an interface\r\n  is exposed via `scipy.sparse.svds` with ``solver='PROPACK'``. It is currently\r\n  default-off due to potential issues on Windows that we aim to\r\n  resolve in the next release, but can be optionally enabled at runtime for\r\n  friendly testing with an environment variable setting of ``USE_PROPACK=1``.\r\n- A new `scipy.stats.sampling` submodule that leverages the ``UNU.RAN`` C\r\n  library to sample from arbitrary univariate non-uniform continuous and\r\n  discrete distributions\r\n- All namespaces that were private but happened to miss underscores in\r\n  their names have been deprecated.\r\n\r\n\r\n\r\nNew features\r\n==========\r\n\r\n`scipy.fft` improvements\r\n===================\r\n\r\nAdded an ``orthogonalize=None`` parameter to the real transforms in `scipy.fft`\r\nwhich controls whether the modified definition of DCT/DST is used without\r\nchanging the overall scaling.\r\n\r\n`scipy.fft` backend registration is now smoother, operating with a single\r\nregistration call and no longer requiring a context manager.\r\n\r\n`scipy.integrate` improvements\r\n=========================\r\n\r\n`scipy.integrate.quad_vec` introduces a new optional keyword-only argument,\r\n``args``. ``args`` takes in a tuple of extra arguments if any (default is\r\n``args=()``), which is then internally used to pass into the callable function\r\n(needing these extra arguments) which we wish to integrate.\r\n\r\n`scipy.interpolate` improvements\r\n==========================\r\n\r\n`scipy.interpolate.BSpline` has a new method, ``design_matrix``, which\r\nconstructs a design matrix of b-splines in the sparse CSR format.\r\n\r\nA new method ``from_cubic`` in ``BSpline`` class allows to convert a\r\n``CubicSpline`` object to ``BSpline`` object.\r\n\r\n`scipy.linalg` improvements\r\n=====================\r\n\r\n`scipy.linalg` gained three new public array structure investigation functions.\r\n`scipy.linalg.bandwidth` returns information about the bandedness of an array\r\nand can be used to test for triangular structure discovery, while\r\n`scipy.linalg.issymmetric` and `scipy.linalg.ishermitian` test the array for\r\nexact and approximate symmetric/Hermitian structure.\r\n\r\n`scipy.optimize` improvements\r\n=======================\r\n\r\n`scipy.optimize.check_grad` introduces two new optional keyword only arguments,\r\n``direction`` and ``seed``. ``direction`` can take values, ``'all'`` (default),\r\nin which case all the one hot direction vectors will be used for verifying\r\nthe input analytical gradient function and ``'random'``, in which case a\r\nrandom direction vector will be used for the same purpose. ``seed``\r\n(default is ``None``) can be used for reproducing the return value of\r\n``check_grad`` function. It will be used only when ``direction='random'``.\r\n\r\nThe `scipy.optimize.minimize` ``TNC`` method has been rewritten to use Cython\r\nbindings. This also fixes an issue with the callback altering the state of the\r\noptimization.\r\n\r\nAdded optional parameters ``target_accept_rate`` and ``stepwise_factor`` for\r\nadapative step size adjustment in ``basinhopping``.\r\n\r\nThe ``epsilon`` argument to ``approx_fprime`` is now optional so that it may\r\nhave a default value consistent with most other functions in `scipy.optimize`.\r\n\r\n`scipy.signal` improvements\r\n======================\r\n\r\nAdd ``analog`` argument, default ``False``, to ``zpk2sos``, and add new pairing\r\noption ``'minimal'`` to construct analog and minimal discrete SOS arrays.\r\n``tf2sos`` uses zpk2sos; add ``analog`` argument here as well, and pass it on\r\nto ``zpk2sos``.\r\n\r\n``savgol_coeffs`` and ``savgol_filter`` now work for even window lengths.\r\n\r\nAdded the Chirp Z-transform and Zoom FFT available as `scipy.signal.CZT` and\r\n`scipy.signal.ZoomFFT`.\r\n\r\n`scipy.sparse` improvements\r\n======================\r\n\r\nAn array API has been added for early testing and feedback; this\r\nwork is ongoing, and users should expect minor API refinements over\r\nthe next few releases. Please refer to the `scipy.sparse`\r\ndocstring for more information.\r\n\r\n``maximum_flow`` introduces optional keyword only argument, ``method``\r\nwhich accepts either, ``'edmonds-karp'`` (Edmonds Karp algorithm) or\r\n``'dinic'`` (Dinic's algorithm). Moreover, ``'dinic'`` is used as default\r\nvalue for ``method`` which means that Dinic's algorithm is used for computing\r\nmaximum flow unless specified. See, the comparison between the supported\r\nalgorithms in\r\n`this comment <https://github.com/scipy/scipy/pull/14358#issue-684212523>`_.\r\n\r\nParameters ``atol``, ``btol`` now default to 1e-6 in\r\n`scipy.sparse.linalg.lsmr` to match with default values in\r\n`scipy.sparse.linalg.lsqr`.\r\n\r\nAdd the Transpose-Free Quasi-Minimal Residual algorithm (TFQMR) for general\r\nnonsingular non-Hermitian linear systems in `scipy.sparse.linalg.tfqmr`.\r\n\r\nThe sparse SVD library PROPACK is now vendored with SciPy, and an interface is\r\nexposed via `scipy.sparse.svds` with ``solver='PROPACK'``. For some problems,\r\nthis may be faster and/or more accurate than the default, ARPACK. PROPACK\r\nfunctionality is currently opt-in--you must specify ``USE_PROPACK=1`` at\r\nruntime to use it due to potential issues on Windows\r\nthat we aim to resolve in the next release.\r\n\r\n``sparse.linalg`` iterative solvers now have a nonzero initial guess option,\r\nwhich may be specified as ``x0 = 'Mb'``.\r\n\r\nThe ``trace`` method has been added for sparse matrices.\r\n\r\n`scipy.spatial` improvements\r\n======================\r\n\r\n`scipy.spatial.transform.Rotation` now supports item assignment and has a new\r\n``concatenate`` method.\r\n\r\nAdd `scipy.spatial.distance.kulczynski1` in favour of\r\n`scipy.spatial.distance.kulsinski` which will be deprecated in the next\r\nrelease.\r\n\r\n`scipy.spatial.distance.minkowski` now also supports ``0<p<1``.\r\n\r\n`scipy.special` improvements\r\n=======================\r\n\r\nThe new function `scipy.special.log_expit` computes the logarithm of the\r\nlogistic sigmoid function. The function is formulated to provide accurate\r\nresults for large positive and negative inputs, so it avoids the problems\r\nthat would occur in the naive implementation ``log(expit(x))``.\r\n\r\nA suite of five new functions for elliptic integrals:\r\n``scipy.special.ellipr{c,d,f,g,j}``. These are the\r\n`Carlson symmetric elliptic integrals <https://dlmf.nist.gov/19.16>`_, which\r\nhave computational advantages over the classical Legendre integrals. Previous\r\nversions included some elliptic integrals from the Cephes library\r\n(``scipy.special.ellip{k,km1,kinc,e,einc}``) but was missing the integral of\r\nthird kind (Legendre's Pi), which can be evaluated using the new Carlson\r\nfunctions. The new Carlson elliptic integral functions can be evaluated in the\r\ncomplex plane, whereas the Cephes library's functions are only defined for\r\nreal inputs.\r\n\r\nSeveral defects in `scipy.special.hyp2f1` have been corrected. Approximately\r\ncorrect values are now returned for ``z`` near ``exp(+-i*pi/3)``, fixing\r\n`#8054 <https://github.com/scipy/scipy/issues/8054>`_. Evaluation for such ``z``\r\nis now calculated through a series derived by\r\n`L\u00f3pez and Temme (2013) <https://arxiv.org/abs/1306.2046>`_ that converges in\r\nthese regions. In addition, degenerate cases with one or more of ``a``, ``b``,\r\nand/or ``c`` a non-positive integer are now handled in a manner consistent with\r\n`mpmath's hyp2f1 implementation <https://mpmath.org/doc/current/functions/hypergeometric.html>`_,\r\nwhich fixes `#7340 <https://github.com/scipy/scipy/issues/7340>`_. These fixes\r\nwere made as part of an effort to rewrite the Fortran 77 implementation of\r\nhyp2f1 in Cython piece by piece. This rewriting is now roughly 50% complete.\r\n\r\n`scipy.stats` improvements\r\n======================\r\n\r\n`scipy.stats.qmc.LatinHypercube` introduces two new optional keyword-only\r\narguments, ``optimization`` and ``strength``. ``optimization`` is either\r\n``None`` or ``random-cd``. In the latter, random permutations are performed to\r\nimprove the centered discrepancy. ``strength`` is either 1 or 2. 1 corresponds\r\nto the classical LHS while 2 has better sub-projection properties. This\r\nconstruction is referred to as an orthogonal array based LHS of strength 2.\r\nIn both cases, the output is still a LHS.\r\n\r\n`scipy.stats.qmc.Halton` is faster as the underlying Van der Corput sequence\r\nwas ported to Cython.\r\n\r\nThe ``alternative`` parameter was added to the ``kendalltau`` and ``somersd``\r\nfunctions to allow one-sided hypothesis testing. Similarly, the masked\r\nversions of ``skewtest``, ``kurtosistest``, ``ttest_1samp``, ``ttest_ind``,\r\nand ``ttest_rel`` now also have an ``alternative`` parameter.\r\n\r\nAdd `scipy.stats.gzscore` to calculate the geometrical z score.\r\n\r\nRandom variate generators to sample from arbitrary univariate non-uniform\r\ncontinuous and discrete distributions have been added to the new\r\n`scipy.stats.sampling` submodule. Implementations of a C library\r\n`UNU.RAN <http://statmath.wu.ac.at/software/unuran/>`_ are used for\r\nperformance. The generators added are:\r\n\r\n- TransformedDensityRejection\r\n- DiscreteAliasUrn\r\n- NumericalInversePolynomial\r\n- DiscreteGuideTable\r\n- SimpleRatioUniforms\r\n\r\nThe ``binned_statistic`` set of functions now have improved performance for\r\nthe ``std``, ``min``, ``max``, and ``median`` statistic calculations.\r\n\r\n``somersd`` and ``_tau_b`` now have faster Pythran-based implementations.\r\n\r\nSome general efficiency improvements to handling of ``nan`` values in\r\nseveral ``stats`` functions.\r\n\r\nAdded the Tukey-Kramer test as `scipy.stats.tukey_hsd`.\r\n\r\nImproved performance of `scipy.stats.argus` ``rvs`` method.\r\n\r\nAdded the parameter ``keepdims`` to `scipy.stats.variation` and prevent the\r\nundesirable return of a masked array from the function in some cases.\r\n\r\n``permutation_test`` performs an exact or randomized permutation test of a\r\ngiven statistic on provided data.\r\n\r\n\r\nDeprecated features\r\n================\r\n\r\nClear split between public and private API\r\n================================\r\n\r\nSciPy has always documented what its public API consisted of in\r\n:ref:`its API reference docs <scipy-api>`,\r\nhowever there never was a clear split between public and\r\nprivate namespaces in the code base. In this release, all namespaces that were\r\nprivate but happened to miss underscores in their names have been deprecated.\r\nThese include (as examples, there are many more):\r\n\r\n- ``scipy.signal.spline``\r\n- ``scipy.ndimage.filters``\r\n- ``scipy.ndimage.fourier``\r\n- ``scipy.ndimage.measurements``\r\n- ``scipy.ndimage.morphology``\r\n- ``scipy.ndimage.interpolation``\r\n- ``scipy.sparse.linalg.solve``\r\n- ``scipy.sparse.linalg.eigen``\r\n- ``scipy.sparse.linalg.isolve``\r\n\r\nAll functions and other objects in these namespaces that were meant to be\r\npublic are accessible from their respective public namespace (e.g.\r\n`scipy.signal`). The design principle is that any public object must be\r\naccessible from a single namespace only; there are a few exceptions, mostly for\r\nhistorical reasons (e.g., ``stats`` and ``stats.distributions`` overlap).\r\nFor other libraries aiming to provide a SciPy-compatible API, it is now\r\nunambiguous what namespace structure to follow.  See\r\n`gh-14360 <https://github.com/scipy/scipy/issues/14360>`_ for more details.\r\n\r\nOther deprecations\r\n===============\r\n\r\n``NumericalInverseHermite`` has been deprecated from `scipy.stats` and moved\r\nto the `scipy.stats.sampling` submodule. It now uses the C implementation of\r\nthe UNU.RAN library so the result of methods like ``ppf`` may vary slightly.\r\nParameter ``tol`` has been deprecated and renamed to ``u_resolution``. The\r\nparameter ``max_intervals`` has also been deprecated and will be removed in a\r\nfuture release of SciPy.\r\n\r\n\r\nBackwards incompatible changes\r\n=========================\r\n\r\n- SciPy has raised the minimum compiler versions to GCC 6.3 on linux and\r\n  VS2019 on windows. In particular, this means that SciPy may now use C99 and\r\n  C++14 features. For more details see\r\n  `here <https://docs.scipy.org/doc/scipy/reference/dev/toolchain.html>`_.\r\n- The result for empty bins for `scipy.stats.binned_statistic` with the builtin\r\n  ``'std'`` metric is now ``nan``, for consistency with ``np.std``.\r\n- The function `scipy.spatial.distance.wminkowski` has been removed. To achieve\r\n  the same results as before, please use the ``minkowski`` distance function\r\n  with the (optional) ``w=`` keyword-argument for the given weight.\r\n\r\nOther changes\r\n===========\r\n\r\nSome Fortran 77 code was modernized to be compatible with NAG's nagfor Fortran\r\ncompiler (see, e.g., `PR 13229 <https://github.com/scipy/scipy/pull/13229>`_).\r\n\r\n``threadpoolctl`` may now be used by our test suite to substantially improve\r\nthe efficiency of parallel test suite runs.\r\n\r\n\r\nAuthors\r\n======\r\n\r\n* @endolith\r\n* adamadanandy +\r\n* akeemlh +\r\n* Anton Akhmerov\r\n* Marvin Albert +\r\n* alegresor +\r\n* Andrew Annex +\r\n* Pantelis Antonoudiou +\r\n* Ross Barnowski +\r\n* Christoph Baumgarten\r\n* Stephen Becker +\r\n* Nickolai Belakovski\r\n* Peter Bell\r\n* berberto +\r\n* Georgii Bocharov +\r\n* Evgeni Burovski\r\n* Matthias Bussonnier\r\n* CJ Carey\r\n* Justin Charlong +\r\n* Hood Chatham +\r\n* Dennis Collaris +\r\n* David Cottrell +\r\n* cruyffturn +\r\n* da-woods +\r\n* Anirudh Dagar\r\n* Tiger Du +\r\n* Thomas Duvernay\r\n* Dani El-Ayyass +\r\n* Castedo Ellerman +\r\n* Donnie Erb +\r\n* Andreas Esders-Kopecky +\r\n* Livio F +\r\n* Isuru Fernando\r\n* Evelyn Fitzgerald +\r\n* Sara Fridovich-Keil +\r\n* Mark E Fuller +\r\n* Ralf Gommers\r\n* Kevin Richard Green +\r\n* guiweber +\r\n* Nitish Gupta +\r\n* h-vetinari\r\n* Matt Haberland\r\n* J. Hariharan +\r\n* Charles Harris\r\n* Jonathan Helgert +\r\n* Trever Hines\r\n* Nadav Horesh\r\n* Ian Hunt-Isaak +\r\n* ich +\r\n* Itrimel +\r\n* Jan-Hendrik M\u00fcller +\r\n* Jebby993 +\r\n* Yikun Jiang +\r\n* Evan W Jones +\r\n* Nathaniel Jones +\r\n* Jeffrey Kelling +\r\n* Malik Idrees Hasan Khan +\r\n* Paul Kienzle \r\n* Sergey B Kirpichev\r\n* Kadatatlu Kishore +\r\n* Andrew Knyazev\r\n* Ravin Kumar +\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory R. Lee\r\n* Tim Leslie\r\n* lezcano +\r\n* Xingyu Liu\r\n* Christian Lorentzen\r\n* Lorenzo +\r\n* Smit Lunagariya +\r\n* Lv101Magikarp +\r\n* Yair M +\r\n* Cong Ma\r\n* Lorenzo Maffioli +\r\n* majiang +\r\n* Brian McFee +\r\n* Nicholas McKibben\r\n* John Speed Meyers +\r\n* millivolt9 +\r\n* Jarrod Millman\r\n* Harsh Mishra +\r\n* Boaz Mohar +\r\n* naelsondouglas +\r\n* Andrew Nelson\r\n* Nico Schl\u00f6mer\r\n* Thomas Nowotny +\r\n* nullptr +\r\n* Teddy Ort +\r\n* Nick Papior\r\n* ParticularMiner +\r\n* Dima Pasechnik\r\n* Tirth Patel\r\n* Matti Picus\r\n* Ilhan Polat\r\n* Adrian Price-Whelan +\r\n* Quentin Barth\u00e9lemy +\r\n* Sundar R +\r\n* Judah Rand +\r\n* Tyler Reddy\r\n* Renal-Of-Loon +\r\n* Frederic Renner +\r\n* Pamphile Roy\r\n* Bharath Saiguhan +\r\n* Atsushi Sakai\r\n* Eric Schanet +\r\n* Sebastian Wallk\u00f6tter\r\n* serge-sans-paille\r\n* Reshama Shaikh +\r\n* Namami Shanker\r\n* siddhantwahal +\r\n* Walter Simson +\r\n* Gagandeep Singh +\r\n* Leo C. Stein +\r\n* Albert Steppi\r\n* Kai Striega\r\n* Diana Sukhoverkhova\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* Masayuki Takagi +\r\n* Mike Taves\r\n* Ben Thompson +\r\n* Bas van Beek\r\n* Jacob Vanderplas\r\n* Dhruv Vats +\r\n* H. Vetinari +\r\n* Thomas Viehmann +\r\n* Pauli Virtanen\r\n* Vlad +\r\n* Arthur Volant\r\n* Samuel Wallan\r\n* Stefan van der Walt\r\n* Warren Weckesser\r\n* Josh Wilson\r\n* Haoyin Xu +\r\n* Rory Yorke\r\n* Egor Zemlyanoy\r\n* Gang Zhao +\r\n* \u8d75\u4e30 (Zhao Feng) +\r\n\r\nA total of 139 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.8.0", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.8.0", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.8.0", "url": "https://api.github.com/repos/scipy/scipy/releases/58786457", "dateCreated": "2022-02-04T14:44:04Z", "datePublished": "2022-02-05T23:29:16Z"}, {"tagName": "v1.8.0rc4", "name": "SciPy 1.8.0rc4", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.8.0 Release Notes\r\n===================\r\n\r\nNote: SciPy `1.8.0` is not released yet!\r\n\r\nSciPy `1.8.0` is the culmination of `6` months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.8.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.8+` and NumPy `1.17.3` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0+` is required.\r\n\r\n\r\nHighlights of this release\r\n==================\r\n\r\n- A sparse array API has been added for early testing and feedback; this\r\n  work is ongoing, and users should expect minor API refinements over\r\n  the next few releases.\r\n- The sparse SVD library PROPACK is now vendored with SciPy, and an interface\r\n  is exposed via `scipy.sparse.svds` with ``solver='PROPACK'``. It is currently\r\n  default-off due to potential issues on Windows that we aim to\r\n  resolve in the next release, but can be optionally enabled at runtime for\r\n  friendly testing with an environment variable setting of ``USE_PROPACK=1``.\r\n- A new `scipy.stats.sampling` submodule that leverages the ``UNU.RAN`` C\r\n  library to sample from arbitrary univariate non-uniform continuous and\r\n  discrete distributions\r\n- All namespaces that were private but happened to miss underscores in\r\n  their names have been deprecated.\r\n\r\n\r\n\r\nNew features\r\n==========\r\n\r\n`scipy.fft` improvements\r\n===================\r\n\r\nAdded an ``orthogonalize=None`` parameter to the real transforms in `scipy.fft`\r\nwhich controls whether the modified definition of DCT/DST is used without\r\nchanging the overall scaling.\r\n\r\n`scipy.fft` backend registration is now smoother, operating with a single\r\nregistration call and no longer requiring a context manager.\r\n\r\n`scipy.integrate` improvements\r\n========================\r\n\r\n`scipy.integrate.quad_vec` introduces a new optional keyword-only argument,\r\n``args``. ``args`` takes in a tuple of extra arguments if any (default is\r\n``args=()``), which is then internally used to pass into the callable function\r\n(needing these extra arguments) which we wish to integrate.\r\n\r\n`scipy.interpolate` improvements\r\n=========================\r\n\r\n`scipy.interpolate.BSpline` has a new method, ``design_matrix``, which\r\nconstructs a design matrix of b-splines in the sparse CSR format.\r\n\r\nA new method ``from_cubic`` in ``BSpline`` class allows to convert a\r\n``CubicSpline`` object to ``BSpline`` object.\r\n\r\n`scipy.linalg` improvements\r\n=====================\r\n\r\n`scipy.linalg` gained three new public array structure investigation functions.\r\n`scipy.linalg.bandwidth` returns information about the bandedness of an array\r\nand can be used to test for triangular structure discovery, while\r\n`scipy.linalg.issymmetric` and `scipy.linalg.ishermitian` test the array for\r\nexact and approximate symmetric/Hermitian structure.\r\n\r\n`scipy.optimize` improvements\r\n=======================\r\n\r\n`scipy.optimize.check_grad` introduces two new optional keyword only arguments,\r\n``direction`` and ``seed``. ``direction`` can take values, ``'all'`` (default),\r\nin which case all the one hot direction vectors will be used for verifying\r\nthe input analytical gradient function and ``'random'``, in which case a\r\nrandom direction vector will be used for the same purpose. ``seed``\r\n(default is ``None``) can be used for reproducing the return value of\r\n``check_grad`` function. It will be used only when ``direction='random'``.\r\n\r\nThe `scipy.optimize.minimize` ``TNC`` method has been rewritten to use Cython\r\nbindings. This also fixes an issue with the callback altering the state of the\r\noptimization.\r\n\r\nAdded optional parameters ``target_accept_rate`` and ``stepwise_factor`` for\r\nadapative step size adjustment in ``basinhopping``.\r\n\r\nThe ``epsilon`` argument to ``approx_fprime`` is now optional so that it may\r\nhave a default value consistent with most other functions in `scipy.optimize`.\r\n\r\n`scipy.signal` improvements\r\n=====================\r\n\r\nAdd ``analog`` argument, default ``False``, to ``zpk2sos``, and add new pairing\r\noption ``'minimal'`` to construct analog and minimal discrete SOS arrays.\r\n``tf2sos`` uses zpk2sos; add ``analog`` argument here as well, and pass it on\r\nto ``zpk2sos``.\r\n\r\n``savgol_coeffs`` and ``savgol_filter`` now work for even window lengths.\r\n\r\nAdded the Chirp Z-transform and Zoom FFT available as `scipy.signal.CZT` and\r\n`scipy.signal.ZoomFFT`.\r\n\r\n`scipy.sparse` improvements\r\n======================\r\n\r\nAn array API has been added for early testing and feedback; this\r\nwork is ongoing, and users should expect minor API refinements over\r\nthe next few releases. Please refer to the `scipy.sparse`\r\ndocstring for more information.\r\n\r\n``maximum_flow`` introduces optional keyword only argument, ``method``\r\nwhich accepts either, ``'edmonds-karp'`` (Edmonds Karp algorithm) or\r\n``'dinic'`` (Dinic's algorithm). Moreover, ``'dinic'`` is used as default\r\nvalue for ``method`` which means that Dinic's algorithm is used for computing\r\nmaximum flow unless specified. See, the comparison between the supported\r\nalgorithms in\r\n`this comment <https://github.com/scipy/scipy/pull/14358#issue-684212523>`_.\r\n\r\nParameters ``atol``, ``btol`` now default to 1e-6 in\r\n`scipy.sparse.linalg.lsmr` to match with default values in\r\n`scipy.sparse.linalg.lsqr`.\r\n\r\nAdd the Transpose-Free Quasi-Minimal Residual algorithm (TFQMR) for general\r\nnonsingular non-Hermitian linear systems in `scipy.sparse.linalg.tfqmr`.\r\n\r\nThe sparse SVD library PROPACK is now vendored with SciPy, and an interface is\r\nexposed via `scipy.sparse.svds` with ``solver='PROPACK'``. For some problems,\r\nthis may be faster and/or more accurate than the default, ARPACK. PROPACK\r\nfunctionality is currently opt-in--you must specify ``USE_PROPACK=1`` at\r\nruntime to use it due to potential issues on Windows\r\nthat we aim to resolve in the next release.\r\n\r\n``sparse.linalg`` iterative solvers now have a nonzero initial guess option,\r\nwhich may be specified as ``x0 = 'Mb'``.\r\n\r\nThe ``trace`` method has been added for sparse matrices.\r\n\r\n`scipy.spatial` improvements\r\n======================\r\n\r\n`scipy.spatial.transform.Rotation` now supports item assignment and has a new\r\n``concatenate`` method.\r\n\r\nAdd `scipy.spatial.distance.kulczynski1` in favour of\r\n`scipy.spatial.distance.kulsinski` which will be deprecated in the next\r\nrelease.\r\n\r\n`scipy.spatial.distance.minkowski` now also supports ``0<p<1``.\r\n\r\n`scipy.special` improvements\r\n======================\r\n\r\nThe new function `scipy.special.log_expit` computes the logarithm of the\r\nlogistic sigmoid function. The function is formulated to provide accurate\r\nresults for large positive and negative inputs, so it avoids the problems\r\nthat would occur in the naive implementation ``log(expit(x))``.\r\n\r\nA suite of five new functions for elliptic integrals:\r\n``scipy.special.ellipr{c,d,f,g,j}``. These are the\r\n`Carlson symmetric elliptic integrals <https://dlmf.nist.gov/19.16>`_, which\r\nhave computational advantages over the classical Legendre integrals. Previous\r\nversions included some elliptic integrals from the Cephes library\r\n(``scipy.special.ellip{k,km1,kinc,e,einc}``) but was missing the integral of\r\nthird kind (Legendre's Pi), which can be evaluated using the new Carlson\r\nfunctions. The new Carlson elliptic integral functions can be evaluated in the\r\ncomplex plane, whereas the Cephes library's functions are only defined for\r\nreal inputs.\r\n\r\nSeveral defects in `scipy.special.hyp2f1` have been corrected. Approximately\r\ncorrect values are now returned for ``z`` near ``exp(+-i*pi/3)``, fixing\r\n`#8054 <https://github.com/scipy/scipy/issues/8054>`_. Evaluation for such ``z``\r\nis now calculated through a series derived by\r\n`L\u00f3pez and Temme (2013) <https://arxiv.org/abs/1306.2046>`_ that converges in\r\nthese regions. In addition, degenerate cases with one or more of ``a``, ``b``,\r\nand/or ``c`` a non-positive integer are now handled in a manner consistent with\r\n`mpmath's hyp2f1 implementation <https://mpmath.org/doc/current/functions/hypergeometric.html>`_,\r\nwhich fixes `#7340 <https://github.com/scipy/scipy/issues/7340>`_. These fixes\r\nwere made as part of an effort to rewrite the Fortran 77 implementation of\r\nhyp2f1 in Cython piece by piece. This rewriting is now roughly 50% complete.\r\n\r\n`scipy.stats` improvements\r\n=====================\r\n\r\n`scipy.stats.qmc.LatinHypercube` introduces two new optional keyword-only\r\narguments, ``optimization`` and ``strength``. ``optimization`` is either\r\n``None`` or ``random-cd``. In the latter, random permutations are performed to\r\nimprove the centered discrepancy. ``strength`` is either 1 or 2. 1 corresponds\r\nto the classical LHS while 2 has better sub-projection properties. This\r\nconstruction is referred to as an orthogonal array based LHS of strength 2.\r\nIn both cases, the output is still a LHS.\r\n\r\n`scipy.stats.qmc.Halton` is faster as the underlying Van der Corput sequence\r\nwas ported to Cython.\r\n\r\nThe ``alternative`` parameter was added to the ``kendalltau`` and ``somersd``\r\nfunctions to allow one-sided hypothesis testing. Similarly, the masked\r\nversions of ``skewtest``, ``kurtosistest``, ``ttest_1samp``, ``ttest_ind``,\r\nand ``ttest_rel`` now also have an ``alternative`` parameter.\r\n\r\nAdd `scipy.stats.gzscore` to calculate the geometrical z score.\r\n\r\nRandom variate generators to sample from arbitrary univariate non-uniform\r\ncontinuous and discrete distributions have been added to the new\r\n`scipy.stats.sampling` submodule. Implementations of a C library\r\n`UNU.RAN <http://statmath.wu.ac.at/software/unuran/>`_ are used for\r\nperformance. The generators added are:\r\n\r\n- TransformedDensityRejection\r\n- DiscreteAliasUrn\r\n- NumericalInversePolynomial\r\n- DiscreteGuideTable\r\n- SimpleRatioUniforms\r\n\r\nThe ``binned_statistic`` set of functions now have improved performance for\r\nthe ``std``, ``min``, ``max``, and ``median`` statistic calculations.\r\n\r\n``somersd`` and ``_tau_b`` now have faster Pythran-based implementations.\r\n\r\nSome general efficiency improvements to handling of ``nan`` values in\r\nseveral ``stats`` functions.\r\n\r\nAdded the Tukey-Kramer test as `scipy.stats.tukey_hsd`.\r\n\r\nImproved performance of `scipy.stats.argus` ``rvs`` method.\r\n\r\nAdded the parameter ``keepdims`` to `scipy.stats.variation` and prevent the\r\nundesirable return of a masked array from the function in some cases.\r\n\r\n``permutation_test`` performs an exact or randomized permutation test of a\r\ngiven statistic on provided data.\r\n\r\n\r\nDeprecated features\r\n================\r\n\r\nClear split between public and private API\r\n===============================\r\n\r\nSciPy has always documented what its public API consisted of in\r\n:ref:`its API reference docs <scipy-api>`,\r\nhowever there never was a clear split between public and\r\nprivate namespaces in the code base. In this release, all namespaces that were\r\nprivate but happened to miss underscores in their names have been deprecated.\r\nThese include (as examples, there are many more):\r\n\r\n- ``scipy.signal.spline``\r\n- ``scipy.ndimage.filters``\r\n- ``scipy.ndimage.fourier``\r\n- ``scipy.ndimage.measurements``\r\n- ``scipy.ndimage.morphology``\r\n- ``scipy.ndimage.interpolation``\r\n- ``scipy.sparse.linalg.solve``\r\n- ``scipy.sparse.linalg.eigen``\r\n- ``scipy.sparse.linalg.isolve``\r\n\r\nAll functions and other objects in these namespaces that were meant to be\r\npublic are accessible from their respective public namespace (e.g.\r\n`scipy.signal`). The design principle is that any public object must be\r\naccessible from a single namespace only; there are a few exceptions, mostly for\r\nhistorical reasons (e.g., ``stats`` and ``stats.distributions`` overlap).\r\nFor other libraries aiming to provide a SciPy-compatible API, it is now\r\nunambiguous what namespace structure to follow.  See\r\n`gh-14360 <https://github.com/scipy/scipy/issues/14360>`_ for more details.\r\n\r\nOther deprecations\r\n===============\r\n\r\n``NumericalInverseHermite`` has been deprecated from `scipy.stats` and moved\r\nto the `scipy.stats.sampling` submodule. It now uses the C implementation of\r\nthe UNU.RAN library so the result of methods like ``ppf`` may vary slightly.\r\nParameter ``tol`` has been deprecated and renamed to ``u_resolution``. The\r\nparameter ``max_intervals`` has also been deprecated and will be removed in a\r\nfuture release of SciPy.\r\n\r\n\r\n\r\nBackwards incompatible changes\r\n=========================\r\n\r\n- SciPy has raised the minimum compiler versions to GCC 6.3 on linux and\r\n  VS2019 on windows. In particular, this means that SciPy may now use C99 and\r\n  C++14 features. For more details see\r\n  `here <https://docs.scipy.org/doc/scipy/reference/dev/toolchain.html>`_.\r\n- The result for empty bins for `scipy.stats.binned_statistic` with the builtin\r\n  ``'std'`` metric is now ``nan``, for consistency with ``np.std``.\r\n- The function `scipy.spatial.distance.wminkowski` has been removed. To achieve\r\n  the same results as before, please use the ``minkowski`` distance function\r\n  with the (optional) ``w=`` keyword-argument for the given weight.\r\n\r\n\r\nOther changes\r\n===========\r\n\r\nSome Fortran 77 code was modernized to be compatible with NAG's nagfor Fortran\r\ncompiler (see, e.g., `PR 13229 <https://github.com/scipy/scipy/pull/13229>`_).\r\n\r\n``threadpoolctl`` may now be used by our test suite to substantially improve\r\nthe efficiency of parallel test suite runs.\r\n\r\n\r\nAuthors\r\n======\r\n\r\n* @endolith\r\n* adamadanandy +\r\n* akeemlh +\r\n* Anton Akhmerov\r\n* Marvin Albert +\r\n* alegresor +\r\n* Andrew Annex +\r\n* Pantelis Antonoudiou +\r\n* Ross Barnowski +\r\n* Christoph Baumgarten\r\n* Stephen Becker +\r\n* Nickolai Belakovski\r\n* Peter Bell\r\n* berberto +\r\n* Georgii Bocharov +\r\n* Evgeni Burovski\r\n* Matthias Bussonnier\r\n* CJ Carey\r\n* Justin Charlong +\r\n* Hood Chatham +\r\n* Dennis Collaris +\r\n* David Cottrell +\r\n* cruyffturn +\r\n* da-woods +\r\n* Anirudh Dagar\r\n* Tiger Du +\r\n* Thomas Duvernay\r\n* Dani El-Ayyass +\r\n* Castedo Ellerman +\r\n* Donnie Erb +\r\n* Andreas Esders-Kopecky +\r\n* Livio F +\r\n* Isuru Fernando\r\n* Evelyn Fitzgerald +\r\n* Sara Fridovich-Keil +\r\n* Mark E Fuller +\r\n* Ralf Gommers\r\n* Kevin Richard Green +\r\n* guiweber +\r\n* Nitish Gupta +\r\n* h-vetinari\r\n* Matt Haberland\r\n* J. Hariharan +\r\n* Charles Harris\r\n* Jonathan Helgert +\r\n* Trever Hines\r\n* Nadav Horesh\r\n* Ian Hunt-Isaak +\r\n* ich +\r\n* Itrimel +\r\n* Jan-Hendrik M\u00fcller +\r\n* Jebby993 +\r\n* Yikun Jiang +\r\n* Evan W Jones +\r\n* Nathaniel Jones +\r\n* Jeffrey Kelling +\r\n* Malik Idrees Hasan Khan +\r\n* Paul Kienzle \r\n* Sergey B Kirpichev\r\n* Kadatatlu Kishore +\r\n* Andrew Knyazev\r\n* Ravin Kumar +\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory R. Lee\r\n* Tim Leslie\r\n* lezcano +\r\n* Xingyu Liu\r\n* Christian Lorentzen\r\n* Lorenzo +\r\n* Smit Lunagariya +\r\n* Lv101Magikarp +\r\n* Yair M +\r\n* Cong Ma\r\n* Lorenzo Maffioli +\r\n* majiang +\r\n* Brian McFee +\r\n* Nicholas McKibben\r\n* John Speed Meyers +\r\n* millivolt9 +\r\n* Jarrod Millman\r\n* Harsh Mishra +\r\n* Boaz Mohar +\r\n* naelsondouglas +\r\n* Andrew Nelson\r\n* Nico Schl\u00f6mer\r\n* Thomas Nowotny +\r\n* nullptr +\r\n* Teddy Ort +\r\n* Nick Papior\r\n* ParticularMiner +\r\n* Dima Pasechnik\r\n* Tirth Patel\r\n* Matti Picus\r\n* Ilhan Polat\r\n* Adrian Price-Whelan +\r\n* Quentin Barth\u00e9lemy +\r\n* Sundar R +\r\n* Judah Rand +\r\n* Tyler Reddy\r\n* Renal-Of-Loon +\r\n* Frederic Renner +\r\n* Pamphile Roy\r\n* Bharath Saiguhan +\r\n* Atsushi Sakai\r\n* Eric Schanet +\r\n* Sebastian Wallk\u00f6tter\r\n* serge-sans-paille\r\n* Reshama Shaikh +\r\n* Namami Shanker\r\n* siddhantwahal +\r\n* Walter Simson +\r\n* Gagandeep Singh +\r\n* Leo C. Stein +\r\n* Albert Steppi\r\n* Kai Striega\r\n* Diana Sukhoverkhova\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* Masayuki Takagi +\r\n* Mike Taves\r\n* Ben Thompson +\r\n* Bas van Beek\r\n* Jacob Vanderplas\r\n* Dhruv Vats +\r\n* H. Vetinari +\r\n* Thomas Viehmann +\r\n* Pauli Virtanen\r\n* Vlad +\r\n* Arthur Volant\r\n* Samuel Wallan\r\n* Stefan van der Walt\r\n* Warren Weckesser\r\n* Josh Wilson\r\n* Haoyin Xu +\r\n* Rory Yorke\r\n* Egor Zemlyanoy\r\n* Gang Zhao +\r\n* \u8d75\u4e30 (Zhao Feng) +\r\n\r\nA total of 139 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.\r\n", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.8.0rc4", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.8.0rc4", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.8.0rc4", "url": "https://api.github.com/repos/scipy/scipy/releases/58287034", "dateCreated": "2022-01-29T23:04:57Z", "datePublished": "2022-01-30T19:24:11Z"}, {"tagName": "v1.8.0rc3", "name": "SciPy 1.8.0rc3", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.8.0 Release Notes\r\n====================\r\n\r\n**Note**: SciPy `1.8.0` is not released yet!\r\n\r\nSciPy `1.8.0` is the culmination of `6` months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.8.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.8`+ and NumPy `1.17.3` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0`+ is required.\r\n\r\n\r\nHighlights of this release\r\n===================\r\n\r\n- A sparse array API has been added for early testing and feedback; this\r\n  work is ongoing, and users should expect minor API refinements over\r\n  the next few releases.\r\n- The sparse SVD library PROPACK is now vendored with SciPy, and an interface\r\n  is exposed via `scipy.sparse.svds` with ``solver='PROPACK'``. It is currently\r\n  default-off due to potential issues on Windows that we aim to\r\n  resolve in the next release, but can be optionally enabled at runtime for\r\n  friendly testing with an environment variable setting of ``USE_PROPACK=1``.\r\n- A new `scipy.stats.sampling` submodule that leverages the ``UNU.RAN`` C\r\n  library to sample from arbitrary univariate non-uniform continuous and\r\n  discrete distributions\r\n- All namespaces that were private but happened to miss underscores in\r\n  their names have been deprecated.\r\n\r\n\r\n\r\nNew features\r\n==========\r\n\r\n`scipy.fft` improvements\r\n========================\r\n\r\nAdded an ``orthogonalize=None`` parameter to the real transforms in `scipy.fft`\r\nwhich controls whether the modified definition of DCT/DST is used without\r\nchanging the overall scaling.\r\n\r\n`scipy.fft` backend registration is now smoother, operating with a single\r\nregistration call and no longer requiring a context manager.\r\n\r\n`scipy.integrate` improvements\r\n==============================\r\n\r\n`scipy.integrate.quad_vec` introduces a new optional keyword-only argument,\r\n``args``. ``args`` takes in a tuple of extra arguments if any (default is\r\n``args=()``), which is then internally used to pass into the callable function\r\n(needing these extra arguments) which we wish to integrate.\r\n\r\n`scipy.interpolate` improvements\r\n================================\r\n\r\n`scipy.interpolate.BSpline` has a new method, ``design_matrix``, which\r\nconstructs a design matrix of b-splines in the sparse CSR format.\r\n\r\nA new method ``from_cubic`` in ``BSpline`` class allows to convert a\r\n``CubicSpline`` object to ``BSpline`` object.\r\n\r\n`scipy.linalg` improvements\r\n===========================\r\n\r\n`scipy.linalg` gained three new public array structure investigation functions.\r\n`scipy.linalg.bandwidth` returns information about the bandedness of an array\r\nand can be used to test for triangular structure discovery, while\r\n`scipy.linalg.issymmetric` and `scipy.linalg.ishermitian` test the array for\r\nexact and approximate symmetric/Hermitian structure.\r\n\r\n`scipy.optimize` improvements\r\n=============================\r\n\r\n`scipy.optimize.check_grad` introduces two new optional keyword only arguments,\r\n``direction`` and ``seed``. ``direction`` can take values, ``'all'`` (default),\r\nin which case all the one hot direction vectors will be used for verifying\r\nthe input analytical gradient function and ``'random'``, in which case a\r\nrandom direction vector will be used for the same purpose. ``seed``\r\n(default is ``None``) can be used for reproducing the return value of\r\n``check_grad`` function. It will be used only when ``direction='random'``.\r\n\r\nThe `scipy.optimize.minimize` ``TNC`` method has been rewritten to use Cython\r\nbindings. This also fixes an issue with the callback altering the state of the\r\noptimization.\r\n\r\nAdded optional parameters ``target_accept_rate`` and ``stepwise_factor`` for\r\nadapative step size adjustment in ``basinhopping``.\r\n\r\nThe ``epsilon`` argument to ``approx_fprime`` is now optional so that it may\r\nhave a default value consistent with most other functions in `scipy.optimize`.\r\n\r\n`scipy.signal` improvements\r\n===========================\r\n\r\nAdd ``analog`` argument, default ``False``, to ``zpk2sos``, and add new pairing\r\noption ``'minimal'`` to construct analog and minimal discrete SOS arrays.\r\n``tf2sos`` uses zpk2sos; add ``analog`` argument here as well, and pass it on\r\nto ``zpk2sos``.\r\n\r\n``savgol_coeffs`` and ``savgol_filter`` now work for even window lengths.\r\n\r\nAdded the Chirp Z-transform and Zoom FFT available as `scipy.signal.CZT` and\r\n`scipy.signal.ZoomFFT`.\r\n\r\n`scipy.sparse` improvements\r\n===========================\r\n\r\nAn array API has been added for early testing and feedback; this\r\nwork is ongoing, and users should expect minor API refinements over\r\nthe next few releases. Please refer to the `scipy.sparse`\r\ndocstring for more information.\r\n\r\n``maximum_flow`` introduces optional keyword only argument, ``method``\r\nwhich accepts either, ``'edmonds-karp'`` (Edmonds Karp algorithm) or\r\n``'dinic'`` (Dinic's algorithm). Moreover, ``'dinic'`` is used as default\r\nvalue for ``method`` which means that Dinic's algorithm is used for computing\r\nmaximum flow unless specified. See, the comparison between the supported\r\nalgorithms in [this comment](https://github.com/scipy/scipy/pull/14358#issue-684212523).\r\n\r\nParameters ``atol``, ``btol`` now default to 1e-6 in\r\n`scipy.sparse.linalg.lsmr` to match with default values in\r\n`scipy.sparse.linalg.lsqr`.\r\n\r\nAdd the Transpose-Free Quasi-Minimal Residual algorithm (TFQMR) for general\r\nnonsingular non-Hermitian linear systems in `scipy.sparse.linalg.tfqmr`.\r\n\r\nThe sparse SVD library PROPACK is now vendored with SciPy, and an interface is\r\nexposed via `scipy.sparse.svds` with ``solver='PROPACK'``. For some problems,\r\nthis may be faster and/or more accurate than the default, ARPACK. PROPACK\r\nfunctionality is currently opt-in--you must specify ``USE_PROPACK=1`` at\r\nruntime to use it due to potential issues on Windows\r\nthat we aim to resolve in the next release.\r\n\r\n``sparse.linalg`` iterative solvers now have a nonzero initial guess option,\r\nwhich may be specified as ``x0 = 'Mb'``.\r\n\r\nThe ``trace`` method has been added for sparse matrices.\r\n\r\n`scipy.spatial` improvements\r\n============================\r\n\r\n`scipy.spatial.transform.Rotation` now supports item assignment and has a new\r\n``concatenate`` method.\r\n\r\nAdd `scipy.spatial.distance.kulczynski1` in favour of\r\n`scipy.spatial.distance.kulsinski` which will be deprecated in the next\r\nrelease.\r\n\r\n`scipy.spatial.distance.minkowski` now also supports ``0<p<1``.\r\n\r\n`scipy.special` improvements\r\n============================\r\n\r\nThe new function `scipy.special.log_expit` computes the logarithm of the\r\nlogistic sigmoid function. The function is formulated to provide accurate\r\nresults for large positive and negative inputs, so it avoids the problems\r\nthat would occur in the naive implementation ``log(expit(x))``.\r\n\r\nA suite of five new functions for elliptic integrals:\r\n``scipy.special.ellipr{c,d,f,g,j}``. These are the\r\n`Carlson symmetric elliptic integrals <https://dlmf.nist.gov/19.16>`_, which\r\nhave computational advantages over the classical Legendre integrals. Previous\r\nversions included some elliptic integrals from the Cephes library\r\n(``scipy.special.ellip{k,km1,kinc,e,einc}``) but was missing the integral of\r\nthird kind (Legendre's Pi), which can be evaluated using the new Carlson\r\nfunctions. The new Carlson elliptic integral functions can be evaluated in the\r\ncomplex plane, whereas the Cephes library's functions are only defined for\r\nreal inputs.\r\n\r\nSeveral defects in `scipy.special.hyp2f1` have been corrected. Approximately\r\ncorrect values are now returned for ``z`` near ``exp(+-i*pi/3)``, fixing\r\n`#8054 <https://github.com/scipy/scipy/issues/8054>`_. Evaluation for such ``z``\r\nis now calculated through a series derived by\r\n`L\u00f3pez and Temme (2013) <https://arxiv.org/abs/1306.2046>`_ that converges in\r\nthese regions. In addition, degenerate cases with one or more of ``a``, ``b``,\r\nand/or ``c`` a non-positive integer are now handled in a manner consistent with\r\n`mpmath's hyp2f1 implementation <https://mpmath.org/doc/current/functions/hypergeometric.html>`_,\r\nwhich fixes `#7340 <https://github.com/scipy/scipy/issues/7340>`_. These fixes\r\nwere made as part of an effort to rewrite the Fortran 77 implementation of\r\nhyp2f1 in Cython piece by piece. This rewriting is now roughly 50% complete.\r\n\r\n`scipy.stats` improvements\r\n==========================\r\n\r\n`scipy.stats.qmc.LatinHypercube` introduces two new optional keyword-only\r\narguments, ``optimization`` and ``strength``. ``optimization`` is either\r\n``None`` or ``random-cd``. In the latter, random permutations are performed to\r\nimprove the centered discrepancy. ``strength`` is either 1 or 2. 1 corresponds\r\nto the classical LHS while 2 has better sub-projection properties. This\r\nconstruction is referred to as an orthogonal array based LHS of strength 2.\r\nIn both cases, the output is still a LHS.\r\n\r\n`scipy.stats.qmc.Halton` is faster as the underlying Van der Corput sequence\r\nwas ported to Cython.\r\n\r\nThe ``alternative`` parameter was added to the ``kendalltau`` and ``somersd``\r\nfunctions to allow one-sided hypothesis testing. Similarly, the masked\r\nversions of ``skewtest``, ``kurtosistest``, ``ttest_1samp``, ``ttest_ind``,\r\nand ``ttest_rel`` now also have an ``alternative`` parameter.\r\n\r\nAdd `scipy.stats.gzscore` to calculate the geometrical z score.\r\n\r\nRandom variate generators to sample from arbitrary univariate non-uniform\r\ncontinuous and discrete distributions have been added to the new\r\n`scipy.stats.sampling` submodule. Implementations of a C library\r\n`UNU.RAN <http://statmath.wu.ac.at/software/unuran/>`_ are used for\r\nperformance. The generators added are:\r\n\r\n- TransformedDensityRejection\r\n- DiscreteAliasUrn\r\n- NumericalInversePolynomial\r\n- DiscreteGuideTable\r\n- SimpleRatioUniforms\r\n\r\nThe ``binned_statistic`` set of functions now have improved performance for\r\nthe ``std``, ``min``, ``max``, and ``median`` statistic calculations.\r\n\r\n``somersd`` and ``_tau_b`` now have faster Pythran-based implementations.\r\n\r\nSome general efficiency improvements to handling of ``nan`` values in\r\nseveral ``stats`` functions.\r\n\r\nAdded the Tukey-Kramer test as `scipy.stats.tukey_hsd`.\r\n\r\nImproved performance of `scipy.stats.argus` ``rvs`` method.\r\n\r\nAdded the parameter ``keepdims`` to `scipy.stats.variation` and prevent the\r\nundesirable return of a masked array from the function in some cases.\r\n\r\n``permutation_test`` performs an exact or randomized permutation test of a\r\ngiven statistic on provided data.\r\n\r\n\r\nDeprecated features\r\n================\r\n\r\nClear split between public and private API\r\n=================================\r\n\r\nSciPy has always documented what its public API consisted of in\r\n:ref:`its API reference docs <scipy-api>`,\r\nhowever there never was a clear split between public and\r\nprivate namespaces in the code base. In this release, all namespaces that were\r\nprivate but happened to miss underscores in their names have been deprecated.\r\nThese include (as examples, there are many more):\r\n\r\n- ``scipy.signal.spline``\r\n- ``scipy.ndimage.filters``\r\n- ``scipy.ndimage.fourier``\r\n- ``scipy.ndimage.measurements``\r\n- ``scipy.ndimage.morphology``\r\n- ``scipy.ndimage.interpolation``\r\n- ``scipy.sparse.linalg.solve``\r\n- ``scipy.sparse.linalg.eigen``\r\n- ``scipy.sparse.linalg.isolve``\r\n\r\nAll functions and other objects in these namespaces that were meant to be\r\npublic are accessible from their respective public namespace (e.g.\r\n`scipy.signal`). The design principle is that any public object must be\r\naccessible from a single namespace only; there are a few exceptions, mostly for\r\nhistorical reasons (e.g., ``stats`` and ``stats.distributions`` overlap).\r\nFor other libraries aiming to provide a SciPy-compatible API, it is now\r\nunambiguous what namespace structure to follow.  See\r\n`gh-14360 <https://github.com/scipy/scipy/issues/14360>`_ for more details.\r\n\r\nOther deprecations\r\n===============\r\n\r\n``NumericalInverseHermite`` has been deprecated from `scipy.stats` and moved\r\nto the `scipy.stats.sampling` submodule. It now uses the C implementation of\r\nthe UNU.RAN library so the result of methods like ``ppf`` may vary slightly.\r\nParameter ``tol`` has been deprecated and renamed to ``u_resolution``. The\r\nparameter ``max_intervals`` has also been deprecated and will be removed in a\r\nfuture release of SciPy.\r\n\r\n\r\n\r\nBackwards incompatible changes\r\n=========================\r\n\r\n- SciPy has raised the minimum compiler versions to GCC 6.3 on linux and\r\n  VS2019 on windows. In particular, this means that SciPy may now use C99 and\r\n  C++14 features. For more details see\r\n  `here <https://docs.scipy.org/doc/scipy/reference/dev/toolchain.html>`_.\r\n- The result for empty bins for `scipy.stats.binned_statistic` with the builtin\r\n  ``'std'`` metric is now ``nan``, for consistency with ``np.std``.\r\n- The function `scipy.spatial.distance.wminkowski` has been removed. To achieve\r\n  the same results as before, please use the ``minkowski`` distance function\r\n  with the (optional) ``w=`` keyword-argument for the given weight.\r\n\r\n\r\nOther changes\r\n===========\r\n\r\nSome Fortran 77 code was modernized to be compatible with NAG's nagfor Fortran\r\ncompiler (see, e.g., `PR 13229 <https://github.com/scipy/scipy/pull/13229>`_).\r\n\r\n``threadpoolctl`` may now be used by our test suite to substantially improve\r\nthe efficiency of parallel test suite runs.\r\n\r\n\r\nAuthors\r\n======\r\n\r\n* @endolith\r\n* adamadanandy +\r\n* akeemlh +\r\n* Anton Akhmerov\r\n* Marvin Albert +\r\n* alegresor +\r\n* Andrew Annex +\r\n* Pantelis Antonoudiou +\r\n* Ross Barnowski +\r\n* Christoph Baumgarten\r\n* Stephen Becker +\r\n* Nickolai Belakovski\r\n* Peter Bell\r\n* berberto +\r\n* Georgii Bocharov +\r\n* Evgeni Burovski\r\n* Matthias Bussonnier\r\n* CJ Carey\r\n* Justin Charlong +\r\n* Hood Chatham +\r\n* Dennis Collaris +\r\n* David Cottrell +\r\n* cruyffturn +\r\n* da-woods +\r\n* Anirudh Dagar\r\n* Tiger Du +\r\n* Thomas Duvernay\r\n* Dani El-Ayyass +\r\n* Castedo Ellerman +\r\n* Donnie Erb +\r\n* Andreas Esders-Kopecky +\r\n* Livio F +\r\n* Isuru Fernando\r\n* Evelyn Fitzgerald +\r\n* Sara Fridovich-Keil +\r\n* Mark E Fuller +\r\n* Ralf Gommers\r\n* Kevin Richard Green +\r\n* guiweber +\r\n* Nitish Gupta +\r\n* h-vetinari\r\n* Matt Haberland\r\n* J. Hariharan +\r\n* Charles Harris\r\n* Jonathan Helgert +\r\n* Trever Hines\r\n* Nadav Horesh\r\n* Ian Hunt-Isaak +\r\n* ich +\r\n* Itrimel +\r\n* Jan-Hendrik M\u00fcller +\r\n* Jebby993 +\r\n* Yikun Jiang +\r\n* Evan W Jones +\r\n* Nathaniel Jones +\r\n* Jeffrey Kelling +\r\n* Malik Idrees Hasan Khan +\r\n* Paul Kienzle \r\n* Sergey B Kirpichev\r\n* Kadatatlu Kishore +\r\n* Andrew Knyazev\r\n* Ravin Kumar +\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory R. Lee\r\n* Tim Leslie\r\n* lezcano +\r\n* Xingyu Liu\r\n* Christian Lorentzen\r\n* Lorenzo +\r\n* Smit Lunagariya +\r\n* Lv101Magikarp +\r\n* Yair M +\r\n* Cong Ma\r\n* Lorenzo Maffioli +\r\n* majiang +\r\n* Brian McFee +\r\n* Nicholas McKibben\r\n* John Speed Meyers +\r\n* millivolt9 +\r\n* Jarrod Millman\r\n* Harsh Mishra +\r\n* Boaz Mohar +\r\n* naelsondouglas +\r\n* Andrew Nelson\r\n* Nico Schl\u00f6mer\r\n* Thomas Nowotny +\r\n* nullptr +\r\n* Teddy Ort +\r\n* Nick Papior\r\n* ParticularMiner +\r\n* Dima Pasechnik\r\n* Tirth Patel\r\n* Matti Picus\r\n* Ilhan Polat\r\n* Adrian Price-Whelan +\r\n* Quentin Barth\u00e9lemy +\r\n* Sundar R +\r\n* Judah Rand +\r\n* Tyler Reddy\r\n* Renal-Of-Loon +\r\n* Frederic Renner +\r\n* Pamphile Roy\r\n* Bharath Saiguhan +\r\n* Atsushi Sakai\r\n* Eric Schanet +\r\n* Sebastian Wallk\u00f6tter\r\n* serge-sans-paille\r\n* Reshama Shaikh +\r\n* Namami Shanker\r\n* siddhantwahal +\r\n* Walter Simson +\r\n* Gagandeep Singh +\r\n* Leo C. Stein +\r\n* Albert Steppi\r\n* Kai Striega\r\n* Diana Sukhoverkhova\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* Masayuki Takagi +\r\n* Mike Taves\r\n* Ben Thompson +\r\n* Bas van Beek\r\n* Jacob Vanderplas\r\n* Dhruv Vats +\r\n* H. Vetinari +\r\n* Thomas Viehmann +\r\n* Pauli Virtanen\r\n* Vlad +\r\n* Arthur Volant\r\n* Samuel Wallan\r\n* Stefan van der Walt\r\n* Warren Weckesser\r\n* Josh Wilson\r\n* Haoyin Xu +\r\n* Rory Yorke\r\n* Egor Zemlyanoy\r\n* Gang Zhao +\r\n* \u8d75\u4e30 (Zhao Feng) +\r\n\r\nA total of 139 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.8.0rc3", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.8.0rc3", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.8.0rc3", "url": "https://api.github.com/repos/scipy/scipy/releases/57753715", "dateCreated": "2022-01-20T00:22:31Z", "datePublished": "2022-01-22T18:56:40Z"}, {"tagName": "v1.8.0rc2", "name": "SciPy 1.8.0rc2", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.8.0 Release Notes\r\n===================\r\n\r\n**Note**: SciPy `1.8.0` is not released yet!\r\n\r\nSciPy `1.8.0` is the culmination of `6` months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.8.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.8`+ and NumPy `1.17.3` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0`+ is required.\r\n\r\n\r\nHighlights of this release\r\n===================\r\n\r\n- A sparse array API has been added for early testing and feedback; this\r\n  work is ongoing, and users should expect minor API refinements over\r\n  the next few releases.\r\n- The sparse SVD library PROPACK is now vendored with SciPy, and an interface\r\n  is exposed via `scipy.sparse.svds` with ``solver='PROPACK'``.\r\n- A new `scipy.stats.sampling` submodule that leverages the ``UNU.RAN`` C\r\n  library to sample from arbitrary univariate non-uniform continuous and\r\n  discrete distributions\r\n- All namespaces that were private but happened to miss underscores in\r\n  their names have been deprecated.\r\n\r\n\r\n\r\nNew features\r\n==========\r\n\r\n`scipy.fft` improvements\r\n===================\r\n\r\nAdded an ``orthogonalize=None`` parameter to the real transforms in `scipy.fft`\r\nwhich controls whether the modified definition of DCT/DST is used without\r\nchanging the overall scaling.\r\n\r\n`scipy.fft` backend registration is now smoother, operating with a single\r\nregistration call and no longer requiring a context manager.\r\n\r\n`scipy.integrate` improvements\r\n========================\r\n\r\n`scipy.integrate.quad_vec` introduces a new optional keyword-only argument,\r\n``args``. ``args`` takes in a tuple of extra arguments if any (default is\r\n``args=()``), which is then internally used to pass into the callable function\r\n(needing these extra arguments) which we wish to integrate.\r\n\r\n`scipy.interpolate` improvements\r\n=========================\r\n\r\n`scipy.interpolate.BSpline` has a new method, ``design_matrix``, which\r\nconstructs a design matrix of b-splines in the sparse CSR format.\r\n\r\nA new method ``from_cubic`` in ``BSpline`` class allows to convert a\r\n``CubicSpline`` object to ``BSpline`` object.\r\n\r\n`scipy.linalg` improvements\r\n=====================\r\n\r\n`scipy.linalg` gained three new public array structure investigation functions.\r\n`scipy.linalg.bandwidth` returns information about the bandedness of an array\r\nand can be used to test for triangular structure discovery, while\r\n`scipy.linalg.issymmetric` and `scipy.linalg.ishermitian` test the array for\r\nexact and approximate symmetric/Hermitian structure.\r\n\r\n`scipy.optimize` improvements\r\n=============================\r\n\r\n`scipy.optimize.check_grad` introduces two new optional keyword only arguments,\r\n``direction`` and ``seed``. ``direction`` can take values, ``'all'`` (default),\r\nin which case all the one hot direction vectors will be used for verifying\r\nthe input analytical gradient function and ``'random'``, in which case a\r\nrandom direction vector will be used for the same purpose. ``seed``\r\n(default is ``None``) can be used for reproducing the return value of\r\n``check_grad`` function. It will be used only when ``direction='random'``.\r\n\r\nThe `scipy.optimize.minimize` ``TNC`` method has been rewritten to use Cython\r\nbindings. This also fixes an issue with the callback altering the state of the\r\noptimization.\r\n\r\nAdded optional parameters ``target_accept_rate`` and ``stepwise_factor`` for\r\nadapative step size adjustment in ``basinhopping``.\r\n\r\nThe ``epsilon`` argument to ``approx_fprime`` is now optional so that it may\r\nhave a default value consistent with most other functions in `scipy.optimize`.\r\n\r\n`scipy.signal` improvements\r\n===========================\r\n\r\nAdd ``analog`` argument, default ``False``, to ``zpk2sos``, and add new pairing\r\noption ``'minimal'`` to construct analog and minimal discrete SOS arrays.\r\n``tf2sos`` uses zpk2sos; add ``analog`` argument here as well, and pass it on\r\nto ``zpk2sos``.\r\n\r\n``savgol_coeffs`` and ``savgol_filter`` now work for even window lengths.\r\n\r\nAdded the Chirp Z-transform and Zoom FFT available as `scipy.signal.CZT` and\r\n`scipy.signal.ZoomFFT`.\r\n\r\n`scipy.sparse` improvements\r\n===========================\r\n\r\nAn array API has been added for early testing and feedback; this\r\nwork is ongoing, and users should expect minor API refinements over\r\nthe next few releases. Please refer to the `scipy.sparse`\r\ndocstring for more information.\r\n\r\n``maximum_flow`` introduces optional keyword only argument, ``method``\r\nwhich accepts either, ``'edmonds-karp'`` (Edmonds Karp algorithm) or\r\n``'dinic'`` (Dinic's algorithm). Moreover, ``'dinic'`` is used as default\r\nvalue for ``method`` which means that Dinic's algorithm is used for computing\r\nmaximum flow unless specified. See, the comparison between the supported\r\nalgorithms in\r\n`this comment <https://github.com/scipy/scipy/pull/14358#issue-684212523>`_.\r\n\r\nParameters ``atol``, ``btol`` now default to 1e-6 in\r\n`scipy.sparse.linalg.lsmr` to match with default values in\r\n`scipy.sparse.linalg.lsqr`.\r\n\r\nAdd the Transpose-Free Quasi-Minimal Residual algorithm (TFQMR) for general\r\nnonsingular non-Hermitian linear systems in `scipy.sparse.linalg.tfqmr`.\r\n\r\nThe sparse SVD library PROPACK is now vendored with SciPy, and an interface is\r\nexposed via `scipy.sparse.svds` with ``solver='PROPACK'``. For some problems,\r\nthis may be faster and/or more accurate than the default, ARPACK.\r\n\r\n``sparse.linalg`` iterative solvers now have a nonzero initial guess option,\r\nwhich may be specified as ``x0 = 'Mb'``.\r\n\r\nThe ``trace`` method has been added for sparse matrices.\r\n\r\n`scipy.spatial` improvements\r\n======================\r\n\r\n`scipy.spatial.transform.Rotation` now supports item assignment and has a new\r\n``concatenate`` method.\r\n\r\nAdd `scipy.spatial.distance.kulczynski1` in favour of\r\n`scipy.spatial.distance.kulsinski` which will be deprecated in the next\r\nrelease.\r\n\r\n`scipy.spatial.distance.minkowski` now also supports ``0<p<1``.\r\n\r\n`scipy.special` improvements\r\n======================\r\n\r\nThe new function `scipy.special.log_expit` computes the logarithm of the\r\nlogistic sigmoid function. The function is formulated to provide accurate\r\nresults for large positive and negative inputs, so it avoids the problems\r\nthat would occur in the naive implementation ``log(expit(x))``.\r\n\r\nA suite of five new functions for elliptic integrals:\r\n``scipy.special.ellipr{c,d,f,g,j}``. These are the\r\n`Carlson symmetric elliptic integrals <https://dlmf.nist.gov/19.16>`_, which\r\nhave computational advantages over the classical Legendre integrals. Previous\r\nversions included some elliptic integrals from the Cephes library\r\n(``scipy.special.ellip{k,km1,kinc,e,einc}``) but was missing the integral of\r\nthird kind (Legendre's Pi), which can be evaluated using the new Carlson\r\nfunctions. The new Carlson elliptic integral functions can be evaluated in the\r\ncomplex plane, whereas the Cephes library's functions are only defined for\r\nreal inputs.\r\n\r\nSeveral defects in `scipy.special.hyp2f1` have been corrected. Approximately\r\ncorrect values are now returned for ``z`` near ``exp(+-i*pi/3)``, fixing\r\n`#8054 <https://github.com/scipy/scipy/issues/8054>`_. Evaluation for such ``z``\r\nis now calculated through a series derived by\r\n`L\u00f3pez and Temme (2013) <https://arxiv.org/abs/1306.2046>`_ that converges in\r\nthese regions. In addition, degenerate cases with one or more of ``a``, ``b``,\r\nand/or ``c`` a non-positive integer are now handled in a manner consistent with\r\n`mpmath's hyp2f1 implementation <https://mpmath.org/doc/current/functions/hypergeometric.html>`_,\r\nwhich fixes `#7340 <https://github.com/scipy/scipy/issues/7340>`_. These fixes\r\nwere made as part of an effort to rewrite the Fortran 77 implementation of\r\nhyp2f1 in Cython piece by piece. This rewriting is now roughly 50% complete.\r\n\r\n`scipy.stats` improvements\r\n=====================\r\n\r\n`scipy.stats.qmc.LatinHypercube` introduces two new optional keyword-only\r\narguments, ``optimization`` and ``strength``. ``optimization`` is either\r\n``None`` or ``random-cd``. In the latter, random permutations are performed to\r\nimprove the centered discrepancy. ``strength`` is either 1 or 2. 1 corresponds\r\nto the classical LHS while 2 has better sub-projection properties. This\r\nconstruction is referred to as an orthogonal array based LHS of strength 2.\r\nIn both cases, the output is still a LHS.\r\n\r\n`scipy.stats.qmc.Halton` is faster as the underlying Van der Corput sequence\r\nwas ported to Cython.\r\n\r\nThe ``alternative`` parameter was added to the ``kendalltau`` and ``somersd``\r\nfunctions to allow one-sided hypothesis testing. Similarly, the masked\r\nversions of ``skewtest``, ``kurtosistest``, ``ttest_1samp``, ``ttest_ind``,\r\nand ``ttest_rel`` now also have an ``alternative`` parameter.\r\n\r\nAdd `scipy.stats.gzscore` to calculate the geometrical z score.\r\n\r\nRandom variate generators to sample from arbitrary univariate non-uniform\r\ncontinuous and discrete distributions have been added to the new\r\n`scipy.stats.sampling` submodule. Implementations of a C library\r\n`UNU.RAN <http://statmath.wu.ac.at/software/unuran/>`_ are used for\r\nperformance. The generators added are:\r\n\r\n- TransformedDensityRejection\r\n- DiscreteAliasUrn\r\n- NumericalInversePolynomial\r\n- DiscreteGuideTable\r\n- SimpleRatioUniforms\r\n\r\nThe ``binned_statistic`` set of functions now have improved performance for\r\nthe ``std``, ``min``, ``max``, and ``median`` statistic calculations.\r\n\r\n``somersd`` and ``_tau_b`` now have faster Pythran-based implementations.\r\n\r\nSome general efficiency improvements to handling of ``nan`` values in\r\nseveral ``stats`` functions.\r\n\r\nAdded the Tukey-Kramer test as `scipy.stats.tukey_hsd`.\r\n\r\nImproved performance of `scipy.stats.argus` ``rvs`` method.\r\n\r\nAdded the parameter ``keepdims`` to `scipy.stats.variation` and prevent the\r\nundesirable return of a masked array from the function in some cases.\r\n\r\n``permutation_test`` performs an exact or randomized permutation test of a\r\ngiven statistic on provided data.\r\n\r\n\r\nDeprecated features\r\n================\r\n\r\nClear split between public and private API\r\n===============================\r\n\r\nSciPy has always documented what its public API consisted of in\r\n:ref:`its API reference docs <scipy-api>`,\r\nhowever there never was a clear split between public and\r\nprivate namespaces in the code base. In this release, all namespaces that were\r\nprivate but happened to miss underscores in their names have been deprecated.\r\nThese include (as examples, there are many more):\r\n\r\n- ``scipy.signal.spline``\r\n- ``scipy.ndimage.filters``\r\n- ``scipy.ndimage.fourier``\r\n- ``scipy.ndimage.measurements``\r\n- ``scipy.ndimage.morphology``\r\n- ``scipy.ndimage.interpolation``\r\n- ``scipy.sparse.linalg.solve``\r\n- ``scipy.sparse.linalg.eigen``\r\n- ``scipy.sparse.linalg.isolve``\r\n\r\nAll functions and other objects in these namespaces that were meant to be\r\npublic are accessible from their respective public namespace (e.g.\r\n`scipy.signal`). The design principle is that any public object must be\r\naccessible from a single namespace only; there are a few exceptions, mostly for\r\nhistorical reasons (e.g., ``stats`` and ``stats.distributions`` overlap).\r\nFor other libraries aiming to provide a SciPy-compatible API, it is now\r\nunambiguous what namespace structure to follow.  See\r\n`gh-14360 <https://github.com/scipy/scipy/issues/14360>`_ for more details.\r\n\r\nOther deprecations\r\n===============\r\n\r\n``NumericalInverseHermite`` has been deprecated from `scipy.stats` and moved\r\nto the `scipy.stats.sampling` submodule. It now uses the C implementation of\r\nthe UNU.RAN library so the result of methods like ``ppf`` may vary slightly.\r\nParameter ``tol`` has been deprecated and renamed to ``u_resolution``. The\r\nparameter ``max_intervals`` has also been deprecated and will be removed in a\r\nfuture release of SciPy.\r\n\r\n\r\n\r\nBackwards incompatible changes\r\n=========================\r\n\r\n- SciPy has raised the minimum compiler versions to GCC 6.3 on linux and\r\n  VS2019 on windows. In particular, this means that SciPy may now use C99 and\r\n  C++14 features. For more details see\r\n  `here <https://docs.scipy.org/doc/scipy/reference/dev/toolchain.html>`_.\r\n- The result for empty bins for `scipy.stats.binned_statistic` with the builtin\r\n  ``'std'`` metric is now ``nan``, for consistency with ``np.std``.\r\n- The function `scipy.spatial.distance.wminkowski` has been removed. To achieve\r\n  the same results as before, please use the ``minkowski`` distance function\r\n  with the (optional) ``w=`` keyword-argument for the given weight.\r\n\r\n\r\nOther changes\r\n===========\r\n\r\nSome Fortran 77 code was modernized to be compatible with NAG's nagfor Fortran\r\ncompiler (see, e.g., `PR 13229 <https://github.com/scipy/scipy/pull/13229>`_).\r\n\r\n``threadpoolctl`` may now be used by our test suite to substantially improve\r\nthe efficiency of parallel test suite runs.\r\n\r\n\r\nAuthors\r\n======\r\n\r\n* @endolith\r\n* adamadanandy +\r\n* akeemlh +\r\n* Anton Akhmerov\r\n* Marvin Albert +\r\n* alegresor +\r\n* Andrew Annex +\r\n* Pantelis Antonoudiou +\r\n* Ross Barnowski +\r\n* Christoph Baumgarten\r\n* Stephen Becker +\r\n* Nickolai Belakovski\r\n* Peter Bell\r\n* berberto +\r\n* Georgii Bocharov +\r\n* Evgeni Burovski\r\n* Matthias Bussonnier\r\n* CJ Carey\r\n* Justin Charlong +\r\n* Dennis Collaris +\r\n* David Cottrell +\r\n* cruyffturn +\r\n* da-woods +\r\n* Anirudh Dagar\r\n* Tiger Du +\r\n* Thomas Duvernay\r\n* Dani El-Ayyass +\r\n* Castedo Ellerman +\r\n* Donnie Erb +\r\n* Andreas Esders-Kopecky +\r\n* Livio F +\r\n* Isuru Fernando\r\n* Evelyn Fitzgerald +\r\n* Sara Fridovich-Keil +\r\n* Mark E Fuller +\r\n* Ralf Gommers\r\n* Kevin Richard Green +\r\n* guiweber +\r\n* Nitish Gupta +\r\n* h-vetinari\r\n* Matt Haberland\r\n* J. Hariharan +\r\n* Charles Harris\r\n* Trever Hines\r\n* Ian Hunt-Isaak +\r\n* ich +\r\n* Itrimel +\r\n* Jan-Hendrik M\u00fcller +\r\n* Jebby993 +\r\n* Evan W Jones +\r\n* Nathaniel Jones +\r\n* Jeffrey Kelling +\r\n* Malik Idrees Hasan Khan +\r\n* Sergey B Kirpichev\r\n* Kadatatlu Kishore +\r\n* Andrew Knyazev\r\n* Ravin Kumar +\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory R. Lee\r\n* Tim Leslie\r\n* lezcano +\r\n* Xingyu Liu\r\n* Christian Lorentzen\r\n* Lorenzo +\r\n* Smit Lunagariya +\r\n* Lv101Magikarp +\r\n* Yair M +\r\n* Cong Ma\r\n* Lorenzo Maffioli +\r\n* majiang +\r\n* Brian McFee +\r\n* Nicholas McKibben\r\n* John Speed Meyers +\r\n* millivolt9 +\r\n* Jarrod Millman\r\n* Harsh Mishra +\r\n* Boaz Mohar +\r\n* naelsondouglas +\r\n* Andrew Nelson\r\n* Nico Schl\u00f6mer\r\n* Thomas Nowotny +\r\n* nullptr +\r\n* Teddy Ort +\r\n* Nick Papior\r\n* ParticularMiner +\r\n* Dima Pasechnik\r\n* Tirth Patel\r\n* Matti Picus\r\n* Ilhan Polat\r\n* Adrian Price-Whelan +\r\n* Quentin Barth\u00e9lemy +\r\n* Sundar R +\r\n* Judah Rand +\r\n* Tyler Reddy\r\n* Renal-Of-Loon +\r\n* Frederic Renner +\r\n* Pamphile Roy\r\n* Bharath Saiguhan +\r\n* Atsushi Sakai\r\n* Eric Schanet +\r\n* Sebastian Wallk\u00f6tter\r\n* serge-sans-paille\r\n* Reshama Shaikh +\r\n* Namami Shanker\r\n* Walter Simson +\r\n* Gagandeep Singh +\r\n* Leo C. Stein +\r\n* Albert Steppi\r\n* Kai Striega\r\n* Diana Sukhoverkhova\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* Masayuki Takagi +\r\n* Mike Taves\r\n* Ben Thompson +\r\n* Bas van Beek\r\n* Jacob Vanderplas\r\n* Dhruv Vats +\r\n* H. Vetinari +\r\n* Thomas Viehmann +\r\n* Pauli Virtanen\r\n* Vlad +\r\n* Arthur Volant\r\n* Samuel Wallan\r\n* Stefan van der Walt\r\n* Warren Weckesser\r\n* Josh Wilson\r\n* Haoyin Xu +\r\n* Rory Yorke\r\n* Egor Zemlyanoy\r\n* Gang Zhao +\r\n* \u8d75\u4e30 (Zhao Feng) +\r\n\r\nA total of 133 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.8.0rc2", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.8.0rc2", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.8.0rc2", "url": "https://api.github.com/repos/scipy/scipy/releases/55779940", "dateCreated": "2021-12-20T18:05:47Z", "datePublished": "2021-12-21T21:35:00Z"}, {"tagName": "v1.8.0rc1", "name": "SciPy 1.8.0rc1", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.8.0 Release Notes\r\n===================\r\n\r\n**Note**: SciPy `1.8.0` is not released yet!\r\n\r\nSciPy `1.8.0` is the culmination of `6` months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.8.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.8`+ and NumPy `1.17.3` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0`+ is required.\r\n\r\n\r\nHighlights of this release\r\n-------------------------\r\n\r\n-  A sparse array API has been added for early testing and feedback; this\r\n  work is ongoing, and users should expect minor API refinements over\r\n  the next few releases.\r\n- The sparse SVD library PROPACK is now vendored with SciPy, and an interface\r\n  is exposed via `scipy.sparse.svds` with ``solver='PROPACK'``.\r\n- A new `scipy.stats.sampling` submodule that leverages the ``UNU.RAN`` C\r\n  library to sample from arbitrary univariate non-uniform continuous and\r\n  discrete distributions\r\n- All namespaces that were private but happened to miss underscores in\r\n  their names have been deprecated.\r\n\r\nNew features\r\n-------------\r\n\r\n`scipy.fft` improvements\r\n========================\r\n\r\nAdded an ``orthogonalize=None`` parameter to the real transforms in `scipy.fft`\r\nwhich controls whether the modified definition of DCT/DST is used without\r\nchanging the overall scaling.\r\n\r\n`scipy.fft` backend registration is now smoother, operating with a single\r\nregistration call and no longer requiring a context manager.\r\n\r\n`scipy.integrate` improvements\r\n==============================\r\n\r\n`scipy.integrate.quad_vec` introduces a new optional keyword-only argument,\r\n``args``. ``args`` takes in a tuple of extra arguments if any (default is\r\n``args=()``), which is then internally used to pass into the callable function\r\n(needing these extra arguments) which we wish to integrate.\r\n\r\n`scipy.interpolate` improvements\r\n================================\r\n\r\n`scipy.interpolate.BSpline` has a new method, ``design_matrix``, which\r\nconstructs a design matrix of b-splines in the sparse CSR format.\r\n\r\nA new method ``from_cubic`` in ``BSpline`` class allows to convert a\r\n``CubicSpline`` object to ``BSpline`` object.\r\n\r\n`scipy.linalg` improvements\r\n===========================\r\n\r\n`scipy.linalg` gained three new public array structure investigation functions.\r\n`scipy.linalg.bandwidth` returns information about the bandedness of an array\r\nand can be used to test for triangular structure discovery, while\r\n`scipy.linalg.issymmetric` and `scipy.linalg.ishermitian` test the array for\r\nexact and approximate symmetric/Hermitian structure.\r\n\r\n`scipy.optimize` improvements\r\n=============================\r\n\r\n`scipy.optimize.check_grad` introduces two new optional keyword only arguments,\r\n``direction`` and ``seed``. ``direction`` can take values, ``'all'`` (default),\r\nin which case all the one hot direction vectors will be used for verifying\r\nthe input analytical gradient function and ``'random'``, in which case a\r\nrandom direction vector will be used for the same purpose. ``seed``\r\n(default is ``None``) can be used for reproducing the return value of\r\n``check_grad`` function. It will be used only when ``direction='random'``.\r\n\r\nThe `scipy.optimize.minimize` ``TNC`` method has been rewritten to use Cython\r\nbindings. This also fixes an issue with the callback altering the state of the\r\noptimization.\r\n\r\nAdded optional parameters ``target_accept_rate`` and ``stepwise_factor`` for\r\nadapative step size adjustment in ``basinhopping``.\r\n\r\nThe ``epsilon`` argument to ``approx_fprime`` is now optional so that it may\r\nhave a default value consistent with most other functions in `scipy.optimize`.\r\n\r\n`scipy.signal` improvements\r\n===========================\r\n\r\nAdd ``analog`` argument, default ``False``, to ``zpk2sos``, and add new pairing\r\noption ``'minimal'`` to construct analog and minimal discrete SOS arrays.\r\n``tf2sos`` uses zpk2sos; add ``analog`` argument here as well, and pass it on\r\nto ``zpk2sos``.\r\n\r\n``savgol_coeffs`` and ``savgol_filter`` now work for even window lengths.\r\n\r\nAdded the Chirp Z-transform and Zoom FFT available as `scipy.signal.CZT` and\r\n`scipy.signal.ZoomFFT`.\r\n\r\n`scipy.sparse` improvements\r\n===========================\r\n\r\nAn array API has been added for early testing and feedback; this\r\nwork is ongoing, and users should expect minor API refinements over\r\nthe next few releases. Please refer to the `scipy.sparse`\r\ndocstring for more information.\r\n\r\n``maximum_flow`` introduces optional keyword only argument, ``method``\r\nwhich accepts either, ``'edmonds-karp'`` (Edmonds Karp algorithm) or\r\n``'dinic'`` (Dinic's algorithm). Moreover, ``'dinic'`` is used as default\r\nvalue for ``method`` which means that Dinic's algorithm is used for computing\r\nmaximum flow unless specified. See, the comparison between the supported\r\nalgorithms in\r\n`this comment <https://github.com/scipy/scipy/pull/14358#issue-684212523>`_.\r\n\r\nParameters ``atol``, ``btol`` now default to 1e-6 in\r\n`scipy.sparse.linalg.lsmr` to match with default values in\r\n`scipy.sparse.linalg.lsqr`.\r\n\r\nAdd the Transpose-Free Quasi-Minimal Residual algorithm (TFQMR) for general\r\nnonsingular non-Hermitian linear systems in `scipy.sparse.linalg.tfqmr`.\r\n\r\nThe sparse SVD library PROPACK is now vendored with SciPy, and an interface is\r\nexposed via `scipy.sparse.svds` with ``solver='PROPACK'``. For some problems,\r\nthis may be faster and/or more accurate than the default, ARPACK.\r\n\r\n``sparse.linalg`` iterative solvers now have a nonzero initial guess option,\r\nwhich may be specified as ``x0 = 'Mb'``.\r\n\r\nThe ``trace`` method has been added for sparse matrices.\r\n\r\n`scipy.spatial` improvements\r\n============================\r\n\r\n`scipy.spatial.transform.Rotation` now supports item assignment and has a new\r\n``concatenate`` method.\r\n\r\nAdd `scipy.spatial.distance.kulczynski1` in favour of\r\n`scipy.spatial.distance.kulsinski` which will be deprecated in the next\r\nrelease.\r\n\r\n`scipy.spatial.distance.minkowski` now also supports ``0<p<1``.\r\n\r\n`scipy.special` improvements\r\n============================\r\n\r\nThe new function `scipy.special.log_expit` computes the logarithm of the\r\nlogistic sigmoid function. The function is formulated to provide accurate\r\nresults for large positive and negative inputs, so it avoids the problems\r\nthat would occur in the naive implementation ``log(expit(x))``.\r\n\r\nA suite of five new functions for elliptic integrals:\r\n``scipy.special.ellipr{c,d,f,g,j}``. These are the\r\n`Carlson symmetric elliptic integrals <https://dlmf.nist.gov/19.16>`_, which\r\nhave computational advantages over the classical Legendre integrals. Previous\r\nversions included some elliptic integrals from the Cephes library\r\n(``scipy.special.ellip{k,km1,kinc,e,einc}``) but was missing the integral of\r\nthird kind (Legendre's Pi), which can be evaluated using the new Carlson\r\nfunctions. The new Carlson elliptic integral functions can be evaluated in the\r\ncomplex plane, whereas the Cephes library's functions are only defined for\r\nreal inputs.\r\n\r\nSeveral defects in `scipy.special.hyp2f1` have been corrected. Approximately\r\ncorrect values are now returned for ``z`` near ``exp(+-i*pi/3)``, fixing\r\n`#8054 <https://github.com/scipy/scipy/issues/8054>`_. Evaluation for such ``z``\r\nis now calculated through a series derived by\r\n`L\u00f3pez and Temme (2013) <https://arxiv.org/abs/1306.2046>`_ that converges in\r\nthese regions. In addition, degenerate cases with one or more of ``a``, ``b``,\r\nand/or ``c`` a non-positive integer are now handled in a manner consistent with\r\n`mpmath's hyp2f1 implementation <https://mpmath.org/doc/current/functions/hypergeometric.html>`_,\r\nwhich fixes `#7340 <https://github.com/scipy/scipy/issues/7340>`_. These fixes\r\nwere made as part of an effort to rewrite the Fortran 77 implementation of\r\nhyp2f1 in Cython piece by piece. This rewriting is now roughly 50% complete.\r\n\r\n`scipy.stats` improvements\r\n==========================\r\n\r\n`scipy.stats.qmc.LatinHypercube` introduces two new optional keyword-only\r\narguments, ``optimization`` and ``strength``. ``optimization`` is either\r\n``None`` or ``random-cd``. In the latter, random permutations are performed to\r\nimprove the centered discrepancy. ``strength`` is either 1 or 2. 1 corresponds\r\nto the classical LHS while 2 has better sub-projection properties. This\r\nconstruction is referred to as an orthogonal array based LHS of strength 2.\r\nIn both cases, the output is still a LHS.\r\n\r\n`scipy.stats.qmc.Halton` is faster as the underlying Van der Corput sequence\r\nwas ported to Cython.\r\n\r\nThe ``alternative`` parameter was added to the ``kendalltau`` and ``somersd``\r\nfunctions to allow one-sided hypothesis testing. Similarly, the masked\r\nversions of ``skewtest``, ``kurtosistest``, ``ttest_1samp``, ``ttest_ind``,\r\nand ``ttest_rel`` now also have an ``alternative`` parameter.\r\n\r\nAdd `scipy.stats.gzscore` to calculate the geometrical z score.\r\n\r\nRandom variate generators to sample from arbitrary univariate non-uniform\r\ncontinuous and discrete distributions have been added to the new\r\n`scipy.stats.sampling` submodule. Implementations of a C library\r\n`UNU.RAN <http://statmath.wu.ac.at/software/unuran/>`_ are used for\r\nperformance. The generators added are:\r\n\r\n- TransformedDensityRejection\r\n- DiscreteAliasUrn\r\n- NumericalInversePolynomial\r\n- DiscreteGuideTable\r\n- SimpleRatioUniforms\r\n\r\nThe ``binned_statistic`` set of functions now have improved performance for\r\nthe ``std``, ``min``, ``max``, and ``median`` statistic calculations.\r\n\r\n``somersd`` and ``_tau_b`` now have faster Pythran-based implementations.\r\n\r\nSome general efficiency improvements to handling of ``nan`` values in\r\nseveral ``stats`` functions.\r\n\r\nAdded the Tukey-Kramer test as `scipy.stats.tukey_hsd`.\r\n\r\nImproved performance of `scipy.stats.argus` ``rvs`` method.\r\n\r\nAdded the parameter ``keepdims`` to `scipy.stats.variation` and prevent the\r\nundesirable return of a masked array from the function in some cases.\r\n\r\n``permutation_test`` performs an exact or randomized permutation test of a\r\ngiven statistic on provided data.\r\n\r\n\r\nDeprecated features\r\n---------------------\r\n\r\nClear split between public and private API\r\n==========================================\r\n\r\nSciPy has always documented what its public API consisted of in\r\n:ref:`its API reference docs <scipy-api>`,\r\nhowever there never was a clear split between public and\r\nprivate namespaces in the code base. In this release, all namespaces that were\r\nprivate but happened to miss underscores in their names have been deprecated.\r\nThese include (as examples, there are many more):\r\n\r\n- ``scipy.signal.spline``\r\n- ``scipy.ndimage.filters``\r\n- ``scipy.ndimage.fourier``\r\n- ``scipy.ndimage.measurements``\r\n- ``scipy.ndimage.morphology``\r\n- ``scipy.ndimage.interpolation``\r\n- ``scipy.sparse.linalg.solve``\r\n- ``scipy.sparse.linalg.eigen``\r\n- ``scipy.sparse.linalg.isolve``\r\n\r\nAll functions and other objects in these namespaces that were meant to be\r\npublic are accessible from their respective public namespace (e.g.\r\n`scipy.signal`). The design principle is that any public object must be\r\naccessible from a single namespace only; there are a few exceptions, mostly for\r\nhistorical reasons (e.g., ``stats`` and ``stats.distributions`` overlap).\r\nFor other libraries aiming to provide a SciPy-compatible API, it is now\r\nunambiguous what namespace structure to follow.  See\r\n`gh-14360 <https://github.com/scipy/scipy/issues/14360>`_ for more details.\r\n\r\nOther deprecations\r\n--------------------\r\n\r\n``NumericalInverseHermite`` has been deprecated from `scipy.stats` and moved\r\nto the `scipy.stats.sampling` submodule. It now uses the C implementation of\r\nthe UNU.RAN library so the result of methods like ``ppf`` may vary slightly.\r\nParameter ``tol`` has been deprecated and renamed to ``u_resolution``. The\r\nparameter ``max_intervals`` has also been deprecated and will be removed in a\r\nfuture release of SciPy.\r\n\r\n\r\nBackwards incompatible changes\r\n----------------------------------\r\n\r\n- SciPy has raised the minimum compiler versions to GCC 6.3 on linux and\r\n  VS2019 on windows. In particular, this means that SciPy may now use C99 and\r\n  C++14 features. For more details see\r\n  `here <https://docs.scipy.org/doc/scipy/reference/dev/toolchain.html>`_.\r\n- The result for empty bins for `scipy.stats.binned_statistic` with the builtin\r\n  ``'std'`` metric is now ``nan``, for consistency with ``np.std``.\r\n- The function `scipy.spatial.distance.wminkowski` has been removed. To achieve\r\n  the same results as before, please use the ``minkowski`` distance function\r\n  with the (optional) ``w=`` keyword-argument for the given weight.\r\n\r\nOther changes\r\n---------------\r\n\r\nSome Fortran 77 code was modernized to be compatible with NAG's nagfor Fortran\r\ncompiler (see, e.g., `PR 13229 <https://github.com/scipy/scipy/pull/13229>`_).\r\n\r\n``threadpoolctl`` may now be used by our test suite to substantially improve\r\nthe efficiency of parallel test suite runs.\r\n\r\nAuthors\r\n---------\r\n\r\n* @endolith\r\n* adamadanandy +\r\n* akeemlh +\r\n* Anton Akhmerov\r\n* Marvin Albert +\r\n* alegresor +\r\n* Andrew Annex +\r\n* Pantelis Antonoudiou +\r\n* Ross Barnowski +\r\n* Christoph Baumgarten\r\n* Stephen Becker +\r\n* Nickolai Belakovski\r\n* Peter Bell\r\n* berberto +\r\n* Georgii Bocharov +\r\n* Evgeni Burovski\r\n* Matthias Bussonnier\r\n* CJ Carey\r\n* Justin Charlong +\r\n* Dennis Collaris +\r\n* David Cottrell +\r\n* cruyffturn +\r\n* da-woods +\r\n* Anirudh Dagar\r\n* Tiger Du +\r\n* Thomas Duvernay\r\n* Dani El-Ayyass +\r\n* Castedo Ellerman +\r\n* Donnie Erb +\r\n* Andreas Esders-Kopecky +\r\n* Livio F +\r\n* Isuru Fernando\r\n* Evelyn Fitzgerald +\r\n* Sara Fridovich-Keil +\r\n* Mark E Fuller +\r\n* Ralf Gommers\r\n* Kevin Richard Green +\r\n* guiweber +\r\n* Nitish Gupta +\r\n* h-vetinari\r\n* Matt Haberland\r\n* J. Hariharan +\r\n* Charles Harris\r\n* Trever Hines\r\n* Ian Hunt-Isaak +\r\n* ich +\r\n* Itrimel +\r\n* Jan-Hendrik M\u00fcller +\r\n* Jebby993 +\r\n* Evan W Jones +\r\n* Nathaniel Jones +\r\n* Jeffrey Kelling +\r\n* Malik Idrees Hasan Khan +\r\n* Sergey B Kirpichev\r\n* Kadatatlu Kishore +\r\n* Andrew Knyazev\r\n* Ravin Kumar +\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory R. Lee\r\n* Tim Leslie\r\n* lezcano +\r\n* Xingyu Liu\r\n* Christian Lorentzen\r\n* Lorenzo +\r\n* Smit Lunagariya +\r\n* Lv101Magikarp +\r\n* Yair M +\r\n* Cong Ma\r\n* Lorenzo Maffioli +\r\n* majiang +\r\n* Brian McFee +\r\n* Nicholas McKibben\r\n* John Speed Meyers +\r\n* millivolt9 +\r\n* Jarrod Millman\r\n* Harsh Mishra +\r\n* Boaz Mohar +\r\n* naelsondouglas +\r\n* Andrew Nelson\r\n* Nico Schl\u00f6mer\r\n* Thomas Nowotny +\r\n* nullptr +\r\n* Teddy Ort +\r\n* Nick Papior\r\n* ParticularMiner +\r\n* Dima Pasechnik\r\n* Tirth Patel\r\n* Matti Picus\r\n* Ilhan Polat\r\n* Adrian Price-Whelan +\r\n* Quentin Barth\u00e9lemy +\r\n* Sundar R +\r\n* Judah Rand +\r\n* Tyler Reddy\r\n* Renal-Of-Loon +\r\n* Frederic Renner +\r\n* Pamphile Roy\r\n* Bharath Saiguhan +\r\n* Atsushi Sakai\r\n* Eric Schanet +\r\n* Sebastian Wallk\u00f6tter\r\n* serge-sans-paille\r\n* Reshama Shaikh +\r\n* Namami Shanker\r\n* Walter Simson +\r\n* Gagandeep Singh +\r\n* Leo C. Stein +\r\n* Albert Steppi\r\n* Kai Striega\r\n* Diana Sukhoverkhova\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* Mike Taves\r\n* Ben Thompson +\r\n* Bas van Beek\r\n* Jacob Vanderplas\r\n* Dhruv Vats +\r\n* H. Vetinari +\r\n* Thomas Viehmann +\r\n* Pauli Virtanen\r\n* Vlad +\r\n* Arthur Volant\r\n* Samuel Wallan\r\n* Stefan van der Walt\r\n* Warren Weckesser\r\n* Josh Wilson\r\n* Haoyin Xu +\r\n* Rory Yorke\r\n* Egor Zemlyanoy\r\n* Gang Zhao +\r\n* \u8d75\u4e30 (Zhao Feng) +\r\n\r\nA total of 132 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.8.0rc1", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.8.0rc1", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.8.0rc1", "url": "https://api.github.com/repos/scipy/scipy/releases/55118163", "dateCreated": "2021-12-10T22:48:15Z", "datePublished": "2021-12-12T02:18:47Z"}, {"tagName": "v1.7.3", "name": "SciPy 1.7.3", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.7.3 Release Notes\r\n===================\r\n\r\nSciPy `1.7.3` is a bug-fix release that provides binary wheels\r\nfor MacOS arm64 with Python `3.8`, `3.9`, and `3.10`. The MacOS arm64 wheels\r\nare only available for MacOS version `12.0` and greater, as explained\r\nin [Issue 14688](https://github.com/scipy/scipy/issues/14688).\r\n\r\nAuthors\r\n=======\r\n\r\n* Anirudh Dagar\r\n* Ralf Gommers\r\n* Tyler Reddy\r\n* Pamphile Roy\r\n* Olivier Grisel\r\n* Isuru Fernando\r\n\r\nA total of 6 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.7.3", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.7.3", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.7.3", "url": "https://api.github.com/repos/scipy/scipy/releases/54020583", "dateCreated": "2021-11-24T04:32:11Z", "datePublished": "2021-11-24T18:44:51Z"}, {"tagName": "v1.7.2", "name": "SciPy 1.7.2", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.7.2 Release Notes\r\n==========================\r\n\r\nSciPy `1.7.2` is a bug-fix release with no new features\r\ncompared to `1.7.1`. Notably, the release includes wheels\r\nfor Python `3.10`, and wheels are now built with a newer\r\nversion of OpenBLAS, `0.3.17`. Python `3.10` wheels are provided\r\nfor MacOS x86_64 (thin, not universal2 or arm64 at this time),\r\nand Windows/Linux 64-bit. Many wheels are now built with newer\r\nversions of manylinux, which may require newer versions of pip.\r\n\r\nAuthors\r\n=======\r\n\r\n* Peter Bell\r\n* da-woods +\r\n* Isuru Fernando\r\n* Ralf Gommers\r\n* Matt Haberland\r\n* Nicholas McKibben\r\n* Ilhan Polat\r\n* Judah Rand +\r\n* Tyler Reddy\r\n* Pamphile Roy\r\n* Charles Harris\r\n* Matti Picus\r\n* Hugo van Kemenade\r\n* Jacob Vanderplas\r\n\r\nA total of 14 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.\r\n", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.7.2", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.7.2", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.7.2", "url": "https://api.github.com/repos/scipy/scipy/releases/52831634", "dateCreated": "2021-11-05T22:01:31Z", "datePublished": "2021-11-06T04:56:05Z"}, {"tagName": "v1.7.1", "name": "SciPy 1.7.1", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.7.1 Release Notes\r\n===================\r\n\r\nSciPy `1.7.1` is a bug-fix release with no new features\r\ncompared to `1.7.0`.\r\n\r\nAuthors\r\n=======\r\n\r\n* Peter Bell\r\n* Evgeni Burovski\r\n* Justin Charlong +\r\n* Ralf Gommers\r\n* Matti Picus\r\n* Tyler Reddy\r\n* Pamphile Roy\r\n* Sebastian Wallk\u00f6tter\r\n* Arthur Volant\r\n\r\nA total of 9 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.7.1", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.7.1", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.7.1", "url": "https://api.github.com/repos/scipy/scipy/releases/47125868", "dateCreated": "2021-08-01T20:57:34Z", "datePublished": "2021-08-02T02:24:12Z"}, {"tagName": "v1.7.0", "name": "SciPy 1.7.0", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.7.0 Release Notes\r\n===================\r\n\r\nSciPy `1.7.0` is the culmination of `6` months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.7.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.7+` and NumPy `1.16.5` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0+` is required.\r\n\r\n\r\nHighlights of this release\r\n==================\r\n\r\n-  A new submodule for quasi-Monte Carlo, `scipy.stats.qmc`, was added\r\n-  The documentation design was updated to use the same PyData-Sphinx theme as\r\n  NumPy and other ecosystem libraries.\r\n-  We now vendor and leverage the Boost C++ library to enable numerous\r\n  improvements for long-standing weaknesses in `scipy.stats`\r\n-  `scipy.stats` has six new distributions, eight new (or overhauled)\r\n  hypothesis tests, a new function for bootstrapping, a class that enables\r\n  fast random variate sampling and percentile point function evaluation, \r\n  and many other enhancements.\r\n-  ``cdist`` and ``pdist`` distance calculations are faster for several metrics,\r\n  especially weighted cases, thanks to a rewrite to a new C++ backend framework\r\n-  A new class for radial basis function interpolation, `RBFInterpolator`, was\r\n  added to address issues with the `Rbf` class.\r\n\r\n*We gratefully acknowledge the Chan-Zuckerberg Initiative Essential Open Source\r\nSoftware for Science program for supporting many of the improvements to*\r\n`scipy.stats`.\r\n\r\n\r\nNew features\r\n==========\r\n\r\n`scipy.cluster` improvements\r\n-----------------------------\r\n\r\nAn optional argument, ``seed``, has been added to ``kmeans`` and ``kmeans2`` to\r\nset the random generator and random state.\r\n\r\n`scipy.interpolate` improvements\r\n----------------------------------\r\n\r\nImproved input validation and error messages for ``fitpack.bispev`` and\r\n``fitpack.parder`` for scenarios that previously caused substantial confusion\r\nfor users.\r\n\r\nThe class `RBFInterpolator` was added to supersede the `Rbf` class. The new\r\nclass has usage that more closely follows other interpolator classes, corrects\r\nsign errors that caused unexpected smoothing behavior, includes polynomial\r\nterms in the interpolant (which are necessary for some RBF choices), and\r\nsupports interpolation using only the k-nearest neighbors for memory\r\nefficiency.\r\n\r\n`scipy.linalg` improvements\r\n----------------------------\r\n\r\nAn LAPACK wrapper was added for access to the ``tgexc`` subroutine.\r\n\r\n`scipy.ndimage` improvements\r\n--------------------------------\r\n\r\n`scipy.ndimage.affine_transform` is now able to infer the ``output_shape`` from\r\nthe ``out`` array.\r\n\r\n`scipy.optimize` improvements\r\n--------------------------------\r\n\r\nThe optional parameter ``bounds`` was added to\r\n``_minimize_neldermead`` to support bounds constraints\r\nfor the Nelder-Mead solver.\r\n\r\n``trustregion`` methods ``trust-krylov``, ``dogleg`` and ``trust-ncg`` can now\r\nestimate ``hess`` by finite difference using one of\r\n``[\"2-point\", \"3-point\", \"cs\"]``.\r\n\r\n``halton`` was added as a ``sampling_method`` in `scipy.optimize.shgo`.\r\n``sobol`` was fixed and is now using `scipy.stats.qmc.Sobol`.\r\n\r\n``halton`` and ``sobol`` were added as ``init`` methods in\r\n`scipy.optimize.differential_evolution.`\r\n\r\n``differential_evolution`` now accepts an ``x0`` parameter to provide an\r\ninitial guess for the minimization.\r\n\r\n``least_squares`` has a modest performance improvement when SciPy is built\r\nwith Pythran transpiler enabled.\r\n\r\nWhen ``linprog`` is used with ``method`` ``'highs'``, ``'highs-ipm'``, or\r\n``'highs-ds'``, the result object now reports the marginals (AKA shadow\r\nprices, dual values) and residuals associated with each constraint.\r\n\r\n`scipy.signal` improvements\r\n-----------------------------\r\n\r\n``get_window`` supports ``general_cosine`` and ``general_hamming`` window\r\nfunctions.\r\n\r\n`scipy.signal.medfilt2d` now releases the GIL where appropriate to enable\r\nperformance gains via multithreaded calculations.\r\n\r\n`scipy.sparse` improvements\r\n------------------------------\r\n\r\nAddition of ``dia_matrix`` sparse matrices is now faster.\r\n\r\n\r\n`scipy.spatial` improvements\r\n------------------------------\r\n\r\n``distance.cdist`` and ``distance.pdist`` performance has greatly improved for\r\ncertain weighted metrics. Namely: ``minkowski``, ``euclidean``, ``chebyshev``,\r\n``canberra``, and ``cityblock``.\r\n\r\nModest performance improvements for many of the unweighted ``cdist`` and\r\n``pdist`` metrics noted above.\r\n\r\nThe parameter ``seed`` was added to `scipy.spatial.vq.kmeans` and\r\n`scipy.spatial.vq.kmeans2`.\r\n\r\nThe parameters ``axis`` and ``keepdims`` where added to\r\n`scipy.spatial.distance.jensenshannon`.\r\n\r\nThe ``rotation`` methods ``from_rotvec`` and ``as_rotvec`` now accept a\r\n``degrees`` argument to specify usage of degrees instead of radians.\r\n\r\n`scipy.special` improvements\r\n------------------------------\r\n\r\nWright's generalized Bessel function for positive arguments was added as\r\n`scipy.special.wright_bessel.`\r\n\r\nAn implementation of the inverse of the Log CDF of the Normal Distribution is\r\nnow available via `scipy.special.ndtri_exp`.\r\n\r\n`scipy.stats` improvements\r\n----------------------------\r\n\r\nHypothesis Tests\r\n------------------\r\n\r\nThe Mann-Whitney-Wilcoxon test, ``mannwhitneyu``, has been rewritten. It now\r\nsupports n-dimensional input, an exact test method when there are no ties,\r\nand improved documentation. Please see \"Other changes\" for adjustments to\r\ndefault behavior.\r\n\r\nThe new function `scipy.stats.binomtest` replaces `scipy.stats.binom_test`. The\r\nnew function returns an object that calculates a confidence intervals of the\r\nproportion parameter. Also, performance was improved from O(n) to O(log(n)) by\r\nusing binary search.\r\n\r\nThe two-sample version of the Cramer-von Mises test is implemented in\r\n`scipy.stats.cramervonmises_2samp`.\r\n\r\nThe Alexander-Govern test is implemented in the new function\r\n`scipy.stats.alexandergovern`.\r\n\r\nThe new functions `scipy.stats.barnard_exact` and  `scipy.stats. boschloo_exact`\r\nrespectively perform Barnard's exact test and Boschloo's exact test\r\nfor 2x2 contingency tables.\r\n\r\nThe new function `scipy.stats.page_trend_test` performs Page's test for ordered\r\nalternatives.\r\n\r\nThe new function `scipy.stats.somersd` performs Somers' D test for ordinal\r\nassociation between two variables.\r\n\r\nAn option, ``permutations``, has been added in `scipy.stats.ttest_ind` to\r\nperform permutation t-tests. A ``trim`` option was also added to perform\r\na trimmed (Yuen's) t-test.\r\n\r\nThe ``alternative`` parameter was added to the ``skewtest``, ``kurtosistest``,\r\n``ranksums``, ``mood``, ``ansari``, ``linregress``, and ``spearmanr`` functions\r\nto allow one-sided hypothesis testing.\r\n\r\nSample statistics\r\n-----------------\r\n\r\nThe new function `scipy.stats.differential_entropy` estimates the differential\r\nentropy of a continuous distribution from a sample.\r\n\r\nThe ``boxcox`` and ``boxcox_normmax`` now allow the user to control the\r\noptimizer used to minimize the negative log-likelihood function.\r\n\r\nA new function `scipy.stats.contingency.relative_risk` calculates the\r\nrelative risk, or risk ratio, of a 2x2 contingency table. The object\r\nreturned has a method to compute the confidence interval of the relative risk.\r\n\r\nPerformance improvements in the ``skew`` and ``kurtosis`` functions achieved\r\nby removal of repeated/redundant calculations.\r\n\r\nSubstantial performance improvements in `scipy.stats.mstats.hdquantiles_sd`.\r\n\r\nThe new function `scipy.stats.contingency.association` computes several\r\nmeasures of association for a contingency table: Pearsons contingency\r\ncoefficient, Cramer's V, and Tschuprow's T.\r\n\r\nThe parameter ``nan_policy`` was added to `scipy.stats.zmap` to provide options\r\nfor handling the occurrence of ``nan`` in the input data.\r\n\r\nThe parameter ``ddof`` was added to `scipy.stats.variation` and\r\n`scipy.stats.mstats.variation`.\r\n\r\nThe parameter ``weights`` was added to `scipy.stats.gmean`.\r\n\r\nStatistical Distributions\r\n------------------------\r\n\r\nWe now vendor and leverage the Boost C++ library to address a number of\r\npreviously reported issues in ``stats``. Notably, ``beta``, ``binom``,\r\n``nbinom`` now have Boost backends, and it is straightforward to leverage\r\nthe backend for additional functions.\r\n\r\nThe skew Cauchy probability distribution has been implemented as\r\n`scipy.stats.skewcauchy`.\r\n\r\nThe Zipfian probability distribution has been implemented as\r\n`scipy.stats.zipfian`.\r\n\r\nThe new distributions ``nchypergeom_fisher`` and ``nchypergeom_wallenius``\r\nimplement the Fisher and Wallenius versions of the noncentral hypergeometric\r\ndistribution, respectively.\r\n\r\nThe generalized hyperbolic distribution was added in\r\n`scipy.stats.genhyperbolic`.\r\n\r\nThe studentized range distribution was added in `scipy.stats.studentized_range`.\r\n\r\n`scipy.stats.argus` now has improved handling for small parameter values.\r\n\r\nBetter argument handling/preparation has resulted in performance improvements\r\nfor many distributions.\r\n\r\nThe ``cosine`` distribution has added ufuncs for ``ppf``, ``cdf``, ``sf``, and\r\n``isf`` methods including numerical precision improvements at the edges of the\r\nsupport of the distribution.\r\n\r\nAn option to fit the distribution to data by the method of moments has been\r\nadded to the ``fit`` method of the univariate continuous distributions.\r\n\r\nOther\r\n------\r\n`scipy.stats.bootstrap` has been added to allow estimation of the confidence\r\ninterval and standard error of a statistic.\r\n\r\nThe new function `scipy.stats.contingency.crosstab` computes a contingency\r\ntable (i.e. a table of counts of unique entries) for the given data.\r\n\r\n`scipy.stats.NumericalInverseHermite` enables fast random variate sampling\r\nand percentile point function evaluation of an arbitrary univariate statistical\r\ndistribution.\r\n\r\nNew `scipy.stats.qmc` module\r\n--------------------------------\r\n\r\nThis new module provides Quasi-Monte Carlo (QMC) generators and associated\r\nhelper functions.\r\n\r\nIt provides a generic class `scipy.stats.qmc.QMCEngine` which defines a QMC\r\nengine/sampler. An engine is state aware: it can be continued, advanced and\r\nreset. 3 base samplers are available:\r\n\r\n-  `scipy.stats.qmc.Sobol` the well known Sobol low discrepancy sequence.\r\n  Several warnings have been added to guide the user into properly using this\r\n  sampler. The sequence is scrambled by default.\r\n-  `scipy.stats.qmc.Halton`: Halton low discrepancy sequence. The sequence is\r\n  scrambled by default.\r\n-  `scipy.stats.qmc.LatinHypercube`: plain LHS design.\r\n\r\nAnd 2 special samplers are available:\r\n\r\n-  `scipy.stats.qmc.MultinomialQMC`: sampling from a multinomial distribution\r\n  using any of the base `scipy.stats.qmc.QMCEngine`.\r\n-  `scipy.stats.qmc.MultivariateNormalQMC`: sampling from a multivariate Normal\r\n  using any of the base `scipy.stats.qmc.QMCEngine`.\r\n\r\nThe module also provide the following helpers:\r\n\r\n-  `scipy.stats.qmc.discrepancy`: assess the quality of a set of points in terms\r\n  of space coverage.\r\n-  `scipy.stats.qmc.update_discrepancy`: can be used in an optimization loop to\r\n  construct a good set of points.\r\n-  `scipy.stats.qmc.scale`: easily scale a set of points from (to) the unit\r\n  interval to (from) a given range.\r\n\r\n\r\n\r\nDeprecated features\r\n================\r\n\r\n`scipy.linalg` deprecations\r\n---------------------------\r\n\r\n-  `scipy.linalg.pinv2` is deprecated and its functionality is completely\r\n  subsumed into `scipy.linalg.pinv`\r\n-  Both ``rcond``, ``cond`` keywords of `scipy.linalg.pinv` and\r\n  `scipy.linalg.pinvh` were not working and now are deprecated. They are now\r\n  replaced with functioning ``atol`` and ``rtol`` keywords with clear usage.\r\n\r\n`scipy.spatial` deprecations\r\n----------------------------\r\n\r\n-  `scipy.spatial.distance` metrics expect 1d input vectors but will call\r\n  ``np.squeeze`` on their inputs to accept any extra length-1 dimensions. That\r\n  behaviour is now deprecated.\r\n\r\n\r\n\r\nOther changes\r\n===========\r\n\r\nWe now accept and leverage performance improvements from the ahead-of-time\r\nPython-to-C++ transpiler, Pythran, which can be optionally disabled (via\r\n``export SCIPY_USE_PYTHRAN=0``) but is enabled by default at build time.\r\n\r\nThere are two changes to the default behavior of `scipy.stats.mannwhitenyu`:\r\n\r\n-  For years, use of the default ``alternative=None`` was deprecated; explicit\r\n  ``alternative`` specification was required. Use of the new default value of\r\n  ``alternative``, \"two-sided\", is now permitted.\r\n-  Previously, all p-values were based on an asymptotic approximation. Now, for\r\n  small samples without ties, the p-values returned are exact by default.\r\n\r\nSupport has been added for PEP 621 (project metadata in ``pyproject.toml``)\r\n\r\nWe now support a Gitpod environment to reduce the barrier to entry for SciPy\r\ndevelopment; for more details see :ref:`quickstart-gitpod`.\r\n\r\n\r\n\r\nAuthors\r\n======\r\n\r\n* @endolith\r\n* Jelle Aalbers +\r\n* Adam +\r\n* Tania Allard +\r\n* Sven Baars +\r\n* Max Balandat +\r\n* baumgarc +\r\n* Christoph Baumgarten\r\n* Peter Bell\r\n* Lilian Besson\r\n* Robinson Besson +\r\n* Max Bolingbroke\r\n* Blair Bonnett +\r\n* Jord\u00e3o Bragantini\r\n* Harm Buisman +\r\n* Evgeni Burovski\r\n* Matthias Bussonnier\r\n* Dominic C\r\n* CJ Carey\r\n* Ram\u00f3n Casero +\r\n* Chachay +\r\n* charlotte12l +\r\n* Benjamin Curtice Corbett +\r\n* Falcon Dai +\r\n* Ian Dall +\r\n* Terry Davis\r\n* droussea2001 +\r\n* DWesl +\r\n* dwight200 +\r\n* Thomas J. Fan +\r\n* Joseph Fox-Rabinovitz\r\n* Max Frei +\r\n* Laura Gutierrez Funderburk +\r\n* gbonomib +\r\n* Matthias Geier +\r\n* Pradipta Ghosh +\r\n* Ralf Gommers\r\n* Evan H +\r\n* h-vetinari\r\n* Matt Haberland\r\n* Anselm Hahn +\r\n* Alex Henrie\r\n* Piet Hessenius +\r\n* Trever Hines +\r\n* Elisha Hollander +\r\n* Stephan Hoyer\r\n* Tom Hu +\r\n* Kei Ishikawa +\r\n* Julien Jerphanion\r\n* Robert Kern\r\n* Shashank KS +\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Cheng H. Lee +\r\n* Gregory R. Lee\r\n* Jean-Benoist Leger +\r\n* lgfunderburk +\r\n* liam-o-marsh +\r\n* Xingyu Liu +\r\n* Alex Loftus +\r\n* Christian Lorentzen +\r\n* Cong Ma\r\n* Marc +\r\n* MarkPundurs +\r\n* Markus L\u00f6ning +\r\n* Liam Marsh +\r\n* Nicholas McKibben\r\n* melissawm +\r\n* Jamie Morton\r\n* Andrew Nelson\r\n* Nikola Forr\u00f3\r\n* Tor Nordam +\r\n* Olivier Gauth\u00e9 +\r\n* Rohit Pandey +\r\n* Avanindra Kumar Pandeya +\r\n* Tirth Patel\r\n* paugier +\r\n* Alex H. Wagner, PhD +\r\n* Jeff Plourde +\r\n* Ilhan Polat\r\n* pranavrajpal +\r\n* Vladyslav Rachek\r\n* Bharat Raghunathan\r\n* Recursing +\r\n* Tyler Reddy\r\n* Lucas Roberts\r\n* Gregor Robinson +\r\n* Pamphile Roy +\r\n* Atsushi Sakai\r\n* Benjamin Santos\r\n* Martin K. Scherer +\r\n* Thomas Schmelzer +\r\n* Daniel Scott +\r\n* Sebastian Wallk\u00f6tter +\r\n* serge-sans-paille +\r\n* Namami Shanker +\r\n* Masashi Shibata +\r\n* Alexandre de Siqueira +\r\n* Albert Steppi +\r\n* Adam J. Stewart +\r\n* Kai Striega\r\n* Diana Sukhoverkhova\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* Mike Taves\r\n* Dan Temkin +\r\n* Nicolas Tessore +\r\n* tsubota20 +\r\n* Robert Uhl\r\n* christos val +\r\n* Bas van Beek +\r\n* Ashutosh Varma +\r\n* Jose Vazquez +\r\n* Sebastiano Vigna\r\n* Aditya Vijaykumar\r\n* VNMabus\r\n* Arthur Volant +\r\n* Samuel Wallan\r\n* Stefan van der Walt\r\n* Warren Weckesser\r\n* Anreas Weh\r\n* Josh Wilson\r\n* Rory Yorke\r\n* Egor Zemlyanoy\r\n* Marc Zoeller +\r\n* zoj613 +\r\n* \u79cb\u7eab +\r\n\r\nA total of 126 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.7.0", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.7.0", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.7.0", "url": "https://api.github.com/repos/scipy/scipy/releases/44925208", "dateCreated": "2021-06-19T21:19:44Z", "datePublished": "2021-06-20T17:06:43Z"}, {"tagName": "v1.7.0rc2", "name": "SciPy 1.7.0rc2", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.7.0 Release Notes\r\n====================\r\n\r\n**Note**: Scipy 1.7.0 is not released yet!\r\n\r\nSciPy `1.7.0` is the culmination of `6` months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.7.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.7+` and NumPy `1.16.5` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0+` is required.\r\n\r\n\r\n\r\nHighlights of this release\r\n-------------------------\r\n\r\n-  A new submodule for quasi-Monte Carlo, `scipy.stats.qmc`, was added\r\n-  The documentation design was updated to use the same PyData-Sphinx theme as\r\n  other NumFOCUS packages like NumPy.\r\n-  We now vendor and leverage the Boost C++ library to enable numerous\r\n  improvements for long-standing weaknesses in `scipy.stats`\r\n-  `scipy.stats` has six new distributions, eight new (or overhauled)\r\n  hypothesis tests, a new function for bootstrapping, a class that enables\r\n  fast random variate sampling and percentile point function evaluation, \r\n  and many other enhancements.\r\n-  ``cdist`` and ``pdist`` distance calculations are faster for several metrics,\r\n  especially weighted cases, thanks to a rewrite to a new C++ backend framework\r\n-  A new class for radial basis function interpolation, `RBFInterpolator`, was\r\n  added to address issues with the `Rbf` class.\r\n\r\n*We gratefully acknowledge the Chan-Zuckerberg Initiative Essential Open Source\r\nSoftware for Science program for supporting many of the improvements to*\r\n`scipy.stats`.\r\n\r\n\r\nNew features\r\n-------------\r\n\r\n`scipy.cluster` improvements\r\n============================\r\n\r\nAn optional argument, ``seed``, has been added to ``kmeans`` and ``kmeans2`` to\r\nset the random generator and random state.\r\n\r\n`scipy.interpolate` improvements\r\n================================\r\n\r\nImproved input validation and error messages for ``fitpack.bispev`` and\r\n``fitpack.parder`` for scenarios that previously caused substantial confusion\r\nfor users.\r\n\r\nThe class `RBFInterpolator` was added to supersede the `Rbf` class. The new\r\nclass has usage that more closely follows other interpolator classes, corrects\r\nsign errors that caused unexpected smoothing behavior, includes polynomial\r\nterms in the interpolant (which are necessary for some RBF choices), and\r\nsupports interpolation using only the k-nearest neighbors for memory\r\nefficiency.\r\n\r\n`scipy.linalg` improvements\r\n===========================\r\n\r\nAn LAPACK wrapper was added for access to the ``tgexc`` subroutine.\r\n\r\n`scipy.ndimage` improvements\r\n============================\r\n\r\n`scipy.ndimage.affine_transform` is now able to infer the ``output_shape`` from\r\nthe ``out`` array.\r\n\r\n`scipy.optimize` improvements\r\n=============================\r\n\r\nThe optional parameter ``bounds`` was added to\r\n``_minimize_neldermead`` to support bounds constraints\r\nfor the Nelder-Mead solver.\r\n\r\n``trustregion`` methods ``trust-krylov``, ``dogleg`` and ``trust-ncg`` can now\r\nestimate ``hess`` by finite difference using one of\r\n``[\"2-point\", \"3-point\", \"cs\"]``.\r\n\r\n``halton`` was added as a ``sampling_method`` in `scipy.optimize.shgo`.\r\n``sobol`` was fixed and is now using `scipy.stats.qmc.Sobol`.\r\n\r\n``halton`` and ``sobol`` were added as ``init`` methods in\r\n`scipy.optimize.differential_evolution.`\r\n\r\n``differential_evolution`` now accepts an ``x0`` parameter to provide an\r\ninitial guess for the minimization.\r\n\r\n``least_squares`` has a modest performance improvement when SciPy is built\r\nwith Pythran transpiler enabled.\r\n\r\nWhen ``linprog`` is used with ``method`` ``'highs'``, ``'highs-ipm'``, or\r\n``'highs-ds'``, the result object now reports the marginals (AKA shadow\r\nprices, dual values) and residuals associated with each constraint.\r\n\r\n`scipy.signal` improvements\r\n===========================\r\n\r\n``get_window`` supports ``general_cosine`` and ``general_hamming`` window\r\nfunctions.\r\n\r\n`scipy.signal.medfilt2d` now releases the GIL where appropriate to enable\r\nperformance gains via multithreaded calculations.\r\n\r\n`scipy.sparse` improvements\r\n===========================\r\n\r\nAddition of ``dia_matrix`` sparse matrices is now faster.\r\n\r\n\r\n`scipy.spatial` improvements\r\n============================\r\n\r\n``distance.cdist`` and ``distance.pdist`` performance has greatly improved for\r\ncertain weighted metrics. Namely: ``minkowski``, ``euclidean``, ``chebyshev``,\r\n``canberra``, and ``cityblock``.\r\n\r\nModest performance improvements for many of the unweighted ``cdist`` and\r\n``pdist`` metrics noted above.\r\n\r\nThe parameter ``seed`` was added to `scipy.spatial.vq.kmeans` and\r\n`scipy.spatial.vq.kmeans2`.\r\n\r\nThe parameters ``axis`` and ``keepdims`` where added to\r\n`scipy.spatial.distance.jensenshannon`.\r\n\r\nThe ``rotation`` methods ``from_rotvec`` and ``as_rotvec`` now accept a\r\n``degrees`` argument to specify usage of degrees instead of radians.\r\n\r\n`scipy.special` improvements\r\n============================\r\n\r\nWright's generalized Bessel function for positive arguments was added as\r\n`scipy.special.wright_bessel.`\r\n\r\nAn implementation of the inverse of the Log CDF of the Normal Distribution is\r\nnow available via `scipy.special.ndtri_exp`.\r\n\r\n`scipy.stats` improvements\r\n==========================\r\n\r\nHypothesis Tests\r\n------------------\r\n\r\nThe Mann-Whitney-Wilcoxon test, ``mannwhitneyu``, has been rewritten. It now\r\nsupports n-dimensional input, an exact test method when there are no ties,\r\nand improved documentation. Please see \"Other changes\" for adjustments to\r\ndefault behavior.\r\n\r\nThe new function `scipy.stats.binomtest` replaces `scipy.stats.binom_test`. The\r\nnew function returns an object that calculates a confidence intervals of the\r\nproportion parameter. Also, performance was improved from O(n) to O(log(n)) by\r\nusing binary search.\r\n\r\nThe two-sample version of the Cramer-von Mises test is implemented in\r\n`scipy.stats.cramervonmises_2samp`.\r\n\r\nThe Alexander-Govern test is implemented in the new function\r\n`scipy.stats.alexandergovern`.\r\n\r\nThe new functions `scipy.stats.barnard_exact` and  `scipy.stats. boschloo_exact`\r\nrespectively perform Barnard's exact test and Boschloo's exact test\r\nfor 2x2 contingency tables.\r\n\r\nThe new function `scipy.stats.page_trend_test` performs Page's test for ordered\r\nalternatives.\r\n\r\nThe new function `scipy.stats.somersd` performs Somers' D test for ordinal\r\nassociation between two variables.\r\n\r\nAn option, ``permutations``, has been added in `scipy.stats.ttest_ind` to\r\nperform permutation t-tests. A ``trim`` option was also added to perform\r\na trimmed (Yuen's) t-test.\r\n\r\nThe ``alternative`` parameter was added to the ``skewtest``, ``kurtosistest``,\r\n``ranksums``, ``mood``, ``ansari``, ``linregress``, and ``spearmanr`` functions\r\nto allow one-sided hypothesis testing.\r\n\r\nSample statistics\r\n-------------------\r\n\r\nThe new function `scipy.stats.differential_entropy` estimates the differential\r\nentropy of a continuous distribution from a sample.\r\n\r\nThe ``boxcox`` and ``boxcox_normmax`` now allow the user to control the\r\noptimizer used to minimize the negative log-likelihood function.\r\n\r\nA new function `scipy.stats.contingency.relative_risk` calculates the\r\nrelative risk, or risk ratio, of a 2x2 contingency table. The object\r\nreturned has a method to compute the confidence interval of the relative risk.\r\n\r\nPerformance improvements in the ``skew`` and ``kurtosis`` functions achieved\r\nby removal of repeated/redundant calculations.\r\n\r\nSubstantial performance improvements in `scipy.stats.mstats.hdquantiles_sd`.\r\n\r\nThe new function `scipy.stats.contingency.association` computes several\r\nmeasures of association for a contingency table: Pearsons contingency\r\ncoefficient, Cramer's V, and Tschuprow's T.\r\n\r\nThe parameter ``nan_policy`` was added to `scipy.stats.zmap` to provide options\r\nfor handling the occurrence of ``nan`` in the input data.\r\n\r\nThe parameter ``ddof`` was added to `scipy.stats.variation` and\r\n`scipy.stats.mstats.variation`.\r\n\r\nThe parameter ``weights`` was added to `scipy.stats.gmean`.\r\n\r\nStatistical Distributions\r\n---------------------------\r\n\r\nWe now vendor and leverage the Boost C++ library to address a number of\r\npreviously reported issues in ``stats``. Notably, ``beta``, ``binom``,\r\n``nbinom`` now have Boost backends, and it is straightforward to leverage\r\nthe backend for additional functions.\r\n\r\nThe skew Cauchy probability distribution has been implemented as\r\n`scipy.stats.skewcauchy`.\r\n\r\nThe Zipfian probability distribution has been implemented as\r\n`scipy.stats.zipfian`.\r\n\r\nThe new distributions ``nchypergeom_fisher`` and ``nchypergeom_wallenius``\r\nimplement the Fisher and Wallenius versions of the noncentral hypergeometric\r\ndistribution, respectively.\r\n\r\nThe generalized hyperbolic distribution was added in\r\n`scipy.stats.genhyperbolic`.\r\n\r\nThe studentized range distribution was added in `scipy.stats.studentized_range`.\r\n\r\n`scipy.stats.argus` now has improved handling for small parameter values.\r\n\r\nBetter argument handling/preparation has resulted in performance improvements\r\nfor many distributions.\r\n\r\nThe ``cosine`` distribution has added ufuncs for ``ppf``, ``cdf``, ``sf``, and\r\n``isf`` methods including numerical precision improvements at the edges of the\r\nsupport of the distribution.\r\n\r\nAn option to fit the distribution to data by the method of moments has been\r\nadded to the ``fit`` method of the univariate continuous distributions.\r\n\r\nOther\r\n--------\r\n`scipy.stats.bootstrap` has been added to allow estimation of the confidence\r\ninterval and standard error of a statistic.\r\n\r\nThe new function `scipy.stats.contingency.crosstab` computes a contingency\r\ntable (i.e. a table of counts of unique entries) for the given data.\r\n\r\n`scipy.stats.NumericalInverseHermite` enables fast random variate sampling\r\nand percentile point function evaluation of an arbitrary univariate statistical\r\ndistribution.\r\n\r\nNew `scipy.stats.qmc` module\r\n-------------------------------\r\n\r\nThis new module provides Quasi-Monte Carlo (QMC) generators and associated\r\nhelper functions.\r\n\r\nIt provides a generic class `scipy.stats.qmc.QMCEngine` which defines a QMC\r\nengine/sampler. An engine is state aware: it can be continued, advanced and\r\nreset. 3 base samplers are available:\r\n\r\n-  `scipy.stats.qmc.Sobol` the well known Sobol low discrepancy sequence.\r\n  Several warnings have been added to guide the user into properly using this\r\n  sampler. The sequence is scrambled by default.\r\n-  `scipy.stats.qmc.Halton`: Halton low discrepancy sequence. The sequence is\r\n  scrambled by default.\r\n-  `scipy.stats.qmc.LatinHypercube`: plain LHS design.\r\n\r\nAnd 2 special samplers are available:\r\n\r\n-  `scipy.stats.qmc.MultinomialQMC`: sampling from a multinomial distribution\r\n  using any of the base `scipy.stats.qmc.QMCEngine`.\r\n-  `scipy.stats.qmc.MultivariateNormalQMC`: sampling from a multivariate Normal\r\n  using any of the base `scipy.stats.qmc.QMCEngine`.\r\n\r\nThe module also provide the following helpers:\r\n\r\n-  `scipy.stats.qmc.discrepancy`: assess the quality of a set of points in terms\r\n  of space coverage.\r\n-  `scipy.stats.qmc.update_discrepancy`: can be used in an optimization loop to\r\n  construct a good set of points.\r\n-  `scipy.stats.qmc.scale`: easily scale a set of points from (to) the unit\r\n  interval to (from) a given range.\r\n\r\n\r\n\r\nDeprecated features\r\n---------------------\r\n\r\n`scipy.linalg` deprecations\r\n===========================\r\n\r\n-  `scipy.linalg.pinv2` is deprecated and its functionality is completely\r\n  subsumed into `scipy.linalg.pinv`\r\n-  Both ``rcond``, ``cond`` keywords of `scipy.linalg.pinv` and\r\n  `scipy.linalg.pinvh` were not working and now are deprecated. They are now\r\n  replaced with functioning ``atol`` and ``rtol`` keywords with clear usage.\r\n\r\n`scipy.spatial` deprecations\r\n============================\r\n\r\n-  `scipy.spatial.distance` metrics expect 1d input vectors but will call\r\n  ``np.squeeze`` on their inputs to accept any extra length-1 dimensions. That\r\n  behaviour is now deprecated.\r\n\r\n\r\n\r\nBackwards incompatible changes\r\n----------------------------------\r\n\r\n\r\nOther changes\r\n----------------\r\n\r\nWe now accept and leverage performance improvements from the ahead-of-time\r\nPython-to-C++ transpiler, Pythran, which can be optionally disabled (via\r\n``export SCIPY_USE_PYTHRAN=0``) but is enabled by default at build time.\r\n\r\nThere are two changes to the default behavior of `scipy.stats.mannwhitenyu`:\r\n\r\n-  For years, use of the default ``alternative=None`` was deprecated; explicit\r\n  ``alternative`` specification was required. Use of the new default value of\r\n  ``alternative``, \"two-sided\", is now permitted.\r\n-  Previously, all p-values were based on an asymptotic approximation. Now, for\r\n  small samples without ties, the p-values returned are exact by default.\r\n\r\nSupport has been added for PEP 621 (project metadata in ``pyproject.toml``)\r\n\r\nWe now support a Gitpod environment to reduce the barrier to entry for SciPy\r\ndevelopment; for more details see :ref:`quickstart-gitpod`.\r\n\r\n\r\n\r\nAuthors\r\n---------\r\n\r\n* @endolith\r\n* Jelle Aalbers +\r\n* Adam +\r\n* Tania Allard +\r\n* Sven Baars +\r\n* Max Balandat +\r\n* baumgarc +\r\n* Christoph Baumgarten\r\n* Peter Bell\r\n* Lilian Besson\r\n* Robinson Besson +\r\n* Max Bolingbroke\r\n* Blair Bonnett +\r\n* Jord\u00e3o Bragantini\r\n* Harm Buisman +\r\n* Evgeni Burovski\r\n* Matthias Bussonnier\r\n* Dominic C\r\n* CJ Carey\r\n* Ram\u00f3n Casero +\r\n* Chachay +\r\n* charlotte12l +\r\n* Benjamin Curtice Corbett +\r\n* Falcon Dai +\r\n* Ian Dall +\r\n* Terry Davis\r\n* droussea2001 +\r\n* DWesl +\r\n* dwight200 +\r\n* Thomas J. Fan +\r\n* Joseph Fox-Rabinovitz\r\n* Max Frei +\r\n* Laura Gutierrez Funderburk +\r\n* gbonomib +\r\n* Matthias Geier +\r\n* Pradipta Ghosh +\r\n* Ralf Gommers\r\n* Evan H +\r\n* h-vetinari\r\n* Matt Haberland\r\n* Anselm Hahn +\r\n* Alex Henrie\r\n* Piet Hessenius +\r\n* Trever Hines +\r\n* Elisha Hollander +\r\n* Stephan Hoyer\r\n* Tom Hu +\r\n* Kei Ishikawa +\r\n* Julien Jerphanion\r\n* Robert Kern\r\n* Shashank KS +\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Cheng H. Lee +\r\n* Gregory R. Lee\r\n* Jean-Benoist Leger +\r\n* lgfunderburk +\r\n* liam-o-marsh +\r\n* Xingyu Liu +\r\n* Alex Loftus +\r\n* Christian Lorentzen +\r\n* Cong Ma\r\n* Marc +\r\n* MarkPundurs +\r\n* Markus L\u00f6ning +\r\n* Liam Marsh +\r\n* Nicholas McKibben\r\n* melissawm +\r\n* Jamie Morton\r\n* Andrew Nelson\r\n* Nikola Forr\u00f3\r\n* Tor Nordam +\r\n* Olivier Gauth\u00e9 +\r\n* Rohit Pandey +\r\n* Avanindra Kumar Pandeya +\r\n* Tirth Patel\r\n* paugier +\r\n* Alex H. Wagner, PhD +\r\n* Jeff Plourde +\r\n* Ilhan Polat\r\n* pranavrajpal +\r\n* Vladyslav Rachek\r\n* Bharat Raghunathan\r\n* Recursing +\r\n* Tyler Reddy\r\n* Lucas Roberts\r\n* Gregor Robinson +\r\n* Pamphile Roy +\r\n* Atsushi Sakai\r\n* Benjamin Santos\r\n* Martin K. Scherer +\r\n* Thomas Schmelzer +\r\n* Daniel Scott +\r\n* Sebastian Wallk\u00f6tter +\r\n* serge-sans-paille +\r\n* Namami Shanker +\r\n* Masashi Shibata +\r\n* Alexandre de Siqueira +\r\n* Albert Steppi +\r\n* Adam J. Stewart +\r\n* Kai Striega\r\n* Diana Sukhoverkhova\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* Mike Taves\r\n* Dan Temkin +\r\n* Nicolas Tessore +\r\n* tsubota20 +\r\n* Robert Uhl\r\n* christos val +\r\n* Bas van Beek +\r\n* Ashutosh Varma +\r\n* Jose Vazquez +\r\n* Sebastiano Vigna\r\n* Aditya Vijaykumar\r\n* VNMabus\r\n* Arthur Volant +\r\n* Samuel Wallan\r\n* Stefan van der Walt\r\n* Warren Weckesser\r\n* Anreas Weh\r\n* Josh Wilson\r\n* Rory Yorke\r\n* Egor Zemlyanoy\r\n* Marc Zoeller +\r\n* zoj613 +\r\n* \u79cb\u7eab +\r\n\r\nA total of 126 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.7.0rc2", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.7.0rc2", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.7.0rc2", "url": "https://api.github.com/repos/scipy/scipy/releases/44582543", "dateCreated": "2021-06-14T02:17:35Z", "datePublished": "2021-06-14T17:39:07Z"}, {"tagName": "v1.7.0rc1", "name": "SciPy 1.7.0rc1", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.7.0 Release Notes\r\n==========================\r\n\r\n**Note**: Scipy `1.7.0` is not released yet!\r\n\r\nSciPy `1.7.0` is the culmination of 6 months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.7.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.7+` and NumPy `1.16.5` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0+` is required.\r\n\r\n\r\n## Highlights of this release\r\n\r\n\r\n-  A new submodule for quasi-Monte Carlo, `scipy.stats.qmc`, was added\r\n-  The documentation design was updated to use the same PyData-Sphinx theme as\r\n  other NumFOCUS packages like NumPy.\r\n-  We now vendor and leverage the Boost C++ library to enable numerous\r\n  improvements for long-standing weaknesses in `scipy.stats`\r\n-  `scipy.stats` has six new distributions, eight new (or overhauled)\r\n  hypothesis tests, a new function for bootstrapping, a class that enables\r\n  fast random variate sampling and percentile point function evaluation, \r\n  and many other enhancements.\r\n-  ``cdist`` and ``pdist`` distance calculations are faster for several metrics,\r\n  especially weighted cases, thanks to a rewrite to a new C++ backend framework\r\n-  A new class for radial basis function interpolation, `RBFInterpolator`, was\r\n  added to address issues with the `Rbf` class.\r\n\r\n*We gratefully acknowledge the Chan-Zuckerberg Initiative Essential Open Source\r\nSoftware for Science program for supporting many of the improvements to*\r\n`scipy.stats`.\r\n\r\n\r\n## New features\r\n\r\n\r\n### `scipy.cluster` improvements\r\n\r\nAn optional argument, ``seed``, has been added to ``kmeans`` and ``kmeans2`` to\r\nset the random generator and random state.\r\n\r\n### `scipy.interpolate` improvements\r\n\r\nImproved input validation and error messages for ``fitpack.bispev`` and\r\n``fitpack.parder`` for scenarios that previously caused substantial confusion\r\nfor users.\r\n\r\nThe class `RBFInterpolator` was added to supersede the `Rbf` class. The new\r\nclass has usage that more closely follows other interpolator classes, corrects\r\nsign errors that caused unexpected smoothing behavior, includes polynomial\r\nterms in the interpolant (which are necessary for some RBF choices), and\r\nsupports interpolation using only the k-nearest neighbors for memory\r\nefficiency.\r\n\r\n### `scipy.linalg` improvements\r\n\r\nAn LAPACK wrapper was added for access to the ``tgexc`` subroutine.\r\n\r\n### `scipy.ndimage` improvements\r\n\r\n`scipy.ndimage.affine_transform` is now able to infer the ``output_shape`` from\r\nthe ``out`` array.\r\n\r\n### `scipy.optimize` improvements\r\n\r\nThe optional parameter ``bounds`` was added to\r\n``_minimize_neldermead`` to support bounds constraints\r\nfor the Nelder-Mead solver.\r\n\r\n``trustregion`` methods ``trust-krylov``, ``dogleg`` and ``trust-ncg`` can now\r\nestimate ``hess`` by finite difference using one of\r\n``[\"2-point\", \"3-point\", \"cs\"]``.\r\n\r\n``halton`` was added as a ``sampling_method`` in `scipy.optimize.shgo`.\r\n``sobol`` was fixed and is now using `scipy.stats.qmc.Sobol`.\r\n\r\n``halton`` and ``sobol`` were added as ``init`` methods in\r\n`scipy.optimize.differential_evolution.`\r\n\r\n``differential_evolution`` now accepts an ``x0`` parameter to provide an\r\ninitial guess for the minimization.\r\n\r\n``least_squares`` has a modest performance improvement when SciPy is built\r\nwith Pythran transpiler enabled.\r\n\r\nWhen ``linprog`` is used with ``method`` ``'highs'``, ``'highs-ipm'``, or\r\n``'highs-ds'``, the result object now reports the marginals (AKA shadow\r\nprices, dual values) and residuals associated with each constraint.\r\n\r\n### `scipy.signal` improvements\r\n\r\n``get_window`` supports ``general_cosine`` and ``general_hamming`` window\r\nfunctions.\r\n\r\n`scipy.signal.medfilt2d` now releases the GIL where appropriate to enable\r\nperformance gains via multithreaded calculations.\r\n\r\n### `scipy.sparse` improvements\r\n\r\nAddition of ``dia_matrix`` sparse matrices is now faster.\r\n\r\n\r\n### `scipy.spatial` improvements\r\n\r\n``distance.cdist`` and ``distance.pdist`` performance has greatly improved for\r\ncertain weighted metrics. Namely: ``minkowski``, ``euclidean``, ``chebyshev``,\r\n``canberra``, and ``cityblock``.\r\n\r\nModest performance improvements for many of the unweighted ``cdist`` and\r\n``pdist`` metrics noted above.\r\n\r\nThe parameter ``seed`` was added to `scipy.spatial.vq.kmeans` and\r\n`scipy.spatial.vq.kmeans2`.\r\n\r\nThe parameters ``axis`` and ``keepdims`` where added to\r\n`scipy.spatial.distance.jensenshannon`.\r\n\r\nThe ``rotation`` methods ``from_rotvec`` and ``as_rotvec`` now accept a\r\n``degrees`` argument to specify usage of degrees instead of radians.\r\n\r\n### `scipy.special` improvements\r\n\r\nWright's generalized Bessel function for positive arguments was added as\r\n`scipy.special.wright_bessel.`\r\n\r\nAn implementation of the inverse of the Log CDF of the Normal Distribution is\r\nnow available via `scipy.special.ndtri_exp`.\r\n\r\n### `scipy.stats` improvements\r\n\r\n#### Hypothesis Tests\r\n\r\nThe Mann-Whitney-Wilcoxon test, ``mannwhitneyu``, has been rewritten. It now\r\nsupports n-dimensional input, an exact test method when there are no ties,\r\nand improved documentation. Please see \"Other changes\" for adjustments to\r\ndefault behavior.\r\n\r\nThe new function `scipy.stats.binomtest` replaces `scipy.stats.binom_test`. The\r\nnew function returns an object that calculates a confidence intervals of the\r\nproportion parameter. Also, performance was improved from O(n) to O(log(n)) by\r\nusing binary search.\r\n\r\nThe two-sample version of the Cramer-von Mises test is implemented in\r\n`scipy.stats.cramervonmises_2samp`.\r\n\r\nThe Alexander-Govern test is implemented in the new function\r\n`scipy.stats.alexandergovern`.\r\n\r\nThe new functions `scipy.stats.barnard_exact` and  `scipy.stats. boschloo_exact`\r\nrespectively perform Barnard's exact test and Boschloo's exact test\r\nfor 2x2 contingency tables.\r\n\r\nThe new function `scipy.stats.page_trend_test` performs Page's test for ordered\r\nalternatives.\r\n\r\nThe new function `scipy.stats.somersd` performs Somers' D test for ordinal\r\nassociation between two variables.\r\n\r\nAn option, ``permutations``, has been added in `scipy.stats.ttest_ind` to\r\nperform permutation t-tests. A ``trim`` option was also added to perform\r\na trimmed (Yuen's) t-test.\r\n\r\nThe ``alternative`` parameter was added to the ``skewtest``, ``kurtosistest``,\r\n``ranksums``, ``mood``, ``ansari``, ``linregress``, and ``spearmanr`` functions\r\nto allow one-sided hypothesis testing.\r\n\r\n#### Sample statistics\r\n\r\nThe new function `scipy.stats.differential_entropy` estimates the differential\r\nentropy of a continuous distribution from a sample.\r\n\r\nThe ``boxcox`` and ``boxcox_normmax`` now allow the user to control the\r\noptimizer used to minimize the negative log-likelihood function.\r\n\r\nA new function `scipy.stats.contingency.relative_risk` calculates the\r\nrelative risk, or risk ratio, of a 2x2 contingency table. The object\r\nreturned has a method to compute the confidence interval of the relative risk.\r\n\r\nPerformance improvements in the ``skew`` and ``kurtosis`` functions achieved\r\nby removal of repeated/redundant calculations.\r\n\r\nSubstantial performance improvements in `scipy.stats.mstats.hdquantiles_sd`.\r\n\r\nThe new function `scipy.stats.contingency.association` computes several\r\nmeasures of association for a contingency table: Pearsons contingency\r\ncoefficient, Cramer's V, and Tschuprow's T.\r\n\r\nThe parameter ``nan_policy`` was added to `scipy.stats.zmap` to provide options\r\nfor handling the occurrence of ``nan`` in the input data.\r\n\r\nThe parameter ``ddof`` was added to `scipy.stats.variation` and\r\n`scipy.stats.mstats.variation`.\r\n\r\nThe parameter ``weights`` was added to `scipy.stats.gmean`.\r\n\r\n#### Statistical Distributions\r\n\r\nWe now vendor and leverage the Boost C++ library to address a number of\r\npreviously reported issues in ``stats``. Notably, ``beta``, ``binom``,\r\n``nbinom`` now have Boost backends, and it is straightforward to leverage\r\nthe backend for additional functions.\r\n\r\nThe skew Cauchy probability distribution has been implemented as\r\n`scipy.stats.skewcauchy`.\r\n\r\nThe Zipfian probability distribution has been implemented as\r\n`scipy.stats.zipfian`.\r\n\r\nThe new distributions ``nchypergeom_fisher`` and ``nchypergeom_wallenius``\r\nimplement the Fisher and Wallenius versions of the noncentral hypergeometric\r\ndistribution, respectively.\r\n\r\nThe generalized hyperbolic distribution was added in\r\n`scipy.stats.genhyperbolic`.\r\n\r\nThe studentized range distribution was added in `scipy.stats.studentized_range`.\r\n\r\n`scipy.stats.argus` now has improved handling for small parameter values.\r\n\r\nBetter argument handling/preparation has resulted in performance improvements\r\nfor many distributions.\r\n\r\nThe ``cosine`` distribution has added ufuncs for ``ppf``, ``cdf``, ``sf``, and\r\n``isf`` methods including numerical precision improvements at the edges of the\r\nsupport of the distribution.\r\n\r\nAn option to fit the distribution to data by the method of moments has been\r\nadded to the ``fit`` method of the univariate continuous distributions.\r\n\r\n#### Other\r\n\r\n`scipy.stats.bootstrap` has been added to allow estimation of the confidence\r\ninterval and standard error of a statistic.\r\n\r\nThe new function `scipy.stats.contingency.crosstab` computes a contingency\r\ntable (i.e. a table of counts of unique entries) for the given data.\r\n\r\n`scipy.stats.NumericalInverseHermite` enables fast random variate sampling\r\nand percentile point function evaluation of an arbitrary univariate statistical\r\ndistribution.\r\n\r\n#### New `scipy.stats.qmc` module\r\n\r\nThis new module provides Quasi-Monte Carlo (QMC) generators and associated\r\nhelper functions.\r\n\r\nIt provides a generic class `scipy.stats.qmc.QMCEngine` which defines a QMC\r\nengine/sampler. An engine is state aware: it can be continued, advanced and\r\nreset. 3 base samplers are available:\r\n\r\n-  `scipy.stats.qmc.Sobol` the well known Sobol low discrepancy sequence.\r\n  Several warnings have been added to guide the user into properly using this\r\n  sampler. The sequence is scrambled by default.\r\n-  `scipy.stats.qmc.Halton`: Halton low discrepancy sequence. The sequence is\r\n  scrambled by default.\r\n-  `scipy.stats.qmc.LatinHypercube`: plain LHS design.\r\n\r\nAnd 2 special samplers are available:\r\n\r\n-  `scipy.stats.qmc.MultinomialQMC`: sampling from a multinomial distribution\r\n  using any of the base `scipy.stats.qmc.QMCEngine`.\r\n-  `scipy.stats.qmc.MultivariateNormalQMC`: sampling from a multivariate Normal\r\n  using any of the base `scipy.stats.qmc.QMCEngine`.\r\n\r\nThe module also provide the following helpers:\r\n\r\n-  `scipy.stats.qmc.discrepancy`: assess the quality of a set of points in terms\r\n  of space coverage.\r\n-  `scipy.stats.qmc.update_discrepancy`: can be used in an optimization loop to\r\n  construct a good set of points.\r\n-  `scipy.stats.qmc.scale`: easily scale a set of points from (to) the unit\r\n  interval to (from) a given range.\r\n\r\n\r\n\r\n## Deprecated features\r\n\r\n\r\n### `scipy.linalg` deprecations\r\n\r\n-  `scipy.linalg.pinv2` is deprecated and its functionality is completely\r\n  subsumed into `scipy.linalg.pinv`\r\n-  Both ``rcond``, ``cond`` keywords of `scipy.linalg.pinv` and\r\n  `scipy.linalg.pinvh` were not working and now are deprecated. They are now\r\n  replaced with functioning ``atol`` and ``rtol`` keywords with clear usage.\r\n\r\n### `scipy.spatial` deprecations\r\n\r\n-  `scipy.spatial.distance` metrics expect 1d input vectors but will call\r\n  ``np.squeeze`` on their inputs to accept any extra length-1 dimensions. That\r\n  behaviour is now deprecated.\r\n\r\n\r\n## Backwards incompatible changes\r\n\r\n## Other changes\r\n\r\nWe now accept and leverage performance improvements from the ahead-of-time\r\nPython-to-C++ transpiler, Pythran, which can be optionally disabled (via\r\n``export SCIPY_USE_PYTHRAN=0``) but is enabled by default at build time.\r\n\r\nThere are two changes to the default behavior of `scipy.stats.mannwhitenyu`:\r\n\r\n-  For years, use of the default ``alternative=None`` was deprecated; explicit\r\n  ``alternative`` specification was required. Use of the new default value of\r\n  ``alternative``, \"two-sided\", is now permitted.\r\n-  Previously, all p-values were based on an asymptotic approximation. Now, for\r\n  small samples without ties, the p-values returned are exact by default.\r\n\r\nSupport has been added for PEP 621 (project metadata in ``pyproject.toml``)\r\n\r\nWe now support a Gitpod environment to reduce the barrier to entry for SciPy\r\ndevelopment; for more details see `quickstart-gitpod`.\r\n\r\n\r\n\r\n## Authors\r\n\r\n* @endolith\r\n* Jelle Aalbers +\r\n* Adam +\r\n* Tania Allard +\r\n* Sven Baars +\r\n* Max Balandat +\r\n* baumgarc +\r\n* Christoph Baumgarten\r\n* Peter Bell\r\n* Lilian Besson\r\n* Robinson Besson +\r\n* Max Bolingbroke\r\n* Blair Bonnett +\r\n* Jord\u00e3o Bragantini\r\n* Harm Buisman +\r\n* Evgeni Burovski\r\n* Matthias Bussonnier\r\n* Dominic C\r\n* CJ Carey\r\n* Ram\u00f3n Casero +\r\n* Chachay +\r\n* charlotte12l +\r\n* Benjamin Curtice Corbett +\r\n* Falcon Dai +\r\n* Ian Dall +\r\n* Terry Davis\r\n* droussea2001 +\r\n* DWesl +\r\n* dwight200 +\r\n* Thomas J. Fan +\r\n* Joseph Fox-Rabinovitz\r\n* Max Frei +\r\n* Laura Gutierrez Funderburk +\r\n* gbonomib +\r\n* Matthias Geier +\r\n* Pradipta Ghosh +\r\n* Ralf Gommers\r\n* Evan H +\r\n* h-vetinari\r\n* Matt Haberland\r\n* Anselm Hahn +\r\n* Alex Henrie\r\n* Piet Hessenius +\r\n* Trever Hines +\r\n* Elisha Hollander +\r\n* Stephan Hoyer\r\n* Tom Hu +\r\n* Kei Ishikawa +\r\n* Julien Jerphanion\r\n* Robert Kern\r\n* Shashank KS +\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Cheng H. Lee +\r\n* Gregory R. Lee\r\n* Jean-Benoist Leger +\r\n* lgfunderburk +\r\n* liam-o-marsh +\r\n* Xingyu Liu +\r\n* Alex Loftus +\r\n* Christian Lorentzen +\r\n* Cong Ma\r\n* Marc +\r\n* MarkPundurs +\r\n* Markus L\u00f6ning +\r\n* Liam Marsh +\r\n* Nicholas McKibben\r\n* melissawm +\r\n* Jamie Morton\r\n* Andrew Nelson\r\n* Nikola Forr\u00f3\r\n* Tor Nordam +\r\n* Olivier Gauth\u00e9 +\r\n* Rohit Pandey +\r\n* Avanindra Kumar Pandeya +\r\n* Tirth Patel\r\n* paugier +\r\n* Alex H. Wagner, PhD +\r\n* Jeff Plourde +\r\n* Ilhan Polat\r\n* pranavrajpal +\r\n* Vladyslav Rachek\r\n* Bharat Raghunathan\r\n* Recursing +\r\n* Tyler Reddy\r\n* Lucas Roberts\r\n* Gregor Robinson +\r\n* Pamphile Roy +\r\n* Atsushi Sakai\r\n* Benjamin Santos\r\n* Martin K. Scherer +\r\n* Thomas Schmelzer +\r\n* Daniel Scott +\r\n* Sebastian Wallk\u00f6tter +\r\n* serge-sans-paille +\r\n* Namami Shanker +\r\n* Masashi Shibata +\r\n* Alexandre de Siqueira +\r\n* Albert Steppi +\r\n* Adam J. Stewart +\r\n* Kai Striega\r\n* Diana Sukhoverkhova\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* Mike Taves\r\n* Dan Temkin +\r\n* Nicolas Tessore +\r\n* tsubota20 +\r\n* Robert Uhl\r\n* christos val +\r\n* Bas van Beek +\r\n* Ashutosh Varma +\r\n* Jose Vazquez +\r\n* Sebastiano Vigna\r\n* Aditya Vijaykumar\r\n* VNMabus\r\n* Arthur Volant +\r\n* Samuel Wallan\r\n* Stefan van der Walt\r\n* Warren Weckesser\r\n* Anreas Weh\r\n* Josh Wilson\r\n* Rory Yorke\r\n* Egor Zemlyanoy\r\n* Marc Zoeller +\r\n* zoj613 +\r\n* \u79cb\u7eab +\r\n\r\nA total of 126 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.7.0rc1", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.7.0rc1", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.7.0rc1", "url": "https://api.github.com/repos/scipy/scipy/releases/44169993", "dateCreated": "2021-06-06T02:25:30Z", "datePublished": "2021-06-06T18:21:07Z"}, {"tagName": "v1.6.3", "name": "SciPy 1.6.3", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.6.3 Release Notes\r\n===================\r\n\r\nSciPy `1.6.3` is a bug-fix release with no new features\r\ncompared to `1.6.2`.\r\n\r\nAuthors\r\n======\r\n\r\n* Peter Bell\r\n* Ralf Gommers\r\n* Matt Haberland\r\n* Peter Mahler Larsen\r\n* Tirth Patel\r\n* Tyler Reddy\r\n* Pamphile ROY +\r\n* Xingyu Liu +\r\n\r\nA total of 8 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.6.3", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.6.3", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.6.3", "url": "https://api.github.com/repos/scipy/scipy/releases/41977939", "dateCreated": "2021-04-25T21:12:19Z", "datePublished": "2021-04-26T02:11:23Z"}, {"tagName": "v1.6.2", "name": "SciPy 1.6.2", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.6.2 Release Notes\r\n===================\r\n\r\nSciPy `1.6.2` is a bug-fix release with no new features\r\ncompared to `1.6.1`. This is also the first SciPy release\r\nto place upper bounds on some dependencies to improve\r\nthe long-term repeatability of source builds.\r\n\r\nAuthors\r\n=======\r\n\r\n* Pradipta Ghosh +\r\n* Tyler Reddy\r\n* Ralf Gommers\r\n* Martin K. Scherer +\r\n* Robert Uhl\r\n* Warren Weckesser\r\n\r\nA total of 6 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.6.2", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.6.2", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.6.2", "url": "https://api.github.com/repos/scipy/scipy/releases/40388202", "dateCreated": "2021-03-21T22:03:44Z", "datePublished": "2021-03-25T02:04:06Z"}, {"tagName": "v1.6.1", "name": "SciPy 1.6.1", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.6.1 Release Notes\r\n===================\r\n\r\n\r\nSciPy `1.6.1` is a bug-fix release with no new features\r\ncompared to `1.6.0`.\r\n\r\nPlease note that for SciPy wheels to correctly install with pip on\r\nmacOS 11, pip `>= 20.3.3` is needed.\r\n\r\nAuthors\r\n=======\r\n\r\n* Peter Bell\r\n* Evgeni Burovski\r\n* CJ Carey\r\n* Ralf Gommers\r\n* Peter Mahler Larsen\r\n* Cheng H. Lee +\r\n* Cong Ma\r\n* Nicholas McKibben\r\n* Nikola Forr\u00f3\r\n* Tyler Reddy\r\n* Warren Weckesser\r\n\r\nA total of 11 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.6.1", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.6.1", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.6.1", "url": "https://api.github.com/repos/scipy/scipy/releases/38204026", "dateCreated": "2021-02-16T17:17:59Z", "datePublished": "2021-02-18T03:16:09Z"}, {"tagName": "v1.6.0", "name": "SciPy 1.6.0", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.6.0 Release Notes\r\n=================\r\n\r\nSciPy `1.6.0` is the culmination of 6 months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n`1.6.x` branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.7+` and NumPy `1.16.5` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0+` is required.\r\n\r\nHighlights of this release\r\n-----------------------------\r\n\r\n-  `scipy.ndimage` improvements: Fixes and ehancements to boundary extension \r\n  modes for interpolation functions. Support for complex-valued inputs in many\r\n  filtering and interpolation functions. New ``grid_mode`` option for \r\n  `scipy.ndimage.zoom` to enable results consistent with scikit-image's \r\n  ``rescale``.\r\n-  `scipy.optimize.linprog` has fast, new methods for large, sparse problems \r\n  from the ``HiGHS`` library.\r\n-  `scipy.stats` improvements including new distributions, a new test, and\r\n  enhancements to existing distributions and tests\r\n\r\n\r\nNew features\r\n=========\r\n\r\n`scipy.special` improvements\r\n--------------------------------\r\n`scipy.special` now has improved support for 64-bit ``LAPACK`` backend\r\n\r\n`scipy.odr` improvements\r\n-----------------------------\r\n`scipy.odr` now has support for 64-bit integer ``BLAS``\r\n\r\n`scipy.odr.ODR` has gained an optional ``overwrite`` argument so that existing\r\nfiles may be overwritten.\r\n\r\n`scipy.integrate` improvements\r\n-----------------------------------\r\nSome renames of functions with poor names were done, with the old names \r\nretained without being in the reference guide for backwards compatibility \r\nreasons:\r\n-  ``integrate.simps`` was renamed to ``integrate.simpson``\r\n-  ``integrate.trapz`` was renamed to ``integrate.trapezoid``\r\n-  ``integrate.cumtrapz`` was renamed to ``integrate.cumulative_trapezoid``\r\n\r\n`scipy.cluster` improvements\r\n---------------------------------\r\n`scipy.cluster.hierarchy.DisjointSet` has been added for incremental \r\nconnectivity queries.\r\n\r\n`scipy.cluster.hierarchy.dendrogram` return value now also includes leaf color\r\ninformation in `leaves_color_list`.\r\n\r\n`scipy.interpolate` improvements\r\n-------------------------------------\r\n`scipy.interpolate.interp1d` has a new method ``nearest-up``, similar to the \r\nexisting method ``nearest`` but rounds half-integers up instead of down.\r\n\r\n`scipy.io` improvements\r\n---------------------------\r\nSupport has been added for reading arbitrary bit depth integer PCM WAV files \r\nfrom 1- to 32-bit, including the commonly-requested 24-bit depth.\r\n\r\n`scipy.linalg` improvements\r\n-------------------------------\r\nThe new function `scipy.linalg.matmul_toeplitz` uses the FFT to compute the \r\nproduct of a Toeplitz matrix with another matrix.\r\n\r\n`scipy.linalg.sqrtm` and `scipy.linalg.logm` have performance improvements\r\nthanks to additional Cython code.\r\n\r\nPython ``LAPACK`` wrappers have been added for ``pptrf``, ``pptrs``, ``ppsv``,\r\n``pptri``, and ``ppcon``.\r\n\r\n`scipy.linalg.norm` and the ``svd`` family of functions will now use 64-bit\r\ninteger backends when available.\r\n\r\n`scipy.ndimage` improvements\r\n-----------------------------------\r\n`scipy.ndimage.convolve`, `scipy.ndimage.correlate` and their 1d counterparts \r\nnow accept both complex-valued images and/or complex-valued filter kernels. All \r\nconvolution-based filters also now accept complex-valued inputs \r\n(e.g. ``gaussian_filter``, ``uniform_filter``, etc.).\r\n\r\nMultiple fixes and enhancements to boundary handling were introduced to \r\n`scipy.ndimage` interpolation functions (i.e. ``affine_transform``,\r\n``geometric_transform``, ``map_coordinates``, ``rotate``, ``shift``, ``zoom``).\r\n\r\nA new boundary mode, ``grid-wrap`` was added which wraps images periodically,\r\nusing a period equal to the shape of the input image grid. This is in contrast \r\nto the existing ``wrap`` mode which uses a period that is one sample smaller \r\nthan the original signal extent along each dimension.\r\n\r\nA long-standing bug in the ``reflect`` boundary condition has been fixed and \r\nthe mode ``grid-mirror`` was introduced as a synonym for ``reflect``.\r\n\r\nA new boundary mode, ``grid-constant`` is now available. This is similar to \r\nthe existing ndimage ``constant`` mode, but interpolation will still performed \r\nat coordinate values outside of the original image extent. This \r\n``grid-constant`` mode is consistent with OpenCV's ``BORDER_CONSTANT`` mode \r\nand scikit-image's ``constant`` mode.\r\n\r\nSpline pre-filtering (used internally by ``ndimage`` interpolation functions \r\nwhen ``order >= 2``), now supports all boundary modes rather than always \r\ndefaulting to mirror boundary conditions. The standalone functions \r\n``spline_filter`` and ``spline_filter1d`` have analytical boundary conditions \r\nthat match modes ``mirror``, ``grid-wrap`` and ``reflect``.\r\n\r\n`scipy.ndimage` interpolation functions now accept complex-valued inputs. In\r\nthis case, the interpolation is applied independently to the real and \r\nimaginary components.\r\n\r\nThe ``ndimage`` tutorials \r\n(https://docs.scipy.org/doc/scipy/reference/tutorial/ndimage.html) have been \r\nupdated with new figures to better clarify the exact behavior of all of the \r\ninterpolation boundary modes.\r\n\r\n`scipy.ndimage.zoom` now has a ``grid_mode`` option that changes the coordinate \r\nof the center of the first pixel along an axis from 0 to 0.5. This allows \r\nresizing in a manner that is consistent with the behavior of scikit-image's \r\n``resize`` and ``rescale`` functions (and OpenCV's ``cv2.resize``).\r\n\r\n`scipy.optimize` improvements\r\n-----------------------------------\r\n`scipy.optimize.linprog` has fast, new methods for large, sparse problems from \r\nthe ``HiGHS`` C++ library. ``method='highs-ds'`` uses a high performance dual \r\nrevised simplex implementation (HSOL), ``method='highs-ipm'`` uses an \r\ninterior-point method with crossover, and ``method='highs'`` chooses between \r\nthe two automatically. These methods are typically much faster and often exceed \r\nthe accuracy of other ``linprog`` methods, so we recommend explicitly \r\nspecifying one of these three method values when using ``linprog``.\r\n\r\n`scipy.optimize.quadratic_assignment` has been added for approximate solution \r\nof the quadratic assignment problem.\r\n\r\n`scipy.optimize.linear_sum_assignment` now has a substantially reduced overhead\r\nfor small cost matrix sizes\r\n\r\n`scipy.optimize.least_squares` has improved performance when the user provides\r\nthe jacobian as a sparse jacobian already in ``csr_matrix`` format\r\n\r\n`scipy.optimize.linprog` now has an ``rr_method`` argument for specification\r\nof the method used for redundancy handling, and a new method for this purpose\r\nis available based on the interpolative decomposition approach.\r\n\r\n`scipy.signal` improvements\r\n--------------------------------\r\n`scipy.signal.gammatone` has been added to design FIR or IIR filters that \r\nmodel the human auditory system.\r\n\r\n`scipy.signal.iircomb` has been added to design IIR peaking/notching comb \r\nfilters that can boost/attenuate a frequency from a signal.\r\n\r\n`scipy.signal.sosfilt` performance has been improved to avoid some previously-\r\nobserved slowdowns\r\n\r\n`scipy.signal.windows.taylor` has been added--the Taylor window function is\r\ncommonly used in radar digital signal processing\r\n\r\n`scipy.signal.gauss_spline` now supports ``list`` type input for consistency\r\nwith other related SciPy functions\r\n\r\n`scipy.signal.correlation_lags` has been added to allow calculation of the lag/\r\ndisplacement indices array for 1D cross-correlation.\r\n\r\n`scipy.sparse` improvements\r\n--------------------------------\r\nA solver for the minimum weight full matching problem for bipartite graphs,\r\nalso known as the linear assignment problem, has been added in\r\n`scipy.sparse.csgraph.min_weight_full_bipartite_matching`. In particular, this\r\nprovides functionality analogous to that of\r\n`scipy.optimize.linear_sum_assignment`, but with improved performance for sparse\r\ninputs, and the ability to handle inputs whose dense representations would not\r\nfit in memory.\r\n\r\nThe time complexity of `scipy.sparse.block_diag` has been improved dramatically\r\nfrom quadratic to linear.\r\n\r\n`scipy.sparse.linalg` improvements\r\n--------------------------------------\r\nThe vendored version of ``SuperLU`` has been updated\r\n\r\n`scipy.fft` improvements\r\n----------------------------\r\n\r\nThe vendored ``pocketfft`` library now supports compiling with ARM neon vector\r\nextensions and has improved thread pool behavior.\r\n\r\n`scipy.spatial` improvements\r\n---------------------------------\r\nThe python implementation of ``KDTree`` has been dropped and ``KDTree`` is now \r\nimplemented in terms of ``cKDTree``. You can now expect ``cKDTree``-like \r\nperformance by default. This also means ``sys.setrecursionlimit`` no longer \r\nneeds to be increased for querying large trees.\r\n\r\n``transform.Rotation`` has been updated with support for Modified Rodrigues \r\nParameters alongside the existing rotation representations (PR gh-12667).\r\n\r\n`scipy.spatial.transform.Rotation` has been partially cythonized, with some\r\nperformance improvements observed\r\n\r\n`scipy.spatial.distance.cdist` has improved performance with the ``minkowski``\r\nmetric, especially for p-norm values of 1 or 2.\r\n\r\n`scipy.stats` improvements\r\n------------------------------\r\nNew distributions have been added to `scipy.stats`:\r\n\r\n-  The asymmetric Laplace continuous distribution has been added as \r\n  `scipy.stats.laplace_asymmetric`.\r\n-  The negative hypergeometric distribution has been added as `scipy.stats.nhypergeom`.\r\n-  The multivariate t distribution has been added as `scipy.stats.multivariate_t`.\r\n-  The multivariate hypergeometric distribution has been added as `scipy.stats.multivariate_hypergeom`.\r\n\r\nThe ``fit`` method has been overridden for several distributions (``laplace``,\r\n``pareto``, ``rayleigh``, ``invgauss``, ``logistic``, ``gumbel_l``, \r\n``gumbel_r``); they now use analytical, distribution-specific maximum \r\nlikelihood estimation results for greater speed and accuracy than the generic \r\n(numerical optimization) implementation.\r\n\r\nThe one-sample Cram\u00e9r-von Mises test has been added as \r\n`scipy.stats.cramervonmises`.\r\n\r\nAn option to compute one-sided p-values was added to `scipy.stats.ttest_1samp`, \r\n`scipy.stats.ttest_ind_from_stats`, `scipy.stats.ttest_ind` and \r\n`scipy.stats.ttest_rel`.\r\n\r\nThe function `scipy.stats.kendalltau` now has an option to compute Kendall's \r\ntau-c (also known as Stuart's tau-c), and support has been added for exact\r\np-value calculations for sample sizes ``> 171``.\r\n\r\n`stats.trapz` was renamed to `stats.trapezoid`, with the former name retained \r\nas an alias for backwards compatibility reasons.\r\n\r\nThe function `scipy.stats.linregress` now includes the standard error of the \r\nintercept in its return value.\r\n\r\nThe ``_logpdf``, ``_sf``, and ``_isf`` methods have been added to\r\n`scipy.stats.nakagami`; ``_sf`` and ``_isf`` methods also added to\r\n`scipy.stats.gumbel_r`\r\n\r\nThe ``sf`` method has been added to `scipy.stats.levy` and `scipy.stats.levy_l`\r\nfor improved precision.\r\n\r\n`scipy.stats.binned_statistic_dd` performance improvements for the following\r\ncomputed statistics: ``max``, ``min``, ``median``, and ``std``.\r\n\r\nWe gratefully acknowledge the Chan-Zuckerberg Initiative Essential Open Source \r\nSoftware for Science program for supporting many of these improvements to \r\n`scipy.stats`.\r\n\r\nDeprecated features\r\n==============\r\n\r\n`scipy.spatial` changes\r\n--------------------------\r\nCalling ``KDTree.query`` with ``k=None`` to find all neighbours is deprecated. \r\nUse ``KDTree.query_ball_point`` instead.\r\n\r\n``distance.wminkowski`` was deprecated; use ``distance.minkowski`` and supply \r\nweights with the ``w`` keyword instead.\r\n\r\nBackwards incompatible changes\r\n======================\r\n\r\n`scipy` changes\r\n------------------\r\nUsing `scipy.fft` as a function aliasing ``numpy.fft.fft`` was removed after \r\nbeing deprecated in SciPy ``1.4.0``. As a result, the `scipy.fft` submodule \r\nmust be explicitly imported now, in line with other SciPy subpackages.\r\n\r\n`scipy.signal` changes\r\n-------------------------\r\nThe output of ``decimate``, ``lfilter_zi``, ``lfiltic``, ``sos2tf``, and \r\n``sosfilt_zi`` have been changed to match ``numpy.result_type`` of their inputs. \r\n\r\nThe window function ``slepian`` was removed. It had been deprecated since SciPy \r\n``1.1``.\r\n\r\n`scipy.spatial` changes\r\n--------------------------\r\n``cKDTree.query`` now returns 64-bit rather than 32-bit integers on Windows,\r\nmaking behaviour consistent between platforms (PR gh-12673).\r\n\r\n\r\n`scipy.stats` changes\r\n------------------------\r\nThe ``frechet_l`` and ``frechet_r`` distributions were removed. They were \r\ndeprecated since SciPy ``1.0``.\r\n\r\nOther changes\r\n==========\r\n``setup_requires`` was removed from ``setup.py``. This means that users \r\ninvoking ``python setup.py install`` without having numpy already installed \r\nwill now get an error, rather than having numpy installed for them via \r\n``easy_install``. This install method was always fragile and problematic, users \r\nare encouraged to use ``pip`` when installing from source.\r\n\r\n-  Fixed a bug in `scipy.optimize.dual_annealing` ``accept_reject`` calculation \r\n  that caused uphill jumps to be accepted less frequently.\r\n-  The time required for (un)pickling of `scipy.stats.rv_continuous`, \r\n  `scipy.stats.rv_discrete`, and `scipy.stats.rv_frozen` has been significantly\r\n  reduced (gh12550). Inheriting subclasses should note that ``__setstate__`` no \r\n  longer calls ``__init__`` upon unpickling.\r\n\r\nAuthors\r\n=======\r\n\r\n* @endolith\r\n* @vkk800\r\n* aditya +\r\n* George Bateman +\r\n* Christoph Baumgarten\r\n* Peter Bell\r\n* Tobias Biester +\r\n* Keaton J. Burns +\r\n* Evgeni Burovski\r\n* R\u00fcdiger Busche +\r\n* Matthias Bussonnier\r\n* Dominic C +\r\n* Corallus Caninus +\r\n* CJ Carey\r\n* Thomas A Caswell\r\n* chapochn +\r\n* Luc\u00eda Cheung\r\n* Zach Colbert +\r\n* Coloquinte +\r\n* Yannick Copin +\r\n* Devin Crowley +\r\n* Terry Davis +\r\n* Micha\u00ebl Defferrard +\r\n* devonwp +\r\n* Didier +\r\n* divenex +\r\n* Thomas Duvernay +\r\n* Eoghan O'Connell +\r\n* G\u00f6k\u00e7en Eraslan\r\n* Kristian Eschenburg +\r\n* Ralf Gommers\r\n* Thomas Grainger +\r\n* GreatV +\r\n* Gregory Gundersen +\r\n* h-vetinari +\r\n* Matt Haberland\r\n* Mark Harfouche +\r\n* He He +\r\n* Alex Henrie\r\n* Chun-Ming Huang +\r\n* Martin James McHugh III +\r\n* Alex Izvorski +\r\n* Joey +\r\n* ST John +\r\n* Jonas Jonker +\r\n* Julius Bier Kirkegaard\r\n* Marcin Konowalczyk +\r\n* Konrad0\r\n* Sam Van Kooten +\r\n* Sergey Koposov +\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory R. Lee\r\n* Lo\u00efc Est\u00e8ve\r\n* Jean-Luc Margot +\r\n* MarkusKoebis +\r\n* Nikolay Mayorov\r\n* G. D. McBain\r\n* Andrew McCluskey +\r\n* Nicholas McKibben\r\n* Sturla Molden\r\n* Denali Molitor +\r\n* Eric Moore\r\n* Shashaank N +\r\n* Prashanth Nadukandi +\r\n* nbelakovski +\r\n* Andrew Nelson\r\n* Nick +\r\n* Nikola Forr\u00f3 +\r\n* odidev\r\n* ofirr +\r\n* Sambit Panda\r\n* Dima Pasechnik\r\n* Tirth Patel +\r\n* Matti Picus\r\n* Pawe\u0142 Redzy\u0144ski +\r\n* Vladimir Philipenko +\r\n* Philipp Th\u00f6lke +\r\n* Ilhan Polat\r\n* Eugene Prilepin +\r\n* Vladyslav Rachek\r\n* Ram Rachum +\r\n* Tyler Reddy\r\n* Martin Reinecke +\r\n* Simon Segerblom Rex +\r\n* Lucas Roberts\r\n* Benjamin Rowell +\r\n* Eli Rykoff +\r\n* Atsushi Sakai\r\n* Moritz Schulte +\r\n* Daniel B. Smith\r\n* Steve Smith +\r\n* Jan Soedingrekso +\r\n* Victor Stinner +\r\n* Jose Storopoli +\r\n* Diana Sukhoverkhova +\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* taoky +\r\n* Mike Taves +\r\n* Ian Thomas +\r\n* Will Tirone +\r\n* Frank Torres +\r\n* Seth Troisi\r\n* Ronald van Elburg +\r\n* Hugo van Kemenade\r\n* Paul van Mulbregt\r\n* Saul Ivan Rivas Vega +\r\n* Pauli Virtanen\r\n* Jan Vleeshouwers\r\n* Samuel Wallan\r\n* Warren Weckesser\r\n* Ben West +\r\n* Eric Wieser\r\n* WillTirone +\r\n* Levi John Wolf +\r\n* Zhiqing Xiao\r\n* Rory Yorke +\r\n* Yun Wang (Maigo) +\r\n* Egor Zemlyanoy +\r\n* ZhihuiChen0903 +\r\n* Jacob Zhong +\r\n\r\nA total of 122 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.6.0", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.6.0", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.6.0", "url": "https://api.github.com/repos/scipy/scipy/releases/35877789", "dateCreated": "2020-12-30T23:09:19Z", "datePublished": "2020-12-31T15:02:43Z"}, {"tagName": "v1.6.0rc2", "name": "SciPy 1.6.0rc2", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.6.0 Release Notes\r\n==========================\r\n\r\n**note**: Scipy `1.6.0` is not released yet!\r\n\r\nSciPy `1.6.0` is the culmination of `6` months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n`1.6.x` branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.7`+ and NumPy `1.16.5` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0`+ is required.\r\n\r\nHighlights of this release\r\n----------------------------\r\n\r\n-  `scipy.ndimage` improvements: Fixes and ehancements to boundary extension \r\n  modes for interpolation functions. Support for complex-valued inputs in many\r\n  filtering and interpolation functions. New ``grid_mode`` option for \r\n  `scipy.ndimage.zoom` to enable results consistent with scikit-image's \r\n  ``rescale``.\r\n-  `scipy.optimize.linprog` has fast, new methods for large, sparse problems \r\n  from the ``HiGHS`` library.\r\n-  `scipy.stats` improvements including new distributions, a new test, and\r\n  enhancements to existing distributions and tests\r\n\r\n\r\nNew features\r\n=========\r\n\r\n`scipy.special` improvements\r\n---------------------------------\r\n`scipy.special` now has improved support for 64-bit ``LAPACK`` backend\r\n\r\n`scipy.odr` improvements\r\n-----------------------------\r\n`scipy.odr` now has support for 64-bit integer ``BLAS``\r\n\r\n`scipy.odr.ODR` has gained an optional ``overwrite`` argument so that existing\r\nfiles may be overwritten.\r\n\r\n`scipy.integrate` improvements\r\n-----------------------------------\r\nSome renames of functions with poor names were done, with the old names \r\nretained without being in the reference guide for backwards compatibility \r\nreasons:\r\n-  ``integrate.simps`` was renamed to ``integrate.simpson``\r\n-  ``integrate.trapz`` was renamed to ``integrate.trapezoid``\r\n-  ``integrate.cumtrapz`` was renamed to ``integrate.cumulative_trapezoid``\r\n\r\n`scipy.cluster` improvements\r\n--------------------------------\r\n`scipy.cluster.hierarchy.DisjointSet` has been added for incremental \r\nconnectivity queries.\r\n\r\n`scipy.cluster.hierarchy.dendrogram` return value now also includes leaf color\r\ninformation in `leaves_color_list`.\r\n\r\n`scipy.interpolate` improvements\r\n-------------------------------------\r\n`scipy.interpolate.interp1d` has a new method ``nearest-up``, similar to the \r\nexisting method ``nearest`` but rounds half-integers up instead of down.\r\n\r\n`scipy.io` improvements\r\n---------------------------\r\nSupport has been added for reading arbitrary bit depth integer PCM WAV files \r\nfrom 1- to 32-bit, including the commonly-requested 24-bit depth.\r\n\r\n`scipy.linalg` improvements\r\n-------------------------------\r\nThe new function `scipy.linalg.matmul_toeplitz` uses the FFT to compute the \r\nproduct of a Toeplitz matrix with another matrix.\r\n\r\n`scipy.linalg.sqrtm` and `scipy.linalg.logm` have performance improvements\r\nthanks to additional Cython code.\r\n\r\nPython ``LAPACK`` wrappers have been added for ``pptrf``, ``pptrs``, ``ppsv``,\r\n``pptri``, and ``ppcon``.\r\n\r\n`scipy.linalg.norm` and the ``svd`` family of functions will now use 64-bit\r\ninteger backends when available.\r\n\r\n`scipy.ndimage` improvements\r\n-----------------------------------\r\n`scipy.ndimage.convolve`, `scipy.ndimage.correlate` and their 1d counterparts \r\nnow accept both complex-valued images and/or complex-valued filter kernels. All \r\nconvolution-based filters also now accept complex-valued inputs \r\n(e.g. ``gaussian_filter``, ``uniform_filter``, etc.).\r\n\r\nMultiple fixes and enhancements to boundary handling were introduced to \r\n`scipy.ndimage` interpolation functions (i.e. ``affine_transform``,\r\n``geometric_transform``, ``map_coordinates``, ``rotate``, ``shift``, ``zoom``).\r\n\r\nA new boundary mode, ``grid-wrap`` was added which wraps images periodically,\r\nusing a period equal to the shape of the input image grid. This is in contrast \r\nto the existing ``wrap`` mode which uses a period that is one sample smaller \r\nthan the original signal extent along each dimension.\r\n\r\nA long-standing bug in the ``reflect`` boundary condition has been fixed and \r\nthe mode ``grid-mirror`` was introduced as a synonym for ``reflect``.\r\n\r\nA new boundary mode, ``grid-constant`` is now available. This is similar to \r\nthe existing ndimage ``constant`` mode, but interpolation will still performed \r\nat coordinate values outside of the original image extent. This \r\n``grid-constant`` mode is consistent with OpenCV's ``BORDER_CONSTANT`` mode \r\nand scikit-image's ``constant`` mode.\r\n\r\nSpline pre-filtering (used internally by ``ndimage`` interpolation functions \r\nwhen ``order >= 2``), now supports all boundary modes rather than always \r\ndefaulting to mirror boundary conditions. The standalone functions \r\n``spline_filter`` and ``spline_filter1d`` have analytical boundary conditions \r\nthat match modes ``mirror``, ``grid-wrap`` and ``reflect``.\r\n\r\n`scipy.ndimage` interpolation functions now accept complex-valued inputs. In\r\nthis case, the interpolation is applied independently to the real and \r\nimaginary components.\r\n\r\nThe ``ndimage`` tutorials \r\n(https://docs.scipy.org/doc/scipy/reference/tutorial/ndimage.html) have been \r\nupdated with new figures to better clarify the exact behavior of all of the \r\ninterpolation boundary modes.\r\n\r\n`scipy.ndimage.zoom` now has a ``grid_mode`` option that changes the coordinate \r\nof the center of the first pixel along an axis from 0 to 0.5. This allows \r\nresizing in a manner that is consistent with the behavior of scikit-image's \r\n``resize`` and ``rescale`` functions (and OpenCV's ``cv2.resize``).\r\n\r\n`scipy.optimize` improvements\r\n----------------------------------\r\n`scipy.optimize.linprog` has fast, new methods for large, sparse problems from \r\nthe ``HiGHS`` C++ library. ``method='highs-ds'`` uses a high performance dual \r\nrevised simplex implementation (HSOL), ``method='highs-ipm'`` uses an \r\ninterior-point method with crossover, and ``method='highs'`` chooses between \r\nthe two automatically. These methods are typically much faster and often exceed \r\nthe accuracy of other ``linprog`` methods, so we recommend explicitly \r\nspecifying one of these three method values when using ``linprog``.\r\n\r\n`scipy.optimize.quadratic_assignment` has been added for approximate solution \r\nof the quadratic assignment problem.\r\n\r\n`scipy.optimize.linear_sum_assignment` now has a substantially reduced overhead\r\nfor small cost matrix sizes\r\n\r\n`scipy.optimize.least_squares` has improved performance when the user provides\r\nthe jacobian as a sparse jacobian already in ``csr_matrix`` format\r\n\r\n`scipy.optimize.linprog` now has an ``rr_method`` argument for specification\r\nof the method used for redundancy handling, and a new method for this purpose\r\nis available based on the interpolative decomposition approach.\r\n\r\n`scipy.signal` improvements\r\n-------------------------------\r\n`scipy.signal.gammatone` has been added to design FIR or IIR filters that \r\nmodel the human auditory system.\r\n\r\n`scipy.signal.iircomb` has been added to design IIR peaking/notching comb \r\nfilters that can boost/attenuate a frequency from a signal.\r\n\r\n`scipy.signal.sosfilt` performance has been improved to avoid some previously-\r\nobserved slowdowns\r\n\r\n`scipy.signal.windows.taylor` has been added--the Taylor window function is\r\ncommonly used in radar digital signal processing\r\n\r\n`scipy.signal.gauss_spline` now supports ``list`` type input for consistency\r\nwith other related SciPy functions\r\n\r\n`scipy.signal.correlation_lags` has been added to allow calculation of the lag/\r\ndisplacement indices array for 1D cross-correlation.\r\n\r\n`scipy.sparse` improvements\r\n--------------------------------\r\nA solver for the minimum weight full matching problem for bipartite graphs,\r\nalso known as the linear assignment problem, has been added in\r\n`scipy.sparse.csgraph.min_weight_full_bipartite_matching`. In particular, this\r\nprovides functionality analogous to that of\r\n`scipy.optimize.linear_sum_assignment`, but with improved performance for sparse\r\ninputs, and the ability to handle inputs whose dense representations would not\r\nfit in memory.\r\n\r\nThe time complexity of `scipy.sparse.block_diag` has been improved dramatically\r\nfrom quadratic to linear.\r\n\r\n`scipy.sparse.linalg` improvements\r\n--------------------------------------\r\nThe vendored version of ``SuperLU`` has been updated\r\n\r\n`scipy.fft` improvements\r\n---------------------------\r\n\r\nThe vendored ``pocketfft`` library now supports compiling with ARM neon vector\r\nextensions and has improved thread pool behavior.\r\n\r\n`scipy.spatial` improvements\r\n--------------------------------\r\nThe python implementation of ``KDTree`` has been dropped and ``KDTree`` is now \r\nimplemented in terms of ``cKDTree``. You can now expect ``cKDTree``-like \r\nperformance by default. This also means ``sys.setrecursionlimit`` no longer \r\nneeds to be increased for querying large trees.\r\n\r\n``transform.Rotation`` has been updated with support for Modified Rodrigues \r\nParameters alongside the existing rotation representations (PR gh-12667).\r\n\r\n`scipy.spatial.transform.Rotation` has been partially cythonized, with some\r\nperformance improvements observed\r\n\r\n`scipy.spatial.distance.cdist` has improved performance with the ``minkowski``\r\nmetric, especially for p-norm values of 1 or 2.\r\n\r\n`scipy.stats` improvements\r\n------------------------------\r\nNew distributions have been added to `scipy.stats`:\r\n\r\n-  The asymmetric Laplace continuous distribution has been added as \r\n  `scipy.stats.laplace_asymmetric`.\r\n-  The negative hypergeometric distribution has been added as `scipy.stats.nhypergeom`.\r\n-  The multivariate t distribution has been added as `scipy.stats.multivariate_t`.\r\n-  The multivariate hypergeometric distribution has been added as `scipy.stats.multivariate_hypergeom`.\r\n\r\nThe ``fit`` method has been overridden for several distributions (``laplace``,\r\n``pareto``, ``rayleigh``, ``invgauss``, ``logistic``, ``gumbel_l``, \r\n``gumbel_r``); they now use analytical, distribution-specific maximum \r\nlikelihood estimation results for greater speed and accuracy than the generic \r\n(numerical optimization) implementation.\r\n\r\nThe one-sample Cram\u00e9r-von Mises test has been added as \r\n`scipy.stats.cramervonmises`.\r\n\r\nAn option to compute one-sided p-values was added to `scipy.stats.ttest_1samp`, \r\n`scipy.stats.ttest_ind_from_stats`, `scipy.stats.ttest_ind` and \r\n`scipy.stats.ttest_rel`.\r\n\r\nThe function `scipy.stats.kendalltau` now has an option to compute Kendall's \r\ntau-c (also known as Stuart's tau-c), and support has been added for exact\r\np-value calculations for sample sizes ``> 171``.\r\n\r\n`stats.trapz` was renamed to `stats.trapezoid`, with the former name retained \r\nas an alias for backwards compatibility reasons.\r\n\r\nThe function `scipy.stats.linregress` now includes the standard error of the \r\nintercept in its return value.\r\n\r\nThe ``_logpdf``, ``_sf``, and ``_isf`` methods have been added to\r\n`scipy.stats.nakagami`; ``_sf`` and ``_isf`` methods also added to\r\n`scipy.stats.gumbel_r`\r\n\r\nThe ``sf`` method has been added to `scipy.stats.levy` and `scipy.stats.levy_l`\r\nfor improved precision.\r\n\r\n`scipy.stats.binned_statistic_dd` performance improvements for the following\r\ncomputed statistics: ``max``, ``min``, ``median``, and ``std``.\r\n\r\nWe gratefully acknowledge the Chan-Zuckerberg Initiative Essential Open Source \r\nSoftware for Science program for supporting many of these improvements to \r\n`scipy.stats`.\r\n\r\nDeprecated features\r\n=============\r\n\r\n`scipy.spatial` changes\r\n-------------------------\r\nCalling ``KDTree.query`` with ``k=None`` to find all neighbours is deprecated. \r\nUse ``KDTree.query_ball_point`` instead.\r\n\r\n``distance.wminkowski`` was deprecated; use ``distance.minkowski`` and supply \r\nweights with the ``w`` keyword instead.\r\n\r\nBackwards incompatible changes\r\n======================\r\n\r\n`scipy` changes\r\n------------------\r\nUsing `scipy.fft` as a function aliasing ``numpy.fft.fft`` was removed after \r\nbeing deprecated in SciPy ``1.4.0``. As a result, the `scipy.fft` submodule \r\nmust be explicitly imported now, in line with other SciPy subpackages.\r\n\r\n`scipy.signal` changes\r\n-------------------------\r\nThe output of ``decimate``, ``lfilter_zi``, ``lfiltic``, ``sos2tf``, and \r\n``sosfilt_zi`` have been changed to match ``numpy.result_type`` of their inputs. \r\n\r\nThe window function ``slepian`` was removed. It had been deprecated since SciPy \r\n``1.1``.\r\n\r\n`scipy.spatial` changes\r\n--------------------------\r\n``cKDTree.query`` now returns 64-bit rather than 32-bit integers on Windows,\r\nmaking behaviour consistent between platforms (PR gh-12673).\r\n\r\n\r\n`scipy.stats` changes\r\n-----------------------\r\nThe ``frechet_l`` and ``frechet_r`` distributions were removed. They were \r\ndeprecated since SciPy ``1.0``.\r\n\r\nOther changes\r\n=============\r\n``setup_requires`` was removed from ``setup.py``. This means that users \r\ninvoking ``python setup.py install`` without having numpy already installed \r\nwill now get an error, rather than having numpy installed for them via \r\n``easy_install``. This install method was always fragile and problematic, users \r\nare encouraged to use ``pip`` when installing from source.\r\n\r\n-  Fixed a bug in `scipy.optimize.dual_annealing` ``accept_reject`` calculation \r\n  that caused uphill jumps to be accepted less frequently.\r\n-  The time required for (un)pickling of `scipy.stats.rv_continuous`, \r\n  `scipy.stats.rv_discrete`, and `scipy.stats.rv_frozen` has been significantly\r\n  reduced (gh12550). Inheriting subclasses should note that ``__setstate__`` no \r\n  longer calls ``__init__`` upon unpickling.\r\n\r\nAuthors\r\n=======\r\n\r\n* @endolith\r\n* @vkk800\r\n* aditya +\r\n* George Bateman +\r\n* Christoph Baumgarten\r\n* Peter Bell\r\n* Tobias Biester +\r\n* Keaton J. Burns +\r\n* Evgeni Burovski\r\n* R\u00fcdiger Busche +\r\n* Matthias Bussonnier\r\n* Dominic C +\r\n* Corallus Caninus +\r\n* CJ Carey\r\n* Thomas A Caswell\r\n* chapochn +\r\n* Luc\u00eda Cheung\r\n* Zach Colbert +\r\n* Coloquinte +\r\n* Yannick Copin +\r\n* Devin Crowley +\r\n* Terry Davis +\r\n* Micha\u00ebl Defferrard +\r\n* devonwp +\r\n* Didier +\r\n* divenex +\r\n* Thomas Duvernay +\r\n* Eoghan O'Connell +\r\n* G\u00f6k\u00e7en Eraslan\r\n* Kristian Eschenburg +\r\n* Ralf Gommers\r\n* Thomas Grainger +\r\n* GreatV +\r\n* Gregory Gundersen +\r\n* h-vetinari +\r\n* Matt Haberland\r\n* Mark Harfouche +\r\n* He He +\r\n* Alex Henrie\r\n* Chun-Ming Huang +\r\n* Martin James McHugh III +\r\n* Alex Izvorski +\r\n* Joey +\r\n* ST John +\r\n* Jonas Jonker +\r\n* Julius Bier Kirkegaard\r\n* Marcin Konowalczyk +\r\n* Konrad0\r\n* Sam Van Kooten +\r\n* Sergey Koposov +\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory R. Lee\r\n* Lo\u00efc Est\u00e8ve\r\n* Jean-Luc Margot +\r\n* MarkusKoebis +\r\n* Nikolay Mayorov\r\n* G. D. McBain\r\n* Andrew McCluskey +\r\n* Nicholas McKibben\r\n* Sturla Molden\r\n* Denali Molitor +\r\n* Eric Moore\r\n* Shashaank N +\r\n* Prashanth Nadukandi +\r\n* nbelakovski +\r\n* Andrew Nelson\r\n* Nick +\r\n* Nikola Forr\u00f3 +\r\n* odidev\r\n* ofirr +\r\n* Sambit Panda\r\n* Dima Pasechnik\r\n* Tirth Patel +\r\n* Matti Picus\r\n* Pawe\u0142 Redzy\u0144ski +\r\n* Vladimir Philipenko +\r\n* Philipp Th\u00f6lke +\r\n* Ilhan Polat\r\n* Eugene Prilepin +\r\n* Vladyslav Rachek\r\n* Ram Rachum +\r\n* Tyler Reddy\r\n* Martin Reinecke +\r\n* Simon Segerblom Rex +\r\n* Lucas Roberts\r\n* Benjamin Rowell +\r\n* Eli Rykoff +\r\n* Atsushi Sakai\r\n* Moritz Schulte +\r\n* Daniel B. Smith\r\n* Steve Smith +\r\n* Jan Soedingrekso +\r\n* Victor Stinner +\r\n* Jose Storopoli +\r\n* Diana Sukhoverkhova +\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* taoky +\r\n* Mike Taves +\r\n* Ian Thomas +\r\n* Will Tirone +\r\n* Frank Torres +\r\n* Seth Troisi\r\n* Ronald van Elburg +\r\n* Hugo van Kemenade\r\n* Paul van Mulbregt\r\n* Saul Ivan Rivas Vega +\r\n* Pauli Virtanen\r\n* Jan Vleeshouwers\r\n* Samuel Wallan\r\n* Warren Weckesser\r\n* Ben West +\r\n* Eric Wieser\r\n* WillTirone +\r\n* Levi John Wolf +\r\n* Zhiqing Xiao\r\n* Rory Yorke +\r\n* Yun Wang (Maigo) +\r\n* Egor Zemlyanoy +\r\n* ZhihuiChen0903 +\r\n* Jacob Zhong +\r\n\r\nA total of 122 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.6.0rc2", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.6.0rc2", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.6.0rc2", "url": "https://api.github.com/repos/scipy/scipy/releases/35635246", "dateCreated": "2020-12-22T14:55:55Z", "datePublished": "2020-12-22T22:16:32Z"}, {"tagName": "v1.6.0rc1", "name": "SciPy 1.6.0rc1", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.6.0 Release Notes\r\n==========================\r\n\r\n**Note**: Scipy `1.6.0` is not released yet!\r\n\r\nSciPy `1.6.0` is the culmination of 6 months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.6.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.7`+ and NumPy `1.16.5` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0`+ is required.\r\n\r\nHighlights of this release\r\n----------------------------\r\n\r\n-  `scipy.ndimage` improvements: Fixes and ehancements to boundary extension \r\n  modes for interpolation functions. Support for complex-valued inputs in many\r\n  filtering and interpolation functions. New ``grid_mode`` option for \r\n  `scipy.ndimage.zoom` to enable results consistent with scikit-image's \r\n  ``rescale``.\r\n-  `scipy.optimize.linprog` has fast, new methods for large, sparse problems \r\n  from the ``HiGHS`` library.\r\n- `scipy.stats` improvements including new distributions, a new test, and\r\n  enhancements to existing distributions and tests\r\n\r\n\r\nNew features\r\n============\r\n\r\n`scipy.special` improvements\r\n-----------------------------\r\n`scipy.special` now has improved support for 64-bit ``LAPACK`` backend\r\n\r\n`scipy.odr` improvements\r\n-------------------------\r\n`scipy.odr` now has support for 64-bit integer ``BLAS``\r\n\r\n`scipy.odr.ODR` has gained an optional ``overwrite`` argument so that existing\r\nfiles may be overwritten.\r\n\r\n`scipy.integrate` improvements\r\n-------------------------------\r\nSome renames of functions with poor names were done, with the old names \r\nretained without being in the reference guide for backwards compatibility \r\nreasons:\r\n-  ``integrate.simps`` was renamed to ``integrate.simpson``\r\n-  ``integrate.trapz`` was renamed to ``integrate.trapezoid``\r\n-  ``integrate.cumtrapz`` was renamed to ``integrate.cumulative_trapezoid``\r\n\r\n`scipy.cluster` improvements\r\n-------------------------------\r\n`scipy.cluster.hierarchy.DisjointSet` has been added for incremental \r\nconnectivity queries.\r\n\r\n`scipy.cluster.hierarchy.dendrogram` return value now also includes leaf color\r\ninformation in `leaves_color_list`.\r\n\r\n`scipy.interpolate` improvements\r\n---------------------------------\r\n`scipy.interpolate.interp1d` has a new method ``nearest-up``, similar to the \r\nexisting method ``nearest`` but rounds half-integers up instead of down.\r\n\r\n`scipy.io` improvements\r\n------------------------\r\nSupport has been added for reading arbitrary bit depth integer PCM WAV files \r\nfrom 1- to 32-bit, including the commonly-requested 24-bit depth.\r\n\r\n`scipy.linalg` improvements\r\n----------------------------\r\nThe new function `scipy.linalg.matmul_toeplitz` uses the FFT to compute the \r\nproduct of a Toeplitz matrix with another matrix.\r\n\r\n`scipy.linalg.sqrtm` and `scipy.linalg.logm` have performance improvements\r\nthanks to additional Cython code.\r\n\r\nPython ``LAPACK`` wrappers have been added for ``pptrf``, ``pptrs``, ``ppsv``,\r\n``pptri``, and ``ppcon``.\r\n\r\n`scipy.linalg.norm` and the ``svd`` family of functions will now use 64-bit\r\ninteger backends when available.\r\n\r\n`scipy.ndimage` improvements\r\n-----------------------------\r\n`scipy.ndimage.convolve`, `scipy.ndimage.correlate` and their 1d counterparts \r\nnow accept both complex-valued images and/or complex-valued filter kernels. All \r\nconvolution-based filters also now accept complex-valued inputs \r\n(e.g. ``gaussian_filter``, ``uniform_filter``, etc.).\r\n\r\nMultiple fixes and enhancements to boundary handling were introduced to \r\n`scipy.ndimage` interpolation functions (i.e. ``affine_transform``,\r\n``geometric_transform``, ``map_coordinates``, ``rotate``, ``shift``, ``zoom``).\r\n\r\nA new boundary mode, ``grid-wrap`` was added which wraps images periodically,\r\nusing a period equal to the shape of the input image grid. This is in contrast \r\nto the existing ``wrap`` mode which uses a period that is one sample smaller \r\nthan the original signal extent along each dimension.\r\n\r\nA long-standing bug in the ``reflect`` boundary condition has been fixed and \r\nthe mode ``grid-mirror`` was introduced as a synonym for ``reflect``.\r\n\r\nA new boundary mode, ``grid-constant`` is now available. This is similar to \r\nthe existing ndimage ``constant`` mode, but interpolation will still performed \r\nat coordinate values outside of the original image extent. This \r\n``grid-constant`` mode is consistent with OpenCV's ``BORDER_CONSTANT`` mode \r\nand scikit-image's ``constant`` mode.\r\n\r\nSpline pre-filtering (used internally by ``ndimage`` interpolation functions \r\nwhen ``order >= 2``), now supports all boundary modes rather than always \r\ndefaulting to mirror boundary conditions. The standalone functions \r\n``spline_filter`` and ``spline_filter1d`` have analytical boundary conditions \r\nthat match modes ``mirror``, ``grid-wrap`` and ``reflect``.\r\n\r\n`scipy.ndimage` interpolation functions now accept complex-valued inputs. In\r\nthis case, the interpolation is applied independently to the real and \r\nimaginary components.\r\n\r\nThe ``ndimage`` tutorials \r\n(https://docs.scipy.org/doc/scipy/reference/tutorial/ndimage.html) have been \r\nupdated with new figures to better clarify the exact behavior of all of the \r\ninterpolation boundary modes.\r\n\r\n`scipy.ndimage.zoom` now has a ``grid_mode`` option that changes the coordinate \r\nof the center of the first pixel along an axis from 0 to 0.5. This allows \r\nresizing in a manner that is consistent with the behavior of scikit-image's \r\n``resize`` and ``rescale`` functions (and OpenCV's ``cv2.resize``).\r\n\r\n`scipy.optimize` improvements\r\n------------------------------\r\n`scipy.optimize.linprog` has fast, new methods for large, sparse problems from \r\nthe ``HiGHS`` C++ library. ``method='highs-ds'`` uses a high performance dual \r\nrevised simplex implementation (HSOL), ``method='highs-ipm'`` uses an \r\ninterior-point method with crossover, and ``method='highs'`` chooses between \r\nthe two automatically. These methods are typically much faster and often exceed \r\nthe accuracy of other ``linprog`` methods, so we recommend explicitly \r\nspecifying one of these three method values when using ``linprog``.\r\n\r\n`scipy.optimize.quadratic_assignment` has been added for approximate solution \r\nof the quadratic assignment problem.\r\n\r\n`scipy.optimize.linear_sum_assignment` now has a substantially reduced overhead\r\nfor small cost matrix sizes\r\n\r\n`scipy.optimize.least_squares` has improved performance when the user provides\r\nthe jacobian as a sparse jacobian already in ``csr_matrix`` format\r\n\r\n`scipy.optimize.linprog` now has an ``rr_method`` argument for specification\r\nof the method used for redundancy handling, and a new method for this purpose\r\nis available based on the interpolative decomposition approach.\r\n\r\n`scipy.signal` improvements\r\n----------------------------\r\n`scipy.signal.gammatone` has been added to design FIR or IIR filters that \r\nmodel the human auditory system.\r\n\r\n`scipy.signal.iircomb` has been added to design IIR peaking/notching comb \r\nfilters that can boost/attenuate a frequency from a signal.\r\n\r\n`scipy.signal.sosfilt` performance has been improved to avoid some previously-\r\nobserved slowdowns\r\n\r\n`scipy.signal.windows.taylor` has been added--the Taylor window function is\r\ncommonly used in radar digital signal processing\r\n\r\n`scipy.signal.gauss_spline` now supports ``list`` type input for consistency\r\nwith other related SciPy functions\r\n\r\n`scipy.signal.correlation_lags` has been added to allow calculation of the lag/\r\ndisplacement indices array for 1D cross-correlation.\r\n\r\n`scipy.sparse` improvements\r\n----------------------------\r\nA solver for the minimum weight full matching problem for bipartite graphs,\r\nalso known as the linear assignment problem, has been added in\r\n`scipy.sparse.csgraph.min_weight_full_bipartite_matching`. In particular, this\r\nprovides functionality analogous to that of\r\n`scipy.optimize.linear_sum_assignment`, but with improved performance for sparse\r\ninputs, and the ability to handle inputs whose dense representations would not\r\nfit in memory.\r\n\r\nThe time complexity of `scipy.sparse.block_diag` has been improved dramatically\r\nfrom quadratic to linear.\r\n\r\n`scipy.sparse.linalg` improvements\r\n-----------------------------------\r\nThe vendored version of ``SuperLU`` has been updated\r\n\r\n`scipy.fft` improvements\r\n-------------------------\r\n\r\nThe vendored ``pocketfft`` library now supports compiling with ARM neon vector\r\nextensions and has improved thread pool behavior.\r\n\r\n`scipy.spatial` improvements\r\n-----------------------------\r\nThe python implementation of ``KDTree`` has been dropped and ``KDTree`` is now \r\nimplemented in terms of ``cKDTree``. You can now expect ``cKDTree``-like \r\nperformance by default. This also means ``sys.setrecursionlimit`` no longer \r\nneeds to be increased for querying large trees.\r\n\r\n``transform.Rotation`` has been updated with support for Modified Rodrigues \r\nParameters alongside the existing rotation representations (PR gh-12667).\r\n\r\n`scipy.spatial.transform.Rotation` has been partially cythonized, with some\r\nperformance improvements observed\r\n\r\n`scipy.spatial.distance.cdist` has improved performance with the ``minkowski``\r\nmetric, especially for p-norm values of 1 or 2.\r\n\r\n`scipy.stats` improvements\r\n---------------------------\r\nNew distributions have been added to `scipy.stats`:\r\n\r\n-  The asymmetric Laplace continuous distribution has been added as \r\n  `scipy.stats.laplace_asymmetric`.\r\n-  The negative hypergeometric distribution has been added as `scipy.stats.nhypergeom`.\r\n-  The multivariate t distribution has been added as `scipy.stats.multivariate_t`.\r\n-  The multivariate hypergeometric distribution has been added as `scipy.stats.multivariate_hypergeom`.\r\n\r\nThe ``fit`` method has been overridden for several distributions (``laplace``,\r\n``pareto``, ``rayleigh``, ``invgauss``, ``logistic``, ``gumbel_l``, \r\n``gumbel_r``); they now use analytical, distribution-specific maximum \r\nlikelihood estimation results for greater speed and accuracy than the generic \r\n(numerical optimization) implementation.\r\n\r\nThe one-sample Cram\u00e9r-von Mises test has been added as \r\n`scipy.stats.cramervonmises`.\r\n\r\nAn option to compute one-sided p-values was added to `scipy.stats.ttest_1samp`, \r\n`scipy.stats.ttest_ind_from_stats`, `scipy.stats.ttest_ind` and \r\n`scipy.stats.ttest_rel`.\r\n\r\nThe function `scipy.stats.kendalltau` now has an option to compute Kendall's \r\ntau-c (also known as Stuart's tau-c), and support has been added for exact\r\np-value calculations for sample sizes ``> 171``.\r\n\r\n`stats.trapz` was renamed to `stats.trapezoid`, with the former name retained \r\nas an alias for backwards compatibility reasons.\r\n\r\nThe function `scipy.stats.linregress` now includes the standard error of the \r\nintercept in its return value.\r\n\r\nThe ``_logpdf``, ``_sf``, and ``_isf`` methods have been added to\r\n`scipy.stats.nakagami`; ``_sf`` and ``_isf`` methods also added to\r\n`scipy.stats.gumbel_r`\r\n\r\nThe ``sf`` method has been added to `scipy.stats.levy` and `scipy.stats.levy_l`\r\nfor improved precision.\r\n\r\n`scipy.stats.binned_statistic_dd` performance improvements for the following\r\ncomputed statistics: ``max``, ``min``, ``median``, and ``std``.\r\n\r\nWe gratefully acknowledge the Chan-Zuckerberg Initiative Essential Open Source \r\nSoftware for Science program for supporting many of these improvements to \r\n`scipy.stats`.\r\n\r\nDeprecated features\r\n===================\r\n\r\n`scipy.spatial` changes\r\n------------------------\r\nCalling ``KDTree.query`` with ``k=None`` to find all neighbours is deprecated. \r\nUse ``KDTree.query_ball_point`` instead.\r\n\r\n``distance.wminkowski`` was deprecated; use ``distance.minkowski`` and supply \r\nweights with the ``w`` keyword instead.\r\n\r\nBackwards incompatible changes\r\n==============================\r\n\r\n`scipy` changes\r\n----------------\r\nUsing `scipy.fft` as a function aliasing ``numpy.fft.fft`` was removed after \r\nbeing deprecated in SciPy ``1.4.0``. As a result, the `scipy.fft` submodule \r\nmust be explicitly imported now, in line with other SciPy subpackages.\r\n\r\n`scipy.signal` changes\r\n-----------------------\r\nThe output of ``decimate``, ``lfilter_zi``, ``lfiltic``, ``sos2tf``, and \r\n``sosfilt_zi`` have been changed to match ``numpy.result_type`` of their inputs. \r\n\r\nThe window function ``slepian`` was removed. It had been deprecated since SciPy \r\n``1.1``.\r\n\r\n`scipy.spatial` changes\r\n------------------------\r\n``cKDTree.query`` now returns 64-bit rather than 32-bit integers on Windows,\r\nmaking behaviour consistent between platforms (PR gh-12673).\r\n\r\n\r\n`scipy.stats` changes\r\n----------------------\r\nThe ``frechet_l`` and ``frechet_r`` distributions were removed. They were \r\ndeprecated since SciPy ``1.0``.\r\n\r\nOther changes\r\n=============\r\n``setup_requires`` was removed from ``setup.py``. This means that users \r\ninvoking ``python setup.py install`` without having numpy already installed \r\nwill now get an error, rather than having numpy installed for them via \r\n``easy_install``. This install method was always fragile and problematic, users \r\nare encouraged to use ``pip`` when installing from source.\r\n\r\n-  Fixed a bug in `scipy.optimize.dual_annealing` ``accept_reject`` calculation \r\n  that caused uphill jumps to be accepted less frequently.\r\n-  The time required for (un)pickling of `scipy.stats.rv_continuous`, \r\n  `scipy.stats.rv_discrete`, and `scipy.stats.rv_frozen` has been significantly\r\n  reduced (gh12550). Inheriting subclasses should note that ``__setstate__`` no \r\n  longer calls ``__init__`` upon unpickling.\r\n\r\nAuthors\r\n=======\r\n\r\n* @endolith\r\n* @vkk800\r\n* aditya +\r\n* George Bateman +\r\n* Christoph Baumgarten\r\n* Peter Bell\r\n* Tobias Biester +\r\n* Keaton J. Burns +\r\n* Evgeni Burovski\r\n* R\u00fcdiger Busche +\r\n* Matthias Bussonnier\r\n* Dominic C +\r\n* Corallus Caninus +\r\n* CJ Carey\r\n* Thomas A Caswell\r\n* chapochn +\r\n* Luc\u00eda Cheung\r\n* Zach Colbert +\r\n* Coloquinte +\r\n* Yannick Copin +\r\n* Devin Crowley +\r\n* Terry Davis +\r\n* Micha\u00ebl Defferrard +\r\n* devonwp +\r\n* Didier +\r\n* divenex +\r\n* Thomas Duvernay +\r\n* Eoghan O'Connell +\r\n* G\u00f6k\u00e7en Eraslan\r\n* Kristian Eschenburg +\r\n* Ralf Gommers\r\n* Thomas Grainger +\r\n* GreatV +\r\n* Gregory Gundersen +\r\n* h-vetinari +\r\n* Matt Haberland\r\n* Mark Harfouche +\r\n* He He +\r\n* Alex Henrie\r\n* Chun-Ming Huang +\r\n* Martin James McHugh III +\r\n* Alex Izvorski +\r\n* Joey +\r\n* ST John +\r\n* Jonas Jonker +\r\n* Julius Bier Kirkegaard\r\n* Marcin Konowalczyk +\r\n* Konrad0\r\n* Sam Van Kooten +\r\n* Sergey Koposov +\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory R. Lee\r\n* Lo\u00efc Est\u00e8ve\r\n* Jean-Luc Margot +\r\n* MarkusKoebis +\r\n* Nikolay Mayorov\r\n* G. D. McBain\r\n* Andrew McCluskey +\r\n* Nicholas McKibben\r\n* Sturla Molden\r\n* Denali Molitor +\r\n* Eric Moore\r\n* Shashaank N +\r\n* Prashanth Nadukandi +\r\n* nbelakovski +\r\n* Andrew Nelson\r\n* Nick +\r\n* Nikola Forr\u00f3 +\r\n* odidev\r\n* ofirr +\r\n* Sambit Panda\r\n* Dima Pasechnik\r\n* Tirth Patel +\r\n* Pawe\u0142 Redzy\u0144ski +\r\n* Vladimir Philipenko +\r\n* Philipp Th\u00f6lke +\r\n* Ilhan Polat\r\n* Eugene Prilepin +\r\n* Vladyslav Rachek\r\n* Ram Rachum +\r\n* Tyler Reddy\r\n* Martin Reinecke +\r\n* Simon Segerblom Rex +\r\n* Lucas Roberts\r\n* Benjamin Rowell +\r\n* Eli Rykoff +\r\n* Atsushi Sakai\r\n* Moritz Schulte +\r\n* Daniel B. Smith\r\n* Steve Smith +\r\n* Jan Soedingrekso +\r\n* Victor Stinner +\r\n* Jose Storopoli +\r\n* Diana Sukhoverkhova +\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* taoky +\r\n* Mike Taves +\r\n* Ian Thomas +\r\n* Will Tirone +\r\n* Frank Torres +\r\n* Seth Troisi\r\n* Ronald van Elburg +\r\n* Hugo van Kemenade\r\n* Paul van Mulbregt\r\n* Saul Ivan Rivas Vega +\r\n* Pauli Virtanen\r\n* Jan Vleeshouwers\r\n* Samuel Wallan\r\n* Warren Weckesser\r\n* Ben West +\r\n* Eric Wieser\r\n* WillTirone +\r\n* Levi John Wolf +\r\n* Zhiqing Xiao\r\n* Rory Yorke +\r\n* Yun Wang (Maigo) +\r\n* Egor Zemlyanoy +\r\n* ZhihuiChen0903 +\r\n* Jacob Zhong +\r\n\r\nA total of 121 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.6.0rc1", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.6.0rc1", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.6.0rc1", "url": "https://api.github.com/repos/scipy/scipy/releases/35131446", "dateCreated": "2020-12-10T04:00:00Z", "datePublished": "2020-12-11T01:43:33Z"}, {"tagName": "v1.5.4", "name": "SciPy 1.5.4", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.5.4 Release Notes\r\n================\r\n\r\nSciPy `1.5.4` is a bug-fix release with no new features\r\ncompared to `1.5.3`. Importantly, wheels are now available\r\nfor Python `3.9` and a more complete fix has been applied for\r\nissues building with XCode `12`.\r\n\r\nAuthors\r\n=====\r\n\r\n* Peter Bell\r\n* CJ Carey\r\n* Andrew McCluskey +\r\n* Andrew Nelson\r\n* Tyler Reddy\r\n* Eli Rykoff +\r\n* Ian Thomas +\r\n\r\nA total of 7 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.5.4", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.5.4", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.5.4", "url": "https://api.github.com/repos/scipy/scipy/releases/33482205", "dateCreated": "2020-11-04T02:28:09Z", "datePublished": "2020-11-05T03:09:11Z"}, {"tagName": "v1.5.3", "name": "SciPy 1.5.3", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.5.3 Release Notes\r\n================\r\n\r\nSciPy `1.5.3` is a bug-fix release with no new features\r\ncompared to `1.5.2`. In particular, Linux ARM64 wheels are now\r\navailable and a compatibility issue with XCode 12 has\r\nbeen fixed.\r\n\r\nAuthors\r\n=======\r\n\r\n* Peter Bell\r\n* CJ Carey\r\n* Thomas Duvernay +\r\n* Gregory Lee\r\n* Eric Moore\r\n* odidev\r\n* Dima Pasechnik\r\n* Tyler Reddy\r\n* Simon Segerblom Rex +\r\n* Daniel B. Smith\r\n* Will Tirone +\r\n* Warren Weckesser\r\n\r\nA total of 12 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.\r\n", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.5.3", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.5.3", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.5.3", "url": "https://api.github.com/repos/scipy/scipy/releases/32712451", "dateCreated": "2020-10-16T23:41:32Z", "datePublished": "2020-10-17T22:11:28Z"}, {"tagName": "v1.5.2", "name": "SciPy 1.5.2", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.5.2 Release Notes\r\n================\r\n\r\nSciPy `1.5.2` is a bug-fix release with no new features\r\ncompared to `1.5.1`.\r\n\r\nAuthors\r\n=====\r\n\r\n* Peter Bell\r\n* Tobias Biester +\r\n* Evgeni Burovski\r\n* Thomas A Caswell\r\n* Ralf Gommers\r\n* Sturla Molden\r\n* Andrew Nelson\r\n* ofirr +\r\n* Sambit Panda\r\n* Ilhan Polat\r\n* Tyler Reddy\r\n* Atsushi Sakai\r\n* Pauli Virtanen\r\n\r\nA total of 13 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.5.2", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.5.2", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.5.2", "url": "https://api.github.com/repos/scipy/scipy/releases/28896259", "dateCreated": "2020-07-23T01:50:33Z", "datePublished": "2020-07-24T02:15:35Z"}, {"tagName": "v1.5.1", "name": "SciPy 1.5.1", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.5.1 Release Notes\r\n================\r\n\r\nSciPy `1.5.1` is a bug-fix release with no new features\r\ncompared to `1.5.0`. In particular, an issue where DLL loading\r\ncan fail for SciPy wheels on Windows with Python `3.6` has been\r\nfixed.\r\n\r\nAuthors\r\n=======\r\n\r\n* Peter Bell\r\n* Lo\u00efc Est\u00e8ve\r\n* Philipp Th\u00f6lke +\r\n* Tyler Reddy\r\n* Paul van Mulbregt\r\n* Pauli Virtanen\r\n* Warren Weckesser\r\n\r\nA total of 7 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.\r\n", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.5.1", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.5.1", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.5.1", "url": "https://api.github.com/repos/scipy/scipy/releases/28224661", "dateCreated": "2020-07-04T20:36:55Z", "datePublished": "2020-07-04T23:41:28Z"}, {"tagName": "v1.5.0", "name": "SciPy 1.5.0", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.5.0 Release Notes\r\n==========================\r\n\r\nSciPy `1.5.0` is the culmination of 6 months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.5.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.6+` and NumPy `1.14.5` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0+` and NumPy `1.15.0` are required.\r\n\r\nHighlights of this release\r\n-----------------------------\r\n\r\n-  wrappers for more than a dozen new ``LAPACK`` routines are now available\r\n  in `scipy.linalg.lapack`\r\n-  Improved support for leveraging 64-bit integer size from linear algebra\r\n  backends\r\n-  addition of the probability distribution for two-sided one-sample \r\n  Kolmogorov-Smirnov tests\r\n\r\n\r\nNew features\r\n----------------\r\n\r\n`scipy.cluster` improvements\r\n-------------------------------\r\nInitialization of `scipy.cluster.vq.kmeans2` using ``minit=\"++\"`` had a \r\nquadratic complexity in the number of samples. It has been improved, resulting \r\nin a much faster initialization with quasi-linear complexity.\r\n\r\n`scipy.cluster.hierarchy.dendrogram` now respects the ``matplotlib`` color\r\npalette\r\n\r\n`scipy.fft` improvements\r\n---------------------------------\r\nA new keyword-only argument ``plan`` is added to all FFT functions in this \r\nmodule. It is reserved for passing in a precomputed plan from libraries \r\nproviding a FFT backend (such as ``PyFFTW`` and ``mkl-fft``), and it is \r\ncurrently not used in SciPy.\r\n\r\n`scipy.integrate` improvements\r\n-------------------------------\r\n\r\n\r\n`scipy.interpolate` improvements\r\n---------------------------------\r\n\r\n`scipy.io` improvements\r\n------------------------\r\n`scipy.io.wavfile` error messages are more explicit about what's wrong, and \r\nextraneous bytes at the ends of files are ignored instead of raising an error \r\nwhen the data has successfully been read.\r\n\r\n`scipy.io.loadmat` gained a ``simplify_cells`` parameter, which if set to \r\n``True`` simplifies the structure of the return value if the ``.mat`` file \r\ncontains cell arrays.\r\n\r\n``pathlib.Path`` objects are now supported in `scipy.io` Matrix Market I/O\r\nfunctions\r\n\r\n`scipy.linalg` improvements\r\n----------------------------\r\n`scipy.linalg.eigh` has been improved. Now various ``LAPACK`` drivers can be \r\nselected at will and also subsets of eigenvalues can be requested via \r\n``subset_by_value`` keyword. Another keyword ``subset_by_index`` is introduced.\r\nKeywords ``turbo`` and ``eigvals`` are deprecated.\r\n\r\nSimilarly, standard and generalized Hermitian eigenvalue ``LAPACK`` routines \r\n``?<sy/he>evx`` are added and existing ones now have full ``_lwork``\r\ncounterparts.\r\n\r\nWrappers for the following ``LAPACK`` routines have been added to \r\n`scipy.linalg.lapack`:\r\n\r\n-  ``?getc2``: computes the LU factorization of a general matrix with complete \r\n    pivoting\r\n-  ``?gesc2``: solves a linear system given an LU factorization from ``?getc2``\r\n-  ``?gejsv``: computes the singular value decomposition of a general matrix \r\n    with higher accuracy calculation of tiny singular values and their \r\n    corresponding singular vectors\r\n-  ``?geqrfp``: computes the QR factorization of a general matrix with \r\n    non-negative elements on the diagonal of R\r\n-  ``?gtsvx``: solves a linear system with general tridiagonal matrix\r\n-  ``?gttrf``: computes the LU factorization of a tridiagonal matrix\r\n-  ``?gttrs``: solves a linear system given an LU factorization from ``?gttrf``\r\n-  ``?ptsvx``: solves a linear system with symmetric positive definite \r\n    tridiagonal matrix\r\n-  ``?pttrf``: computes the LU factorization of a symmetric positive definite \r\n    tridiagonal matrix\r\n-  ``?pttrs``: solves a linear system given an LU factorization from ``?pttrf``\r\n-  ``?pteqr``: computes the eigenvectors and eigenvalues of a positive definite \r\n    tridiagonal matrix\r\n-  ``?tbtrs``: solves a linear system with a triangular banded matrix\r\n-  ``?csd``: computes the Cosine Sine decomposition of an orthogonal/unitary \r\n    matrix\r\n\r\nGeneralized QR factorization routines (``?geqrf``) now have full ``_lwork`` \r\ncounterparts.\r\n\r\n`scipy.linalg.cossin` Cosine Sine decomposition of unitary matrices has been \r\nadded.\r\n\r\nThe function `scipy.linalg.khatri_rao`, which computes the Khatri-Rao product,\r\nwas added.\r\n\r\nThe new function `scipy.linalg.convolution_matrix` constructs the Toeplitz \r\nmatrix representing one-dimensional convolution.\r\n\r\n`scipy.ndimage` improvements\r\n----------------------------\r\n\r\n\r\n`scipy.optimize` improvements\r\n------------------------------\r\nThe finite difference numerical differentiation used in various ``minimize``\r\nmethods that use gradients has several new features:\r\n\r\n-  2-point, 3-point, or complex step finite differences can be used. Previously \r\n  only a 2-step finite difference was available.\r\n-  There is now the possibility to use a relative step size, previously only an\r\n  absolute step size was available.\r\n-  If the ``minimize`` method uses bounds the numerical differentiation strictly \r\n  obeys those limits.\r\n-  The numerical differentiation machinery now makes use of a simple cache, \r\n  which in some cases can reduce the number of function evaluations.\r\n-  ``minimize``'s ``method= 'powell'`` now supports simple bound constraints\r\n\r\nThere have been several improvements to `scipy.optimize.linprog`:\r\n\r\n-  The ``linprog`` benchmark suite has been expanded considerably.\r\n-  ``linprog``'s dense pivot-based redundancy removal routine and sparse \r\n  presolve are faster\r\n-  When ``scikit-sparse`` is available, solving sparse problems with \r\n  ``method='interior-point'`` is faster\r\n\r\nThe caching of values when optimizing a function returning both value and \r\ngradient together has been improved, avoiding repeated function evaluations \r\nwhen using a ``HessianApproximation`` such as ``BFGS``.\r\n\r\n``differential_evolution`` can now use the modern ``np.random.Generator`` as \r\nwell as the legacy ``np.random.RandomState`` as a seed.\r\n\r\n`scipy.signal` improvements\r\n----------------------------\r\nA new optional argument ``include_nyquist`` is added to ``freqz`` functions in \r\nthis module. It is used for including the last frequency (Nyquist frequency).\r\n\r\n`scipy.signal.find_peaks_cwt` now accepts a ``window_size`` parameter for the \r\nsize of the window used to calculate the noise floor.\r\n\r\n`scipy.sparse` improvements\r\n----------------------------\r\nOuter indexing is now faster when using a 2d column vector to select column \r\nindices.\r\n\r\n`scipy.sparse.lil.tocsr` is faster\r\n\r\nFixed/improved comparisons between pydata sparse arrays and sparse matrices\r\n\r\nBSR format sparse multiplication performance has been improved.\r\n\r\n`scipy.sparse.linalg.LinearOperator` has gained the new ``ndim`` class\r\nattribute\r\n\r\n`scipy.spatial` improvements\r\n-----------------------------\r\n`scipy.spatial.geometric_slerp` has been added to enable geometric \r\nspherical linear interpolation on an n-sphere\r\n\r\n`scipy.spatial.SphericalVoronoi` now supports calculation of region areas in 2D \r\nand 3D cases\r\n\r\nThe tree building algorithm used by ``cKDTree`` has improved from quadratic\r\nworst case time complexity to loglinear. Benchmarks are also now available for\r\nbuilding and querying of balanced/unbalanced kd-trees.\r\n\r\n`scipy.special` improvements\r\n-----------------------------\r\nThe following functions now have Cython interfaces in `cython_special`:\r\n\r\n-  `scipy.special.erfinv`\r\n-  `scipy.special.erfcinv`\r\n-  `scipy.special.spherical_jn`\r\n-  `scipy.special.spherical_yn`\r\n-  `scipy.special.spherical_in`\r\n-  `scipy.special.spherical_kn`\r\n\r\n`scipy.special.log_softmax` has been added to calculate the logarithm of softmax \r\nfunction. It provides better accuracy than ``log(scipy.special.softmax(x))`` for \r\ninputs that make softmax saturate.\r\n\r\n`scipy.stats` improvements\r\n---------------------------\r\nThe function for generating random samples in `scipy.stats.dlaplace` has been \r\nimproved. The new function is approximately twice as fast with a memory\r\nfootprint reduction between 25 % and 60 % (see gh-11069).\r\n\r\n`scipy.stats` functions that accept a seed for reproducible calculations using \r\nrandom number generation (e.g. random variates from distributions) can now use \r\nthe modern ``np.random.Generator`` as well as the legacy \r\n``np.random.RandomState`` as a seed.\r\n\r\nThe ``axis`` parameter was added to `scipy.stats.rankdata`. This allows slices \r\nof an array along the given axis to be ranked independently.\r\n\r\nThe ``axis`` parameter was added to `scipy.stats.f_oneway`, allowing it to\r\ncompute multiple one-way ANOVA tests for data stored in n-dimensional\r\narrays.  The performance of ``f_oneway`` was also improved for some cases.\r\n\r\nThe PDF and CDF methods for ``stats.geninvgauss`` are now significantly faster \r\nas  the numerical integration to calculate the CDF uses a Cython based \r\n``LowLevelCallable``.\r\n\r\nMoments of the normal distribution (`scipy.stats.norm`) are now calculated using \r\nanalytical formulas instead of numerical integration for greater speed and \r\naccuracy\r\n\r\nMoments and entropy trapezoidal distribution (`scipy.stats.trapz`) are now \r\ncalculated using analytical formulas instead of numerical integration for \r\ngreater speed and accuracy\r\n\r\nMethods of the truncated normal distribution (`scipy.stats.truncnorm`), \r\nespecially ``_rvs``, are significantly faster after a complete rewrite.\r\n\r\nThe `fit` method of the Laplace distribution,  `scipy.stats.laplace`, now uses \r\nthe analytical formulas for the maximum likelihood estimates of the parameters.\r\n\r\nGeneration of random variates is now thread safe for all SciPy distributions. \r\n3rd-party distributions may need to modify the signature of the ``_rvs()`` \r\nmethod to conform to ``_rvs(self, ..., size=None, random_state=None)``. (A \r\none-time VisibleDeprecationWarning is emitted when using non-conformant \r\ndistributions.)\r\n\r\nThe Kolmogorov-Smirnov two-sided test statistic distribution \r\n(`scipy.stats.kstwo`) was added. Calculates the distribution of the K-S \r\ntwo-sided statistic ``D_n`` for a sample of size n, using a mixture of exact \r\nand asymptotic algorithms.\r\n\r\nThe new function ``median_abs_deviation`` replaces the deprecated \r\n``median_absolute_deviation``.\r\n\r\nThe ``wilcoxon`` function now computes the p-value for Wilcoxon's signed rank \r\ntest using the exact distribution for inputs up to length 25.  The function has \r\na new ``mode`` parameter to specify how the p-value is to be computed.  The \r\ndefault is ``\"auto\"``, which uses the exact distribution for inputs up to length \r\n25 and the normal approximation for larger inputs.\r\n\r\nAdded a new Cython-based implementation to evaluate guassian kernel estimates,\r\nwhich should improve the performance of ``gaussian_kde``\r\n\r\nThe ``winsorize`` function now has a ``nan_policy`` argument for refined\r\nhandling of ``nan`` input values.\r\n\r\nThe ``binned_statistic_dd`` function with ``statistic=\"std\"`` performance was\r\nimproved by ~4x.\r\n\r\n``scipy.stats.kstest(rvs, cdf,...)`` now handles both one-sample and \r\ntwo-sample testing. The one-sample variation uses `scipy.stats.ksone` \r\n(or `scipy.stats.kstwo` with back off to `scipy.stats.kstwobign`) to calculate \r\nthe p-value. The two-sample variation, invoked if ``cdf`` is array_like, uses \r\nan algorithm described by Hodges to compute the probability directly, only \r\nbacking off to `scipy.stats.kstwo` in case of overflow. The result in both \r\ncases is more accurate p-values, especially for two-sample testing with \r\nsmaller (or quite different) sizes.\r\n\r\n`scipy.stats.maxwell` performance improvements include a 20 % speed up for\r\n`fit()`` and 5 % for ``pdf()``\r\n\r\n`scipy.stats.shapiro` and `scipy.stats.jarque_bera` now return a named tuple \r\nfor greater consistency with other ``stats`` functions\r\n\r\nDeprecated features\r\n==============\r\n\r\n`scipy` deprecations\r\n---------------------\r\n\r\n`scipy.special` changes\r\n-------------------------\r\nThe ``bdtr``, ``bdtrc``, and ``bdtri`` functions are deprecating non-negative \r\nnon-integral ``n`` arguments.\r\n\r\n`scipy.stats` changes\r\n----------------------\r\nThe function ``median_absolute_deviation`` is deprecated. Use \r\n``median_abs_deviation`` instead.\r\n\r\nThe use of the string ``\"raw\"`` with the ``scale`` parameter of ``iqr`` is \r\ndeprecated. Use ``scale=1`` instead.\r\n\r\nBackwards incompatible changes\r\n=======================\r\n\r\n`scipy.interpolate` changes\r\n-----------------------------\r\n\r\n`scipy.linalg` changes\r\n------------------------\r\nThe output signatures of ``?syevr``, ``?heevr`` have been changed from \r\n``w, v, info`` to ``w, v, m, isuppz, info``\r\n\r\nThe order of output arguments ``w``, ``v`` of ``<sy/he>{gv, gvd, gvx}`` is \r\nswapped.\r\n\r\n`scipy.signal` changes\r\n------------------------\r\nThe output length of `scipy.signal.upfirdn` has been corrected, resulting \r\noutputs may now be shorter for some combinations of up/down ratios and input \r\nsignal and filter lengths.\r\n\r\n`scipy.signal.resample` now supports a ``domain`` keyword argument for\r\nspecification of time or frequency domain input.\r\n\r\n`scipy.stats` changes\r\n-----------------------\r\n\r\n\r\nOther changes\r\n=============\r\nImproved support for leveraging 64-bit integer size from linear algebra backends\r\nin several parts of the SciPy codebase.\r\n\r\nShims designed to ensure the compatibility of SciPy with Python 2.7 have now \r\nbeen removed.\r\n\r\nMany warnings due to unused imports and unused assignments have been addressed.\r\n\r\nMany usage examples were added to function docstrings, and many input \r\nvalidations and intuitive exception messages have been added throughout the\r\ncodebase.\r\n\r\nEarly stage adoption of type annotations in a few parts of the codebase\r\n\r\n\r\nAuthors\r\n=======\r\n\r\n* @endolith\r\n* Hameer Abbasi\r\n* ADmitri +\r\n* Wesley Alves +\r\n* Berkay Antmen +\r\n* Sylwester Arabas +\r\n* Arne K\u00fcderle +\r\n* Christoph Baumgarten\r\n* Peter Bell\r\n* Felix Berkenkamp\r\n* Jord\u00e3o Bragantini +\r\n* Clemens Brunner +\r\n* Evgeni Burovski\r\n* Matthias Bussonnier +\r\n* CJ Carey\r\n* Derrick Chambers +\r\n* Leander Claes +\r\n* Christian Clauss\r\n* Luigi F. Cruz +\r\n* dankleeman\r\n* Andras Deak\r\n* Milad Sadeghi DM +\r\n* jeremie du boisberranger +\r\n* Stefan Endres\r\n* Malte Esders +\r\n* Leo Fang +\r\n* felixhekhorn +\r\n* Isuru Fernando\r\n* Andrew Fowlie\r\n* Lakshay Garg +\r\n* Gaurav Gijare +\r\n* Ralf Gommers\r\n* Emmanuelle Gouillart +\r\n* Kevin Green +\r\n* Martin Grignard +\r\n* Maja Gwozdz\r\n* Sturla Molden\r\n* gyu-don +\r\n* Matt Haberland\r\n* hakeemo +\r\n* Charles Harris\r\n* Alex Henrie\r\n* Santi Hernandez +\r\n* William Hickman +\r\n* Till Hoffmann +\r\n* Joseph T. Iosue +\r\n* Anany Shrey Jain\r\n* Jakob Jakobson\r\n* Charles Jekel +\r\n* Julien Jerphanion +\r\n* Jiacheng-Liu +\r\n* Christoph Kecht +\r\n* Paul Kienzle +\r\n* Reidar Kind +\r\n* Dmitry E. Kislov +\r\n* Konrad +\r\n* Konrad0\r\n* Takuya KOUMURA +\r\n* Krzysztof Pi\u00f3ro\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory Lee +\r\n* Gregory R. Lee\r\n* Chelsea Liu\r\n* Cong Ma +\r\n* Kevin Mader +\r\n* Maja Gw\u00f3\u017ad\u017a +\r\n* Alex Marvin +\r\n* Matthias K\u00fcmmerer\r\n* Nikolay Mayorov\r\n* Mazay0 +\r\n* G. D. McBain\r\n* Nicholas McKibben +\r\n* Sabrina J. Mielke +\r\n* Sebastian J. Mielke +\r\n* Milo\u0161 Komar\u010devi\u0107 +\r\n* Shubham Mishra +\r\n* Santiago M. Mola +\r\n* Grzegorz Mrukwa +\r\n* Peyton Murray\r\n* Andrew Nelson\r\n* Nico Schl\u00f6mer\r\n* nwjenkins +\r\n* odidev +\r\n* Sambit Panda\r\n* Vikas Pandey +\r\n* Rick Paris +\r\n* Harshal Prakash Patankar +\r\n* Balint Pato +\r\n* Matti Picus\r\n* Ilhan Polat\r\n* poom +\r\n* Siddhesh Poyarekar\r\n* Vladyslav Rachek +\r\n* Bharat Raghunathan\r\n* Manu Rajput +\r\n* Tyler Reddy\r\n* Andrew Reed +\r\n* Lucas Roberts\r\n* Ariel Rokem\r\n* Heshy Roskes\r\n* Matt Ruffalo\r\n* Atsushi Sakai +\r\n* Benjamin Santos +\r\n* Christoph Schock +\r\n* Lisa Schwetlick +\r\n* Chris Simpson +\r\n* Leo Singer\r\n* Kai Striega\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* Kale-ab Tessera +\r\n* Seth Troisi +\r\n* Robert Uhl +\r\n* Paul van Mulbregt\r\n* Vasiliy +\r\n* Isaac Virshup +\r\n* Pauli Virtanen\r\n* Shakthi Visagan +\r\n* Jan Vleeshouwers +\r\n* Sam Wallan +\r\n* Lijun Wang +\r\n* Warren Weckesser\r\n* Richard Weiss +\r\n* wenhui-prudencemed +\r\n* Eric Wieser\r\n* Josh Wilson\r\n* James Wright +\r\n* Ruslan Yevdokymov +\r\n* Ziyao Zhang +\r\n\r\nA total of 129 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.5.0", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.5.0", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.5.0", "url": "https://api.github.com/repos/scipy/scipy/releases/27764183", "dateCreated": "2020-06-20T19:16:46Z", "datePublished": "2020-06-21T17:30:01Z"}, {"tagName": "v1.5.0rc2", "name": "SciPy 1.5.0rc2", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.5.0 Release Notes\r\n================\r\n\r\n**Note** Scipy `1.5.0` is not released yet!\r\n\r\nSciPy `1.5.0` is the culmination of 6 months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.5.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.6+` and NumPy `1.14.5` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0+` and NumPy `1.15.0` are required.\r\n\r\nHighlights of this release\r\n----------------------------\r\n\r\n-  wrappers for more than a dozen new ``LAPACK`` routines are now available\r\n  in `scipy.linalg.lapack`\r\n-  Improved support for leveraging 64-bit integer size from linear algebra\r\n  backends\r\n-  addition of the probability distribution for two-sided one-sample \r\n  Kolmogorov-Smirnov tests\r\n\r\n\r\nNew features\r\n============\r\n\r\n`scipy.cluster` improvements\r\n-------------------------------\r\nInitialization of `scipy.cluster.vq.kmeans2` using ``minit=\"++\"`` had a \r\nquadratic complexity in the number of samples. It has been improved, resulting \r\nin a much faster initialization with quasi-linear complexity.\r\n\r\n`scipy.cluster.hierarchy.dendrogram` now respects the ``matplotlib`` color\r\npalette\r\n\r\n`scipy.fft` improvements\r\n-------------------------------\r\nA new keyword-only argument ``plan`` is added to all FFT functions in this \r\nmodule. It is reserved for passing in a precomputed plan from libraries \r\nproviding a FFT backend (such as ``PyFFTW`` and ``mkl-fft``), and it is \r\ncurrently not used in SciPy.\r\n\r\n`scipy.integrate` improvements\r\n-------------------------------\r\n\r\n\r\n`scipy.interpolate` improvements\r\n---------------------------------\r\n\r\n`scipy.io` improvements\r\n-------------------------\r\n`scipy.io.wavfile` error messages are more explicit about what's wrong, and \r\nextraneous bytes at the ends of files are ignored instead of raising an error \r\nwhen the data has successfully been read.\r\n\r\n`scipy.io.loadmat` gained a ``simplify_cells`` parameter, which if set to \r\n``True`` simplifies the structure of the return value if the ``.mat`` file \r\ncontains cell arrays.\r\n\r\n``pathlib.Path`` objects are now supported in `scipy.io` Matrix Market I/O\r\nfunctions\r\n\r\n`scipy.linalg` improvements\r\n-----------------------------\r\n`scipy.linalg.eigh` has been improved. Now various ``LAPACK`` drivers can be \r\nselected at will and also subsets of eigenvalues can be requested via \r\n``subset_by_value`` keyword. Another keyword ``subset_by_index`` is introduced.\r\nKeywords ``turbo`` and ``eigvals`` are deprecated.\r\n\r\nSimilarly, standard and generalized Hermitian eigenvalue ``LAPACK`` routines \r\n``?<sy/he>evx`` are added and existing ones now have full ``_lwork``\r\ncounterparts.\r\n\r\nWrappers for the following ``LAPACK`` routines have been added to \r\n`scipy.linalg.lapack`:\r\n\r\n-  ``?getc2``: computes the LU factorization of a general matrix with complete \r\n    pivoting\r\n-  ``?gesc2``: solves a linear system given an LU factorization from ``?getc2``\r\n-  ``?gejsv``: computes the singular value decomposition of a general matrix \r\n    with higher accuracy calculation of tiny singular values and their \r\n    corresponding singular vectors\r\n-  ``?geqrfp``: computes the QR factorization of a general matrix with \r\n    non-negative elements on the diagonal of R\r\n-  ``?gtsvx``: solves a linear system with general tridiagonal matrix\r\n-  ``?gttrf``: computes the LU factorization of a tridiagonal matrix\r\n-  ``?gttrs``: solves a linear system given an LU factorization from ``?gttrf``\r\n-  ``?ptsvx``: solves a linear system with symmetric positive definite \r\n    tridiagonal matrix\r\n-  ``?pttrf``: computes the LU factorization of a symmetric positive definite \r\n    tridiagonal matrix\r\n-  ``?pttrs``: solves a linear system given an LU factorization from ``?pttrf``\r\n-  ``?pteqr``: computes the eigenvectors and eigenvalues of a positive definite \r\n    tridiagonal matrix\r\n-  ``?tbtrs``: solves a linear system with a triangular banded matrix\r\n-  ``?csd``: computes the Cosine Sine decomposition of an orthogonal/unitary \r\n    matrix\r\n\r\nGeneralized QR factorization routines (``?geqrf``) now have full ``_lwork`` \r\ncounterparts.\r\n\r\n`scipy.linalg.cossin` Cosine Sine decomposition of unitary matrices has been \r\nadded.\r\n\r\nThe function `scipy.linalg.khatri_rao`, which computes the Khatri-Rao product,\r\nwas added.\r\n\r\nThe new function `scipy.linalg.convolution_matrix` constructs the Toeplitz \r\nmatrix representing one-dimensional convolution.\r\n\r\n`scipy.ndimage` improvements\r\n------------------------------\r\n\r\n\r\n`scipy.optimize` improvements\r\n-------------------------------\r\nThe finite difference numerical differentiation used in various ``minimize``\r\nmethods that use gradients has several new features:\r\n\r\n-  2-point, 3-point, or complex step finite differences can be used. Previously \r\n  only a 2-step finite difference was available.\r\n-  There is now the possibility to use a relative step size, previously only an\r\n  absolute step size was available.\r\n-  If the ``minimize`` method uses bounds the numerical differentiation strictly \r\n  obeys those limits.\r\n-  The numerical differentiation machinery now makes use of a simple cache, \r\n  which in some cases can reduce the number of function evaluations.\r\n-  ``minimize``'s ``method= 'powell'`` now supports simple bound constraints\r\n\r\nThere have been several improvements to `scipy.optimize.linprog`:\r\n\r\n-  The ``linprog`` benchmark suite has been expanded considerably.\r\n-  ``linprog``'s dense pivot-based redundancy removal routine and sparse \r\n  presolve are faster\r\n-  When ``scikit-sparse`` is available, solving sparse problems with \r\n  ``method='interior-point'`` is faster\r\n\r\nThe caching of values when optimizing a function returning both value and \r\ngradient together has been improved, avoiding repeated function evaluations \r\nwhen using a ``HessianApproximation`` such as ``BFGS``.\r\n\r\n``differential_evolution`` can now use the modern ``np.random.Generator`` as \r\nwell as the legacy ``np.random.RandomState`` as a seed.\r\n\r\n`scipy.signal` improvements\r\n-----------------------------\r\nA new optional argument ``include_nyquist`` is added to ``freqz`` functions in \r\nthis module. It is used for including the last frequency (Nyquist frequency).\r\n\r\n`scipy.signal.find_peaks_cwt` now accepts a ``window_size`` parameter for the \r\nsize of the window used to calculate the noise floor.\r\n\r\n`scipy.sparse` improvements\r\n----------------------------\r\nOuter indexing is now faster when using a 2d column vector to select column \r\nindices.\r\n\r\n`scipy.sparse.lil.tocsr` is faster\r\n\r\nFixed/improved comparisons between pydata sparse arrays and sparse matrices\r\n\r\nBSR format sparse multiplication performance has been improved.\r\n\r\n`scipy.sparse.linalg.LinearOperator` has gained the new ``ndim`` class\r\nattribute\r\n\r\n`scipy.spatial` improvements\r\n------------------------------\r\n`scipy.spatial.geometric_slerp` has been added to enable geometric \r\nspherical linear interpolation on an n-sphere\r\n\r\n`scipy.spatial.SphericalVoronoi` now supports calculation of region areas in 2D \r\nand 3D cases\r\n\r\nThe tree building algorithm used by ``cKDTree`` has improved from quadratic\r\nworst case time complexity to loglinear. Benchmarks are also now available for\r\nbuilding and querying of balanced/unbalanced kd-trees.\r\n\r\n`scipy.special` improvements\r\n-----------------------------\r\nThe following functions now have Cython interfaces in `cython_special`:\r\n\r\n-  `scipy.special.erfinv`\r\n-  `scipy.special.erfcinv`\r\n-  `scipy.special.spherical_jn`\r\n-  `scipy.special.spherical_yn`\r\n-  `scipy.special.spherical_in`\r\n-  `scipy.special.spherical_kn`\r\n\r\n`scipy.special.log_softmax` has been added to calculate the logarithm of softmax \r\nfunction. It provides better accuracy than ``log(scipy.special.softmax(x))`` for \r\ninputs that make softmax saturate.\r\n\r\n`scipy.stats` improvements\r\n---------------------------\r\nThe function for generating random samples in `scipy.stats.dlaplace` has been \r\nimproved. The new function is approximately twice as fast with a memory\r\nfootprint reduction between 25 % and 60 % (see gh-11069).\r\n\r\n`scipy.stats` functions that accept a seed for reproducible calculations using \r\nrandom number generation (e.g. random variates from distributions) can now use \r\nthe modern ``np.random.Generator`` as well as the legacy \r\n``np.random.RandomState`` as a seed.\r\n\r\nThe ``axis`` parameter was added to `scipy.stats.rankdata`. This allows slices \r\nof an array along the given axis to be ranked independently.\r\n\r\nThe ``axis`` parameter was added to `scipy.stats.f_oneway`, allowing it to\r\ncompute multiple one-way ANOVA tests for data stored in n-dimensional\r\narrays.  The performance of ``f_oneway`` was also improved for some cases.\r\n\r\nThe PDF and CDF methods for ``stats.geninvgauss`` are now significantly faster \r\nas  the numerical integration to calculate the CDF uses a Cython based \r\n``LowLevelCallable``.\r\n\r\nMoments of the normal distribution (`scipy.stats.norm`) are now calculated using \r\nanalytical formulas instead of numerical integration for greater speed and \r\naccuracy\r\n\r\nMoments and entropy trapezoidal distribution (`scipy.stats.trapz`) are now \r\ncalculated using analytical formulas instead of numerical integration for \r\ngreater speed and accuracy\r\n\r\nMethods of the truncated normal distribution (`scipy.stats.truncnorm`), \r\nespecially ``_rvs``, are significantly faster after a complete rewrite.\r\n\r\nThe `fit` method of the Laplace distribution,  `scipy.stats.laplace`, now uses \r\nthe analytical formulas for the maximum likelihood estimates of the parameters.\r\n\r\nGeneration of random variates is now thread safe for all SciPy distributions. \r\n3rd-party distributions may need to modify the signature of the ``_rvs()`` \r\nmethod to conform to ``_rvs(self, ..., size=None, random_state=None)``. (A \r\none-time VisibleDeprecationWarning is emitted when using non-conformant \r\ndistributions.)\r\n\r\nThe Kolmogorov-Smirnov two-sided test statistic distribution \r\n(`scipy.stats.kstwo`) was added. Calculates the distribution of the K-S \r\ntwo-sided statistic ``D_n`` for a sample of size n, using a mixture of exact \r\nand asymptotic algorithms.\r\n\r\nThe new function ``median_abs_deviation`` replaces the deprecated \r\n``median_absolute_deviation``.\r\n\r\nThe ``wilcoxon`` function now computes the p-value for Wilcoxon's signed rank \r\ntest using the exact distribution for inputs up to length 25.  The function has \r\na new ``mode`` parameter to specify how the p-value is to be computed.  The \r\ndefault is ``\"auto\"``, which uses the exact distribution for inputs up to length \r\n25 and the normal approximation for larger inputs.\r\n\r\nAdded a new Cython-based implementation to evaluate guassian kernel estimates,\r\nwhich should improve the performance of ``gaussian_kde``\r\n\r\nThe ``winsorize`` function now has a ``nan_policy`` argument for refined\r\nhandling of ``nan`` input values.\r\n\r\nThe ``binned_statistic_dd`` function with ``statistic=\"std\"`` performance was\r\nimproved by ~4x.\r\n\r\n``scipy.stats.kstest(rvs, cdf,...)`` now handles both one-sample and \r\ntwo-sample testing. The one-sample variation uses `scipy.stats.ksone` \r\n(or `scipy.stats.kstwo` with back off to `scipy.stats.kstwobign`) to calculate \r\nthe p-value. The two-sample variation, invoked if ``cdf`` is array_like, uses \r\nan algorithm described by Hodges to compute the probability directly, only \r\nbacking off to `scipy.stats.kstwo` in case of overflow. The result in both \r\ncases is more accurate p-values, especially for two-sample testing with \r\nsmaller (or quite different) sizes.\r\n\r\n`scipy.stats.maxwell` performance improvements include a 20 % speed up for\r\n`fit()`` and 5 % for ``pdf()``\r\n\r\n`scipy.stats.shapiro` and `scipy.stats.jarque_bera` now return a named tuple \r\nfor greater consistency with other ``stats`` functions\r\n\r\nDeprecated features\r\n===================\r\n\r\n`scipy` deprecations\r\n---------------------\r\n\r\n`scipy.special` changes\r\n------------------------\r\nThe ``bdtr``, ``bdtrc``, and ``bdtri`` functions are deprecating non-negative \r\nnon-integral ``n`` arguments.\r\n\r\n`scipy.stats` changes\r\n----------------------\r\nThe function ``median_absolute_deviation`` is deprecated. Use \r\n``median_abs_deviation`` instead.\r\n\r\nThe use of the string ``\"raw\"`` with the ``scale`` parameter of ``iqr`` is \r\ndeprecated. Use ``scale=1`` instead.\r\n\r\nBackwards incompatible changes\r\n==============================\r\n\r\n`scipy.interpolate` changes\r\n----------------------------\r\n\r\n`scipy.linalg` changes\r\n-----------------------\r\nThe output signatures of ``?syevr``, ``?heevr`` have been changed from \r\n``w, v, info`` to ``w, v, m, isuppz, info``\r\n\r\nThe order of output arguments ``w``, ``v`` of ``<sy/he>{gv, gvd, gvx}`` is \r\nswapped.\r\n\r\n`scipy.signal` changes\r\n-----------------------\r\nThe output length of `scipy.signal.upfirdn` has been corrected, resulting \r\noutputs may now be shorter for some combinations of up/down ratios and input \r\nsignal and filter lengths.\r\n\r\n`scipy.signal.resample` now supports a ``domain`` keyword argument for\r\nspecification of time or frequency domain input.\r\n\r\n`scipy.stats` changes\r\n-----------------------\r\n\r\n\r\nOther changes\r\n=============\r\nImproved support for leveraging 64-bit integer size from linear algebra backends\r\nin several parts of the SciPy codebase.\r\n\r\nShims designed to ensure the compatibility of SciPy with Python 2.7 have now \r\nbeen removed.\r\n\r\nMany warnings due to unused imports and unused assignments have been addressed.\r\n\r\nMany usage examples were added to function docstrings, and many input \r\nvalidations and intuitive exception messages have been added throughout the\r\ncodebase.\r\n\r\nEarly stage adoption of type annotations in a few parts of the codebase\r\n\r\n\r\nAuthors\r\n=======\r\n\r\n* @endolith\r\n* Hameer Abbasi\r\n* ADmitri +\r\n* Wesley Alves +\r\n* Berkay Antmen +\r\n* Sylwester Arabas +\r\n* Arne K\u00fcderle +\r\n* Christoph Baumgarten\r\n* Peter Bell\r\n* Felix Berkenkamp\r\n* Jord\u00e3o Bragantini +\r\n* Clemens Brunner +\r\n* Evgeni Burovski\r\n* Matthias Bussonnier +\r\n* CJ Carey\r\n* Derrick Chambers +\r\n* Leander Claes +\r\n* Christian Clauss\r\n* Luigi F. Cruz +\r\n* dankleeman\r\n* Andras Deak\r\n* Milad Sadeghi DM +\r\n* jeremie du boisberranger +\r\n* Stefan Endres\r\n* Malte Esders +\r\n* Leo Fang +\r\n* felixhekhorn +\r\n* Isuru Fernando\r\n* Andrew Fowlie\r\n* Lakshay Garg +\r\n* Gaurav Gijare +\r\n* Ralf Gommers\r\n* Emmanuelle Gouillart +\r\n* Kevin Green +\r\n* Martin Grignard +\r\n* Maja Gwozdz\r\n* Sturla Molden\r\n* gyu-don +\r\n* Matt Haberland\r\n* hakeemo +\r\n* Charles Harris\r\n* Alex Henrie\r\n* Santi Hernandez +\r\n* William Hickman +\r\n* Till Hoffmann +\r\n* Joseph T. Iosue +\r\n* Anany Shrey Jain\r\n* Jakob Jakobson\r\n* Charles Jekel +\r\n* Julien Jerphanion +\r\n* Jiacheng-Liu +\r\n* Christoph Kecht +\r\n* Paul Kienzle +\r\n* Reidar Kind +\r\n* Dmitry E. Kislov +\r\n* Konrad +\r\n* Konrad0\r\n* Takuya KOUMURA +\r\n* Krzysztof Pi\u00f3ro\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory Lee +\r\n* Gregory R. Lee\r\n* Chelsea Liu\r\n* Cong Ma +\r\n* Kevin Mader +\r\n* Maja Gw\u00f3\u017ad\u017a +\r\n* Alex Marvin +\r\n* Matthias K\u00fcmmerer\r\n* Nikolay Mayorov\r\n* Mazay0 +\r\n* G. D. McBain\r\n* Nicholas McKibben +\r\n* Sabrina J. Mielke +\r\n* Sebastian J. Mielke +\r\n* Milo\u0161 Komar\u010devi\u0107 +\r\n* Shubham Mishra +\r\n* Santiago M. Mola +\r\n* Grzegorz Mrukwa +\r\n* Peyton Murray\r\n* Andrew Nelson\r\n* Nico Schl\u00f6mer\r\n* nwjenkins +\r\n* odidev +\r\n* Sambit Panda\r\n* Vikas Pandey +\r\n* Rick Paris +\r\n* Harshal Prakash Patankar +\r\n* Balint Pato +\r\n* Matti Picus\r\n* Ilhan Polat\r\n* poom +\r\n* Siddhesh Poyarekar\r\n* Vladyslav Rachek +\r\n* Bharat Raghunathan\r\n* Manu Rajput +\r\n* Tyler Reddy\r\n* Andrew Reed +\r\n* Lucas Roberts\r\n* Ariel Rokem\r\n* Heshy Roskes\r\n* Matt Ruffalo\r\n* Atsushi Sakai +\r\n* Benjamin Santos +\r\n* Christoph Schock +\r\n* Lisa Schwetlick +\r\n* Chris Simpson +\r\n* Leo Singer\r\n* Kai Striega\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* Kale-ab Tessera +\r\n* Seth Troisi +\r\n* Robert Uhl +\r\n* Paul van Mulbregt\r\n* Vasiliy +\r\n* Isaac Virshup +\r\n* Pauli Virtanen\r\n* Shakthi Visagan +\r\n* Jan Vleeshouwers +\r\n* Sam Wallan +\r\n* Lijun Wang +\r\n* Warren Weckesser\r\n* Richard Weiss +\r\n* wenhui-prudencemed +\r\n* Eric Wieser\r\n* Josh Wilson\r\n* James Wright +\r\n* Ruslan Yevdokymov +\r\n* Ziyao Zhang +\r\n\r\nA total of 129 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.5.0rc2", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.5.0rc2", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.5.0rc2", "url": "https://api.github.com/repos/scipy/scipy/releases/27526120", "dateCreated": "2020-06-13T21:04:39Z", "datePublished": "2020-06-14T02:36:26Z"}, {"tagName": "v1.5.0rc1", "name": "SciPy 1.5.0rc1", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.5.0 Release Notes\r\n==========================\r\n\r\n**Note**: Scipy `1.5.0` is not released yet!\r\n\r\nSciPy `1.5.0` is the culmination of 6 months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.5.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.6+` and NumPy `1.14.5` or greater.\r\n\r\nFor running on PyPy, PyPy3 `6.0+` and NumPy `1.15.0` are required.\r\n\r\nHighlights of this release\r\n----------------------------\r\n\r\n- wrappers for more than a dozen new ``LAPACK`` routines are now available\r\n  in `scipy.linalg.lapack`\r\n- Improved support for leveraging 64-bit integer size from linear algebra\r\n  backends\r\n- addition of the probability distribution for two-sided one-sample \r\n  Kolmogorov-Smirnov tests\r\n\r\n\r\nNew features\r\n=========\r\n\r\n`scipy.cluster` improvements\r\n--------------------------------\r\nInitialization of `scipy.cluster.vq.kmeans2` using ``minit=\"++\"`` had a \r\nquadratic complexity in the number of samples. It has been improved, resulting \r\nin a much faster initialization with quasi-linear complexity.\r\n\r\n`scipy.cluster.hierarchy.dendrogram` now respects the ``matplotlib`` color\r\npalette\r\n\r\n`scipy.fft` improvements\r\n------------------------------\r\nA new keyword-only argument ``plan`` is added to all FFT functions in this \r\nmodule. It is reserved for passing in a precomputed plan from libraries \r\nproviding a FFT backend (such as ``PyFFTW`` and ``mkl-fft``), and it is \r\ncurrently not used in SciPy.\r\n\r\n`scipy.integrate` improvements\r\n----------------------------------\r\n\r\n\r\n`scipy.interpolate` improvements\r\n-------------------------------------\r\n\r\n`scipy.io` improvements\r\n---------------------------\r\n`scipy.io.wavfile` error messages are more explicit about what's wrong, and \r\nextraneous bytes at the ends of files are ignored instead of raising an error \r\nwhen the data has successfully been read.\r\n\r\n`scipy.io.loadmat` gained a ``simplify_cells`` parameter, which if set to \r\n``True`` simplifies the structure of the return value if the ``.mat`` file \r\ncontains cell arrays.\r\n\r\n``pathlib.Path`` objects are now supported in `scipy.io` Matrix Market I/O\r\nfunctions\r\n\r\n`scipy.linalg` improvements\r\n-------------------------------\r\n`scipy.linalg.eigh` has been improved. Now various ``LAPACK`` drivers can be \r\nselected at will and also subsets of eigenvalues can be requested via \r\n``subset_by_value`` keyword. Another keyword ``subset_by_index`` is introduced.\r\nKeywords ``turbo`` and ``eigvals`` are deprecated.\r\n\r\nSimilarly, standard and generalized Hermitian eigenvalue ``LAPACK`` routines \r\n``?<sy/he>evx`` are added and existing ones now have full ``_lwork``\r\ncounterparts.\r\n\r\nWrappers for the following ``LAPACK`` routines have been added to \r\n`scipy.linalg.lapack`:\r\n\r\n- ``?getc2``: computes the LU factorization of a general matrix with complete \r\n    pivoting\r\n- ``?gesc2``: solves a linear system given an LU factorization from ``?getc2``\r\n- ``?gejsv``: computes the singular value decomposition of a general matrix \r\n    with higher accuracy calculation of tiny singular values and their \r\n    corresponding singular vectors\r\n- ``?geqrfp``: computes the QR factorization of a general matrix with \r\n    non-negative elements on the diagonal of R\r\n- ``?gtsvx``: solves a linear system with general tridiagonal matrix\r\n- ``?gttrf``: computes the LU factorization of a tridiagonal matrix\r\n- ``?gttrs``: solves a linear system given an LU factorization from ``?gttrf``\r\n- ``?ptsvx``: solves a linear system with symmetric positive definite \r\n    tridiagonal matrix\r\n- ``?pttrf``: computes the LU factorization of a symmetric positive definite \r\n    tridiagonal matrix\r\n- ``?pttrs``: solves a linear system given an LU factorization from ``?pttrf``\r\n- ``?pteqr``: computes the eigenvectors and eigenvalues of a positive definite \r\n    tridiagonal matrix\r\n- ``?tbtrs``: solves a linear system with a triangular banded matrix\r\n- ``?csd``: computes the Cosine Sine decomposition of an orthogonal/unitary \r\n    matrix\r\n\r\nGeneralized QR factorization routines (``?geqrf``) now have full ``_lwork`` \r\ncounterparts.\r\n\r\n`scipy.linalg.cossin` Cosine Sine decomposition of unitary matrices has been \r\nadded.\r\n\r\nThe function `scipy.linalg.khatri_rao`, which computes the Khatri-Rao product,\r\nwas added.\r\n\r\nThe new function `scipy.linalg.convolution_matrix` constructs the Toeplitz \r\nmatrix representing one-dimensional convolution.\r\n\r\n`scipy.ndimage` improvements\r\n----------------------------------\r\n\r\n\r\n`scipy.optimize` improvements\r\n----------------------------------\r\nThe finite difference numerical differentiation used in various ``minimize``\r\nmethods that use gradients has several new features:\r\n\r\n-  2-point, 3-point, or complex step finite differences can be used. Previously \r\n  only a 2-step finite difference was available.\r\n-  There is now the possibility to use a relative step size, previously only an\r\n  absolute step size was available.\r\n-  If the ``minimize`` method uses bounds the numerical differentiation strictly \r\n  obeys those limits.\r\n-  The numerical differentiation machinery now makes use of a simple cache, \r\n  which in some cases can reduce the number of function evaluations.\r\n-  ``minimize``'s ``method= 'powell'`` now supports simple bound constraints\r\n\r\nThere have been several improvements to `scipy.optimize.linprog`:\r\n\r\n-  The ``linprog`` benchmark suite has been expanded considerably.\r\n-  ``linprog``'s dense pivot-based redundancy removal routine and sparse \r\n  presolve are faster\r\n-  When ``scikit-sparse`` is available, solving sparse problems with \r\n  ``method='interior-point'`` is faster\r\n\r\nThe caching of values when optimizing a function returning both value and \r\ngradient together has been improved, avoiding repeated function evaluations \r\nwhen using a ``HessianApproximation`` such as ``BFGS``.\r\n\r\n``differential_evolution`` can now use the modern ``np.random.Generator`` as \r\nwell as the legacy ``np.random.RandomState`` as a seed.\r\n\r\n`scipy.signal` improvements\r\n-------------------------------\r\nA new optional argument ``include_nyquist`` is added to ``freqz`` functions in \r\nthis module. It is used for including the last frequency (Nyquist frequency).\r\n\r\n`scipy.signal.find_peaks_cwt` now accepts a ``window_size`` parameter for the \r\nsize of the window used to calculate the noise floor.\r\n\r\n`scipy.sparse` improvements\r\n--------------------------------\r\nOuter indexing is now faster when using a 2d column vector to select column \r\nindices.\r\n\r\n`scipy.sparse.lil.tocsr` is faster\r\n\r\nFixed/improved comparisons between pydata sparse arrays and sparse matrices\r\n\r\nBSR format sparse multiplication performance has been improved.\r\n\r\n`scipy.sparse.linalg.LinearOperator` has gained the new ``ndim`` class\r\nattribute\r\n\r\n`scipy.spatial` improvements\r\n--------------------------------\r\n`scipy.spatial.geometric_slerp` has been added to enable geometric \r\nspherical linear interpolation on an n-sphere\r\n\r\n`scipy.spatial.SphericalVoronoi` now supports calculation of region areas in 2D \r\nand 3D cases\r\n\r\nThe tree building algorithm used by ``cKDTree`` has improved from quadratic\r\nworst case time complexity to loglinear. Benchmarks are also now available for\r\nbuilding and querying of balanced/unbalanced kd-trees.\r\n\r\n`scipy.special` improvements\r\n---------------------------------\r\nThe following functions now have Cython interfaces in `cython_special`:\r\n\r\n-  `scipy.special.erfinv`\r\n-  `scipy.special.erfcinv`\r\n-  `scipy.special.spherical_jn`\r\n-  `scipy.special.spherical_yn`\r\n-  `scipy.special.spherical_in`\r\n-  `scipy.special.spherical_kn`\r\n\r\n`scipy.special.log_softmax` has been added to calculate the logarithm of softmax \r\nfunction. It provides better accuracy than ``log(scipy.special.softmax(x))`` for \r\ninputs that make softmax saturate.\r\n\r\n`scipy.stats` improvements\r\n-------------------------------\r\nThe function for generating random samples in `scipy.stats.dlaplace` has been \r\nimproved. The new function is approximately twice as fast with a memory\r\nfootprint reduction between 25 % and 60 % (see gh-11069).\r\n\r\n`scipy.stats` functions that accept a seed for reproducible calculations using \r\nrandom number generation (e.g. random variates from distributions) can now use \r\nthe modern ``np.random.Generator`` as well as the legacy \r\n``np.random.RandomState`` as a seed.\r\n\r\nThe ``axis`` parameter was added to `scipy.stats.rankdata`. This allows slices \r\nof an array along the given axis to be ranked independently.\r\n\r\nThe ``axis`` parameter was added to `scipy.stats.f_oneway`, allowing it to\r\ncompute multiple one-way ANOVA tests for data stored in n-dimensional\r\narrays.  The performance of ``f_oneway`` was also improved for some cases.\r\n\r\nThe PDF and CDF methods for ``stats.geninvgauss`` are now significantly faster \r\nas  the numerical integration to calculate the CDF uses a Cython based \r\n``LowLevelCallable``.\r\n\r\nMoments of the normal distribution (`scipy.stats.norm`) are now calculated using \r\nanalytical formulas instead of numerical integration for greater speed and \r\naccuracy\r\n\r\nMoments and entropy trapezoidal distribution (`scipy.stats.trapz`) are now \r\ncalculated using analytical formulas instead of numerical integration for \r\ngreater speed and accuracy\r\n\r\nMethods of the truncated normal distribution (`scipy.stats.truncnorm`), \r\nespecially ``_rvs``, are significantly faster after a complete rewrite.\r\n\r\nThe `fit` method of the Laplace distribution,  `scipy.stats.laplace`, now uses \r\nthe analytical formulas for the maximum likelihood estimates of the parameters.\r\n\r\nGeneration of random variates is now thread safe for all SciPy distributions. \r\n3rd-party distributions may need to modify the signature of the ``_rvs()`` \r\nmethod to conform to ``_rvs(self, ..., size=None, random_state=None)``. (A \r\none-time VisibleDeprecationWarning is emitted when using non-conformant \r\ndistributions.)\r\n\r\nThe Kolmogorov-Smirnov two-sided test statistic distribution \r\n(`scipy.stats.kstwo`) was added. Calculates the distribution of the K-S \r\ntwo-sided statistic ``D_n`` for a sample of size n, using a mixture of exact \r\nand asymptotic algorithms.\r\n\r\nThe new function ``median_abs_deviation`` replaces the deprecated \r\n``median_absolute_deviation``.\r\n\r\nThe ``wilcoxon`` function now computes the p-value for Wilcoxon's signed rank \r\ntest using the exact distribution for inputs up to length 25.  The function has \r\na new ``mode`` parameter to specify how the p-value is to be computed.  The \r\ndefault is ``\"auto\"``, which uses the exact distribution for inputs up to length \r\n25 and the normal approximation for larger inputs.\r\n\r\nAdded a new Cython-based implementation to evaluate guassian kernel estimates,\r\nwhich should improve the performance of ``gaussian_kde``\r\n\r\nThe ``winsorize`` function now has a ``nan_policy`` argument for refined\r\nhandling of ``nan`` input values.\r\n\r\nThe ``binned_statistic_dd`` function with ``statistic=\"std\"`` performance was\r\nimproved by ~4x.\r\n\r\n``scipy.stats.kstest(rvs, cdf,...)`` now handles both one-sample and \r\ntwo-sample testing. The one-sample variation uses `scipy.stats.ksone` \r\n(or `scipy.stats.kstwo` with back off to `scipy.stats.kstwobign`) to calculate \r\nthe p-value. The two-sample variation, invoked if ``cdf`` is array_like, uses \r\nan algorithm described by Hodges to compute the probability directly, only \r\nbacking off to `scipy.stats.kstwo` in case of overflow. The result in both \r\ncases is more accurate p-values, especially for two-sample testing with \r\nsmaller (or quite different) sizes.\r\n\r\n`scipy.stats.maxwell` performance improvements include a 20 % speed up for\r\n`fit()`` and 5 % for ``pdf()``\r\n\r\n`scipy.stats.shapiro` and `scipy.stats.jarque_bera` now return a named tuple \r\nfor greater consistency with other ``stats`` functions\r\n\r\nDeprecated features\r\n=============\r\n\r\n`scipy` deprecations\r\n----------------------\r\n\r\n`scipy.special` changes\r\n--------------------------\r\nThe ``bdtr``, ``bdtrc``, and ``bdtri`` functions are deprecating non-negative \r\nnon-integral ``n`` arguments.\r\n\r\n`scipy.stats` changes\r\n-----------------------\r\nThe function ``median_absolute_deviation`` is deprecated. Use \r\n``median_abs_deviation`` instead.\r\n\r\nThe use of the string ``\"raw\"`` with the ``scale`` parameter of ``iqr`` is \r\ndeprecated. Use ``scale=1`` instead.\r\n\r\nBackwards incompatible changes\r\n======================\r\n\r\n`scipy.interpolate` changes\r\n-------------------------------\r\n\r\n`scipy.linalg` changes\r\n------------------------\r\nThe output signatures of ``?syevr``, ``?heevr`` have been changed from \r\n``w, v, info`` to ``w, v, m, isuppz, info``\r\n\r\nThe order of output arguments ``w``, ``v`` of ``<sy/he>{gv, gvd, gvx}`` is \r\nswapped.\r\n\r\n`scipy.signal` changes\r\n-------------------------\r\nThe output length of `scipy.signal.upfirdn` has been corrected, resulting \r\noutputs may now be shorter for some combinations of up/down ratios and input \r\nsignal and filter lengths.\r\n\r\n`scipy.signal.resample` now supports a ``domain`` keyword argument for\r\nspecification of time or frequency domain input.\r\n\r\n`scipy.stats` changes\r\n------------------------\r\n\r\n\r\nOther changes\r\n==========\r\nImproved support for leveraging 64-bit integer size from linear algebra backends\r\nin several parts of the SciPy codebase.\r\n\r\nShims designed to ensure the compatibility of SciPy with Python 2.7 have now \r\nbeen removed.\r\n\r\nMany warnings due to unused imports and unused assignments have been addressed.\r\n\r\nMany usage examples were added to function docstrings, and many input \r\nvalidations and intuitive exception messages have been added throughout the\r\ncodebase.\r\n\r\nEarly stage adoption of type annotations in a few parts of the codebase\r\n\r\n\r\nAuthors\r\n=======\r\n\r\n* @endolith\r\n* Hameer Abbasi\r\n* ADmitri +\r\n* Wesley Alves +\r\n* Berkay Antmen +\r\n* Sylwester Arabas +\r\n* Arne K\u00c3\u00bcderle +\r\n* Christoph Baumgarten\r\n* Peter Bell\r\n* Felix Berkenkamp\r\n* Jord\u00c3\u00a3o Bragantini +\r\n* Clemens Brunner +\r\n* Evgeni Burovski\r\n* Matthias Bussonnier +\r\n* CJ Carey\r\n* Derrick Chambers +\r\n* Leander Claes +\r\n* Christian Clauss\r\n* Luigi F. Cruz +\r\n* dankleeman\r\n* Andras Deak\r\n* Milad Sadeghi DM +\r\n* jeremie du boisberranger +\r\n* Stefan Endres\r\n* Malte Esders +\r\n* Leo Fang +\r\n* felixhekhorn +\r\n* Isuru Fernando\r\n* Andrew Fowlie\r\n* Lakshay Garg +\r\n* Gaurav Gijare +\r\n* Ralf Gommers\r\n* Emmanuelle Gouillart +\r\n* Kevin Green +\r\n* Martin Grignard +\r\n* Maja Gwozdz\r\n* gyu-don +\r\n* Matt Haberland\r\n* hakeemo +\r\n* Charles Harris\r\n* Alex Henrie\r\n* Santi Hernandez +\r\n* William Hickman +\r\n* Till Hoffmann +\r\n* Joseph T. Iosue +\r\n* Anany Shrey Jain\r\n* Jakob Jakobson\r\n* Charles Jekel +\r\n* Julien Jerphanion +\r\n* Jiacheng-Liu +\r\n* Christoph Kecht +\r\n* Paul Kienzle +\r\n* Reidar Kind +\r\n* Dmitry E. Kislov +\r\n* Konrad +\r\n* Konrad0\r\n* Takuya KOUMURA +\r\n* Krzysztof Pi\u00c3\u00b3ro\r\n* Peter Mahler Larsen\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory Lee +\r\n* Gregory R. Lee\r\n* Chelsea Liu\r\n* Cong Ma +\r\n* Kevin Mader +\r\n* Maja Gw\u00c3\u00b3\u00c5\u00bad\u00c5\u00ba +\r\n* Alex Marvin +\r\n* Matthias K\u00c3\u00bcmmerer\r\n* Nikolay Mayorov\r\n* Mazay0 +\r\n* G. D. McBain\r\n* Nicholas McKibben +\r\n* Sabrina J. Mielke +\r\n* Sebastian J. Mielke +\r\n* Milo\u00c5\u00a1 Komar\u00c4\u008devi\u00c4\u2021 +\r\n* Shubham Mishra +\r\n* Santiago M. Mola +\r\n* Grzegorz Mrukwa +\r\n* Peyton Murray\r\n* Andrew Nelson\r\n* Nico Schl\u00c3\u00b6mer\r\n* nwjenkins +\r\n* odidev +\r\n* Sambit Panda\r\n* Vikas Pandey +\r\n* Rick Paris +\r\n* Harshal Prakash Patankar +\r\n* Balint Pato +\r\n* Matti Picus\r\n* Ilhan Polat\r\n* poom +\r\n* Siddhesh Poyarekar\r\n* Vladyslav Rachek +\r\n* Bharat Raghunathan\r\n* Manu Rajput +\r\n* Tyler Reddy\r\n* Andrew Reed +\r\n* Lucas Roberts\r\n* Ariel Rokem\r\n* Heshy Roskes\r\n* Matt Ruffalo\r\n* Atsushi Sakai +\r\n* Benjamin Santos +\r\n* Christoph Schock +\r\n* Lisa Schwetlick +\r\n* Chris Simpson +\r\n* Leo Singer\r\n* Kai Striega\r\n* S\u00c3\u00b8ren Fuglede J\u00c3\u00b8rgensen\r\n* Kale-ab Tessera +\r\n* Seth Troisi +\r\n* Robert Uhl +\r\n* Paul van Mulbregt\r\n* Vasiliy +\r\n* Isaac Virshup +\r\n* Pauli Virtanen\r\n* Shakthi Visagan +\r\n* Jan Vleeshouwers +\r\n* Sam Wallan +\r\n* Lijun Wang +\r\n* Warren Weckesser\r\n* Richard Weiss +\r\n* wenhui-prudencemed +\r\n* Eric Wieser\r\n* Josh Wilson\r\n* James Wright +\r\n* Ruslan Yevdokymov +\r\n* Ziyao Zhang +\r\n\r\nA total of 129 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.5.0rc1", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.5.0rc1", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.5.0rc1", "url": "https://api.github.com/repos/scipy/scipy/releases/27065970", "dateCreated": "2020-05-30T01:50:59Z", "datePublished": "2020-05-30T21:18:50Z"}, {"tagName": "v1.2.3", "name": "SciPy 1.2.3", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.2.3 Release Notes\r\n==========================\r\n\r\nSciPy `1.2.3` is a bug-fix release with no new features compared to `1.2.2`. It is\r\npart of the long-term support (LTS) release series for Python `2.7`.\r\n\r\nAuthors\r\n=======\r\n\r\n* Geordie McBain\r\n* Matt Haberland\r\n* David Hagen\r\n* Tyler Reddy\r\n* Pauli Virtanen\r\n* Eric Larson\r\n* Yu Feng\r\n* ananyashreyjain\r\n* Nikolay Mayorov\r\n* Evgeni Burovski \r\n* Warren Weckesser", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.2.3", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.2.3", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.2.3", "url": "https://api.github.com/repos/scipy/scipy/releases/23013857", "dateCreated": "2020-01-20T20:48:12Z", "datePublished": "2020-01-21T17:46:19Z"}, {"tagName": "v1.4.1", "name": "SciPy 1.4.1", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.4.1 Release Notes\r\n==========================\r\n\r\nSciPy `1.4.1` is a bug-fix release with no new features\r\ncompared to `1.4.0`. Importantly, it aims to fix a problem\r\nwhere an older version of `pybind11` may cause a segmentation\r\nfault when imported alongside incompatible libraries.\r\n\r\nAuthors\r\n=======\r\n\r\n* Ralf Gommers\r\n* Tyler Reddy", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.4.1", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.4.1", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.4.1", "url": "https://api.github.com/repos/scipy/scipy/releases/22360732", "dateCreated": "2019-12-18T19:35:57Z", "datePublished": "2019-12-19T15:57:11Z"}, {"tagName": "v1.4.0", "name": "SciPy 1.4.0", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.4.0 Release Notes\r\n===================\r\n\r\nSciPy `1.4.0` is the culmination of 6 months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.4.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.5+` and NumPy `>=1.13.3` (for Python `3.5`, `3.6`),\r\n`>=1.14.5` (for Python `3.7`), `>= 1.17.3` (for Python `3.8`)\r\n\r\nFor running on PyPy, PyPy3 `6.0+` and NumPy `1.15.0` are required.\r\n\r\nHighlights of this release\r\n-------------------------\r\n\r\n- a new submodule, `scipy.fft`, now supersedes `scipy.fftpack`; this\r\n  means support for ``long double`` transforms, faster multi-dimensional\r\n  transforms, improved algorithm time complexity, release of the global\r\n  intepreter lock, and control over threading behavior\r\n- support for ``pydata/sparse`` arrays in `scipy.sparse.linalg`\r\n- substantial improvement to the documentation and functionality of\r\n  several `scipy.special` functions, and some new additions\r\n- the generalized inverse Gaussian distribution has been added to\r\n  `scipy.stats`\r\n- an implementation of the Edmonds-Karp algorithm in\r\n  `scipy.sparse.csgraph.maximum_flow`\r\n- `scipy.spatial.SphericalVoronoi` now supports n-dimensional input, \r\n   has linear memory complexity, improved performance, and\r\n   supports single-hemisphere generators\r\n\r\n\r\nNew features\r\n==========\r\n\r\nInfrastructure\r\n----------------\r\nDocumentation can now be built with ``runtests.py --doc``\r\n\r\nA ``Dockerfile`` is now available in the ``scipy/scipy-dev`` repository to\r\nfacilitate getting started with SciPy development.\r\n\r\n`scipy.constants` improvements\r\n----------------------------------\r\n`scipy.constants` has been updated with the CODATA 2018 constants.\r\n\r\n\r\n`scipy.fft` added\r\n-------------------\r\n`scipy.fft` is a new submodule that supersedes the `scipy.fftpack` submodule. \r\nFor the most part, this is a drop-in replacement for ``numpy.fft`` and \r\n`scipy.fftpack` alike. With some important differences, `scipy.fft`:\r\n- uses NumPy's conventions for real transforms (``rfft``). This means the \r\nreturn value is a complex array, half the size of the full ``fft`` output.\r\nThis is different from the output of ``fftpack`` which returned a real array \r\nrepresenting complex components packed together.\r\n- the inverse real to real transforms (``idct`` and ``idst``) are normalized \r\nfor ``norm=None`` in thesame way as ``ifft``. This means the identity \r\n``idct(dct(x)) == x`` is now ``True`` for all norm modes.\r\n- does not include the convolutions or pseudo-differential operators\r\nfrom ``fftpack``.\r\n\r\nThis submodule is based on the ``pypocketfft`` library, developed by the \r\nauthor of ``pocketfft`` which was recently adopted by NumPy as well.\r\n``pypocketfft`` offers a number of advantages over fortran ``FFTPACK``:\r\n- support for long double (``np.longfloat``) precision transforms.\r\n- faster multi-dimensional transforms using vectorisation\r\n- Bluestein\u2019s algorithm removes the worst-case ``O(n^2)`` complexity of\r\n``FFTPACK``\r\n- the global interpreter lock (``GIL``) is released during transforms\r\n- optional multithreading of multi-dimensional transforms via the ``workers``\r\nargument\r\n\r\nNote that `scipy.fftpack` has not been deprecated and will continue to be \r\nmaintained but is now considered legacy. New code is recommended to use \r\n`scipy.fft` instead, where possible.\r\n\r\n`scipy.fftpack` improvements\r\n--------------------------------\r\n`scipy.fftpack` now uses pypocketfft to perform its FFTs, offering the same\r\nspeed and accuracy benefits listed for scipy.fft above but without the\r\nimproved API.\r\n\r\n`scipy.integrate` improvements\r\n----------------------------------\r\n\r\nThe function `scipy.integrate.solve_ivp` now has an ``args`` argument.\r\nThis allows the user-defined functions passed to the function to have\r\nadditional parameters without having to create wrapper functions or\r\nlambda expressions for them.\r\n\r\n`scipy.integrate.solve_ivp` can now return a ``y_events`` attribute \r\nrepresenting the solution of the ODE at event times\r\n\r\nNew ``OdeSolver`` is implemented --- ``DOP853``. This is a high-order explicit\r\nRunge-Kutta method originally implemented in Fortran. Now we provide a pure \r\nPython implementation usable through ``solve_ivp`` with all its features.\r\n\r\n`scipy.integrate.quad` provides better user feedback when break points are \r\nspecified with a weighted integrand.\r\n\r\n`scipy.integrate.quad_vec` is now available for general purpose integration\r\nof vector-valued functions\r\n\r\n\r\n`scipy.interpolate` improvements\r\n-----------------------------------\r\n`scipy.interpolate.pade` now handles complex input data gracefully\r\n\r\n`scipy.interpolate.Rbf` can now interpolate multi-dimensional functions\r\n\r\n`scipy.io` improvements\r\n---------------------------\r\n\r\n`scipy.io.wavfile.read` can now read data from a `WAV` file that has a\r\nmalformed header, similar to other modern `WAV` file parsers\r\n\r\n`scipy.io.FortranFile` now has an expanded set of available ``Exception``\r\nclasses for handling poorly-formatted files\r\n\r\n\r\n`scipy.linalg` improvements\r\n-------------------------------\r\nThe function ``scipy.linalg.subspace_angles(A, B)`` now gives correct\r\nresults for complex-valued matrices. Before this, the function only returned\r\ncorrect values for real-valued matrices.\r\n\r\nNew boolean keyword argument ``check_finite`` for `scipy.linalg.norm`; whether \r\nto check that the input matrix contains only finite numbers. Disabling may \r\ngive a performance gain, but may result in problems (crashes, non-termination)\r\nif the inputs do contain infinities or NaNs.\r\n\r\n`scipy.linalg.solve_triangular` has improved performance for a C-ordered\r\ntriangular matrix\r\n\r\n``LAPACK`` wrappers have been added for ``?geequ``, ``?geequb``, ``?syequb``,\r\nand ``?heequb``\r\n\r\nSome performance improvements may be observed due to an internal optimization\r\nin operations involving LAPACK routines via ``_compute_lwork``. This is\r\nparticularly true for operations on small arrays.\r\n\r\nBlock ``QR`` wrappers are now available in `scipy.linalg.lapack`\r\n\r\n\r\n`scipy.ndimage` improvements\r\n---------------------------------\r\n\r\n\r\n`scipy.optimize` improvements\r\n---------------------------------\r\nIt is now possible to use linear and non-linear constraints with \r\n`scipy.optimize.differential_evolution`.\r\n\r\n`scipy.optimize.linear_sum_assignment` has been re-written in C++ to improve \r\nperformance, and now allows input costs to be infinite.\r\n\r\nA ``ScalarFunction.fun_and_grad`` method was added for convenient simultaneous\r\nretrieval of a function and gradient evaluation\r\n\r\n`scipy.optimize.minimize` ``BFGS`` method has improved performance by avoiding\r\nduplicate evaluations in some cases\r\n\r\nBetter user feedback is provided when an objective function returns an array\r\ninstead of a scalar.\r\n\r\n\r\n`scipy.signal` improvements\r\n-------------------------------\r\n\r\nAdded a new function to calculate convolution using the overlap-add method,\r\nnamed `scipy.signal.oaconvolve`. Like `scipy.signal.fftconvolve`, this\r\nfunction supports specifying dimensions along which to do the convolution.\r\n\r\n`scipy.signal.cwt` now supports complex wavelets.\r\n\r\nThe implementation of ``choose_conv_method`` has been updated to reflect the \r\nnew FFT implementation. In addition, the performance has been significantly \r\nimproved (with rather drastic improvements in edge cases).\r\n\r\nThe function ``upfirdn`` now has a ``mode`` keyword argument that can be used\r\nto select the signal extension mode used at the signal boundaries. These modes\r\nare also available for use in ``resample_poly`` via a newly added ``padtype``\r\nargument.\r\n\r\n`scipy.signal.sosfilt` now benefits from Cython code for improved performance\r\n\r\n`scipy.signal.resample` should be more efficient by leveraging ``rfft`` when\r\npossible\r\n\r\n`scipy.sparse` improvements\r\n-------------------------------\r\nIt is now possible to use the LOBPCG method in `scipy.sparse.linalg.svds`.\r\n\r\n`scipy.sparse.linalg.LinearOperator` now supports the operation ``rmatmat`` \r\nfor adjoint matrix-matrix multiplication, in addition to ``rmatvec``.\r\n\r\nMultiple stability updates enable float32 support in the LOBPCG eigenvalue \r\nsolver for symmetric and Hermitian eigenvalues problems in \r\n``scipy.sparse.linalg.lobpcg``.\r\n\r\nA solver for the maximum flow problem has been added as\r\n`scipy.sparse.csgraph.maximum_flow`.\r\n\r\n`scipy.sparse.csgraph.maximum_bipartite_matching` now allows non-square inputs,\r\nno longer requires a perfect matching to exist, and has improved performance.\r\n\r\n`scipy.sparse.lil_matrix` conversions now perform better in some scenarios\r\n\r\nBasic support is available for ``pydata/sparse`` arrays in\r\n`scipy.sparse.linalg`\r\n\r\n`scipy.sparse.linalg.spsolve_triangular` now supports the ``unit_diagonal``\r\nargument to improve call signature similarity with its dense counterpart,\r\n`scipy.linalg.solve_triangular`\r\n\r\n``assertAlmostEqual`` may now be used with sparse matrices, which have added\r\nsupport for ``__round__``\r\n\r\n`scipy.spatial` improvements\r\n--------------------------------\r\nThe bundled Qhull library was upgraded to version 2019.1, fixing several\r\nissues. Scipy-specific patches are no longer applied to it.\r\n\r\n`scipy.spatial.SphericalVoronoi` now has linear memory complexity, improved\r\nperformance, and supports single-hemisphere generators. Support has also been\r\nadded for handling generators that lie on a great circle arc (geodesic input)\r\nand for generators in n-dimensions.\r\n\r\n`scipy.spatial.transform.Rotation` now includes functions for calculation of a\r\nmean rotation, generation of the 3D rotation groups, and reduction of rotations\r\nwith rotational symmetries.\r\n\r\n`scipy.spatial.transform.Slerp` is now callable with a scalar argument\r\n\r\n`scipy.spatial.voronoi_plot_2d` now supports furthest site Voronoi diagrams\r\n\r\n`scipy.spatial.Delaunay` and `scipy.spatial.Voronoi` now have attributes\r\nfor tracking whether they are furthest site diagrams\r\n\r\n`scipy.special` improvements\r\n--------------------------------\r\nThe Voigt profile has been added as `scipy.special.voigt_profile`.\r\n\r\nA real dispatch has been added for the Wright Omega function\r\n(`scipy.special.wrightomega`).\r\n\r\nThe analytic continuation of the Riemann zeta function has been added. (The \r\nRiemann zeta function is the one-argument variant of `scipy.special.zeta`.)\r\n\r\nThe complete elliptic integral of the first kind (`scipy.special.ellipk`) is \r\nnow available in `scipy.special.cython_special`.\r\n\r\nThe accuracy of `scipy.special.hyp1f1` for real arguments has been improved.\r\n\r\nThe documentation of many functions has been improved.\r\n\r\n`scipy.stats` improvements\r\n------------------------------\r\n`scipy.stats.multiscale_graphcorr` added as an independence test that\r\noperates on high dimensional and nonlinear data sets. It has higher statistical\r\npower than other `scipy.stats` tests while being the only one that operates on\r\nmultivariate data.\r\n\r\nThe generalized inverse Gaussian distribution (`scipy.stats.geninvgauss`) has \r\nbeen added.\r\n\r\nIt is now possible to efficiently reuse `scipy.stats.binned_statistic_dd` \r\nwith new values by providing the result of a previous call to the function.\r\n\r\n`scipy.stats.hmean` now handles input with zeros more gracefully.\r\n\r\nThe beta-binomial distribution is now available in `scipy.stats.betabinom`.\r\n\r\n`scipy.stats.zscore`, `scipy.stats.circmean`, `scipy.stats.circstd`, and\r\n`scipy.stats.circvar` now support the ``nan_policy`` argument for enhanced\r\nhandling of ``NaN`` values\r\n\r\n`scipy.stats.entropy` now accepts an ``axis`` argument\r\n\r\n`scipy.stats.gaussian_kde.resample` now accepts a ``seed`` argument to empower\r\nreproducibility\r\n\r\n`scipy.stats.kendalltau` performance has improved, especially for large inputs,\r\ndue to improved cache usage\r\n\r\n`scipy.stats.truncnorm` distribution has been rewritten to support much wider\r\ntails\r\n\r\n\r\nDeprecated features\r\n===============\r\n\r\n`scipy` deprecations\r\n------------------------\r\nSupport for NumPy functions exposed via the root SciPy namespace is deprecated\r\nand will be removed in 2.0.0. For example, if you use ``scipy.rand`` or\r\n``scipy.diag``, you should change your code to directly use\r\n``numpy.random.default_rng`` or ``numpy.diag``, respectively.\r\nThey remain available in the currently continuing Scipy 1.x release series.\r\n\r\nThe exception to this rule is using ``scipy.fft`` as a function --\r\n:mod:`scipy.fft` is now meant to be used only as a module, so the ability to\r\ncall ``scipy.fft(...)`` will be removed in SciPy 1.5.0.\r\n\r\nIn `scipy.spatial.Rotation` methods ``from_dcm``, ``as_dcm`` were renamed to \r\n``from_matrix``, ``as_matrix`` respectively. The old names will be removed in \r\nSciPy 1.6.0.\r\n\r\nMethod ``Rotation.match_vectors`` was deprecated in favor of \r\n``Rotation.align_vectors``, which provides a more logical and \r\ngeneral API to the same functionality. The old method \r\nwill be removed in SciPy 1.6.0.\r\n\r\nBackwards incompatible changes\r\n========================\r\n\r\n`scipy.special` changes\r\n------------------------\r\nThe deprecated functions ``hyp2f0``, ``hyp1f2``, and ``hyp3f0`` have been\r\nremoved.\r\n\r\nThe deprecated function ``bessel_diff_formula`` has been removed.\r\n\r\nThe function ``i0`` is no longer registered with ``numpy.dual``, so that \r\n``numpy.dual.i0`` will unconditionally refer to the NumPy version regardless \r\nof whether `scipy.special` is imported.\r\n\r\nThe function ``expn`` has been changed to return ``nan`` outside of its \r\ndomain of definition (``x, n < 0``) instead of ``inf``.\r\n\r\n`scipy.sparse` changes\r\n------------------------\r\nSparse matrix reshape now raises an error if shape is not two-dimensional, \r\nrather than guessing what was meant. The behavior is now the same as before \r\nSciPy 1.1.0.\r\n\r\n``CSR`` and ``CSC`` sparse matrix classes should now return empty matrices\r\nof the same type when indexed out of bounds. Previously, for some versions\r\nof SciPy, this would raise an ``IndexError``. The change is largely motivated\r\nby greater consistency with ``ndarray`` and ``numpy.matrix`` semantics.\r\n\r\n`scipy.signal` changes\r\n-------------------------\r\n`scipy.signal.resample` behavior for length-1 signal inputs has been\r\nfixed to output a constant (DC) value rather than an impulse, consistent with\r\nthe assumption of signal periodicity in the FFT method.\r\n\r\n`scipy.signal.cwt` now performs complex conjugation and time-reversal of\r\nwavelet data, which is a backwards-incompatible bugfix for\r\ntime-asymmetric wavelets.\r\n\r\n`scipy.stats` changes\r\n------------------------\r\n`scipy.stats.loguniform` added with better documentation as (an alias for\r\n``scipy.stats.reciprocal``). ``loguniform`` generates random variables\r\nthat are equally likely in the log space; e.g., ``1``, ``10`` and ``100``\r\nare all equally likely if ``loguniform(10 ** 0, 10 ** 2).rvs()`` is used.\r\n\r\n\r\nOther changes\r\n===========\r\nThe ``LSODA`` method of `scipy.integrate.solve_ivp` now correctly detects stiff\r\nproblems.\r\n\r\n`scipy.spatial.cKDTree` now accepts and correctly handles empty input data\r\n\r\n`scipy.stats.binned_statistic_dd` now calculates the standard deviation \r\nstatistic in a numerically stable way.\r\n\r\n`scipy.stats.binned_statistic_dd` now throws an error if the input data \r\ncontains either ``np.nan`` or ``np.inf``. Similarly, in `scipy.stats` now all \r\ncontinuous distributions' ``.fit()`` methods throw an error if the input data\r\ncontain any instance of either ``np.nan`` or ``np.inf``.\r\n\r\n\r\nAuthors\r\n=======\r\n\r\n* @endolith\r\n* @wenhui-prudencemed +\r\n* Abhinav +\r\n* Anne Archibald\r\n* ashwinpathak20nov1996 +\r\n* Danilo Augusto +\r\n* Nelson Auner +\r\n* aypiggott +\r\n* Christoph Baumgarten\r\n* Peter Bell\r\n* Sebastian Berg\r\n* Arman Bilge +\r\n* Benedikt Boecking +\r\n* Christoph Boeddeker +\r\n* Daniel Bunting\r\n* Evgeni Burovski\r\n* Angeline Burrell +\r\n* Angeline G. Burrell +\r\n* CJ Carey\r\n* Carlos Ramos Carre\u00f1o +\r\n* Mak Sze Chun +\r\n* Malayaja Chutani +\r\n* Christian Clauss +\r\n* Jonathan Conroy +\r\n* Stephen P Cook +\r\n* Dylan Cutler +\r\n* Anirudh Dagar +\r\n* Aidan Dang +\r\n* dankleeman +\r\n* Brandon David +\r\n* Tyler Dawson +\r\n* Dieter Werthm\u00fcller\r\n* Joe Driscoll +\r\n* Jakub Dyczek +\r\n* D\u00e1vid Bodn\u00e1r\r\n* Fletcher Easton +\r\n* Stefan Endres\r\n* etienne +\r\n* Johann Faouzi\r\n* Yu Feng\r\n* Isuru Fernando +\r\n* Matthew H Flamm\r\n* Martin Gauch +\r\n* Gabriel Gerlero +\r\n* Ralf Gommers\r\n* Chris Gorgolewski +\r\n* Domen Gorjup +\r\n* Edouard Goudenhoofdt +\r\n* Jan Gwinner +\r\n* Maja Gwozdz +\r\n* Matt Haberland\r\n* hadshirt +\r\n* Pierre Haessig +\r\n* David Hagen\r\n* Charles Harris\r\n* Gina Helfrich +\r\n* Alex Henrie +\r\n* Francisco J. Hernandez Heras +\r\n* Andreas Hilboll\r\n* Lindsey Hiltner\r\n* Thomas Hisch\r\n* Min ho Kim +\r\n* Gert-Ludwig Ingold\r\n* jakobjakobson13 +\r\n* Todd Jennings\r\n* He Jia\r\n* Muhammad Firmansyah Kasim +\r\n* Andrew Knyazev +\r\n* Holger Kohr +\r\n* Mateusz Konieczny +\r\n* Krzysztof Pi\u00f3ro +\r\n* Philipp Lang +\r\n* Peter Mahler Larsen +\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory R. Lee\r\n* Chelsea Liu +\r\n* Jesse Livezey\r\n* Peter Lysakovski +\r\n* Jason Manley +\r\n* Michael Marien +\r\n* Nikolay Mayorov\r\n* G. D. McBain +\r\n* Sam McCormack +\r\n* Melissa Weber Mendon\u00e7a +\r\n* Kevin Michel +\r\n* mikeWShef +\r\n* Sturla Molden\r\n* Eric Moore\r\n* Peyton Murray +\r\n* Andrew Nelson\r\n* Clement Ng +\r\n* Juan Nunez-Iglesias\r\n* Renee Otten +\r\n* Kellie Ottoboni +\r\n* Ayappan P\r\n* Sambit Panda +\r\n* Tapasweni Pathak +\r\n* Oleksandr Pavlyk\r\n* Fabian Pedregosa\r\n* Petar Mlinari\u0107\r\n* Matti Picus\r\n* Marcel Plch +\r\n* Christoph Pohl +\r\n* Ilhan Polat\r\n* Siddhesh Poyarekar +\r\n* Ioannis Prapas +\r\n* James Alan Preiss +\r\n* Yisheng Qiu +\r\n* Eric Quintero\r\n* Bharat Raghunathan +\r\n* Tyler Reddy\r\n* Joscha Reimer\r\n* Antonio Horta Ribeiro\r\n* Lucas Roberts\r\n* rtshort +\r\n* Josua Sassen\r\n* Kevin Sheppard\r\n* Scott Sievert\r\n* Leo Singer\r\n* Kai Striega\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* tborisow +\r\n* \u00c9tienne Tremblay +\r\n* tuxcell +\r\n* Miguel de Val-Borro\r\n* Andrew Valentine +\r\n* Hugo van Kemenade\r\n* Paul van Mulbregt\r\n* Sebastiano Vigna\r\n* Pauli Virtanen\r\n* Dany Vohl +\r\n* Ben Walsh +\r\n* Huize Wang +\r\n* Warren Weckesser\r\n* Anreas Weh +\r\n* Joseph Weston +\r\n* Adrian Wijaya +\r\n* Timothy Willard +\r\n* Josh Wilson\r\n* Kentaro Yamamoto +\r\n* Dave Zbarsky +\r\n\r\nA total of 142 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.\r\n", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.4.0", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.4.0", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.4.0", "url": "https://api.github.com/repos/scipy/scipy/releases/22271985", "dateCreated": "2019-12-16T13:46:23Z", "datePublished": "2019-12-16T23:33:00Z"}, {"tagName": "v1.4.0rc2", "name": "SciPy 1.4.0rc2", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.4.0 Release Notes\r\n==========================\r\n\r\n**Note**: Scipy `1.4.0` is not released yet!\r\n\r\nSciPy `1.4.0` is the culmination of 6 months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.4.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python `3.5+` and NumPy `>=1.13.3` (for Python `3.5`, `3.6`),\r\n`>=1.14.5` (for Python `3.7`), `>= 1.17.3` (for Python `3.8`)\r\n\r\nFor running on PyPy, PyPy3 6.0+ and NumPy 1.15.0 are required.\r\n\r\nHighlights of this release\r\n-----------------------------\r\n\r\n- a new submodule, `scipy.fft`, now supersedes `scipy.fftpack`; this\r\n  means support for ``long double`` transforms, faster multi-dimensional\r\n  transforms, improved algorithm time complexity, release of the global\r\n  intepreter lock, and control over threading behavior\r\n- support for ``pydata/sparse`` arrays in `scipy.sparse.linalg`\r\n- substantial improvement to the documentation and functionality of\r\n  several `scipy.special` functions, and some new additions\r\n- the generalized inverse Gaussian distribution has been added to\r\n  `scipy.stats`\r\n- an implementation of the Edmonds-Karp algorithm in\r\n  `scipy.sparse.csgraph.maximum_flow`\r\n- `scipy.spatial.SphericalVoronoi` now supports n-dimensional input, \r\n   has linear memory complexity, improved performance, and\r\n   supports single-hemisphere generators\r\n\r\n\r\nNew features\r\n============\r\n\r\nInfrastructure\r\n------------------\r\nDocumentation can now be built with ``runtests.py --doc``\r\n\r\nA ``Dockerfile`` is now available in the ``scipy/scipy-dev`` repository to\r\nfacilitate getting started with SciPy development.\r\n\r\n`scipy.constants` improvements\r\n------------------------------------\r\n`scipy.constants` has been updated with the CODATA 2018 constants.\r\n\r\n\r\n`scipy.fft` added\r\n---------------------\r\n`scipy.fft` is a new submodule that supersedes the `scipy.fftpack` submodule. \r\nFor the most part, this is a drop-in replacement for ``numpy.fft`` and \r\n`scipy.fftpack` alike. With some important differences, `scipy.fft`:\r\n- uses NumPy's conventions for real transforms (``rfft``). This means the \r\nreturn value is a complex array, half the size of the full ``fft`` output.\r\nThis is different from the output of ``fftpack`` which returned a real array \r\nrepresenting complex components packed together.\r\n- the inverse real to real transforms (``idct`` and ``idst``) are normalized \r\nfor ``norm=None`` in thesame way as ``ifft``. This means the identity \r\n``idct(dct(x)) == x`` is now ``True`` for all norm modes.\r\n- does not include the convolutions or pseudo-differential operators\r\nfrom ``fftpack``.\r\n\r\nThis submodule is based on the ``pypocketfft`` library, developed by the \r\nauthor of ``pocketfft`` which was recently adopted by NumPy as well.\r\n``pypocketfft`` offers a number of advantages over fortran ``FFTPACK``:\r\n- support for long double (``np.longfloat``) precision transforms.\r\n- faster multi-dimensional transforms using vectorisation\r\n- Bluestein\u2019s algorithm removes the worst-case ``O(n^2)`` complexity of\r\n``FFTPACK``\r\n- the global interpreter lock (``GIL``) is released during transforms\r\n- optional multithreading of multi-dimensional transforms via the ``workers``\r\nargument\r\n\r\nNote that `scipy.fftpack` has not been deprecated and will continue to be \r\nmaintained but is now considered legacy. New code is recommended to use \r\n`scipy.fft` instead, where possible.\r\n\r\n`scipy.fftpack` improvements\r\n-----------------------------------\r\n`scipy.fftpack` now uses pypocketfft to perform its FFTs, offering the same\r\nspeed and accuracy benefits listed for scipy.fft above but without the\r\nimproved API.\r\n\r\n`scipy.integrate` improvements\r\n-------------------------------------\r\n\r\nThe function `scipy.integrate.solve_ivp` now has an ``args`` argument.\r\nThis allows the user-defined functions passed to the function to have\r\nadditional parameters without having to create wrapper functions or\r\nlambda expressions for them.\r\n\r\n`scipy.integrate.solve_ivp` can now return a ``y_events`` attribute \r\nrepresenting the solution of the ODE at event times\r\n\r\nNew ``OdeSolver`` is implemented --- ``DOP853``. This is a high-order explicit\r\nRunge-Kutta method originally implemented in Fortran. Now we provide a pure \r\nPython implementation usable through ``solve_ivp`` with all its features.\r\n\r\n`scipy.integrate.quad` provides better user feedback when break points are \r\nspecified with a weighted integrand.\r\n\r\n`scipy.integrate.quad_vec` is now available for general purpose integration\r\nof vector-valued functions\r\n\r\n\r\n`scipy.interpolate` improvements\r\n--------------------------------------\r\n`scipy.interpolate.pade` now handles complex input data gracefully\r\n\r\n`scipy.interpolate.Rbf` can now interpolate multi-dimensional functions\r\n\r\n`scipy.io` improvements\r\n----------------------------\r\n\r\n`scipy.io.wavfile.read` can now read data from a `WAV` file that has a\r\nmalformed header, similar to other modern `WAV` file parsers\r\n\r\n`scipy.io.FortranFile` now has an expanded set of available ``Exception``\r\nclasses for handling poorly-formatted files\r\n\r\n\r\n`scipy.linalg` improvements\r\n---------------------------------\r\nThe function ``scipy.linalg.subspace_angles(A, B)`` now gives correct\r\nresults for complex-valued matrices. Before this, the function only returned\r\ncorrect values for real-valued matrices.\r\n\r\nNew boolean keyword argument ``check_finite`` for `scipy.linalg.norm`; whether \r\nto check that the input matrix contains only finite numbers. Disabling may \r\ngive a performance gain, but may result in problems (crashes, non-termination)\r\nif the inputs do contain infinities or NaNs.\r\n\r\n`scipy.linalg.solve_triangular` has improved performance for a C-ordered\r\ntriangular matrix\r\n\r\n``LAPACK`` wrappers have been added for ``?geequ``, ``?geequb``, ``?syequb``,\r\nand ``?heequb``\r\n\r\nSome performance improvements may be observed due to an internal optimization\r\nin operations involving LAPACK routines via ``_compute_lwork``. This is\r\nparticularly true for operations on small arrays.\r\n\r\nBlock ``QR`` wrappers are now available in `scipy.linalg.lapack`\r\n\r\n\r\n`scipy.ndimage` improvements\r\n------------------------------------\r\n\r\n\r\n`scipy.optimize` improvements\r\n------------------------------------\r\nIt is now possible to use linear and non-linear constraints with \r\n`scipy.optimize.differential_evolution`.\r\n\r\n`scipy.optimize.linear_sum_assignment` has been re-written in C++ to improve \r\nperformance, and now allows input costs to be infinite.\r\n\r\nA ``ScalarFunction.fun_and_grad`` method was added for convenient simultaneous\r\nretrieval of a function and gradient evaluation\r\n\r\n`scipy.optimize.minimize` ``BFGS`` method has improved performance by avoiding\r\nduplicate evaluations in some cases\r\n\r\nBetter user feedback is provided when an objective function returns an array\r\ninstead of a scalar.\r\n\r\n\r\n`scipy.signal` improvements\r\n---------------------------------\r\n\r\nAdded a new function to calculate convolution using the overlap-add method,\r\nnamed `scipy.signal.oaconvolve`. Like `scipy.signal.fftconvolve`, this\r\nfunction supports specifying dimensions along which to do the convolution.\r\n\r\n`scipy.signal.cwt` now supports complex wavelets.\r\n\r\nThe implementation of ``choose_conv_method`` has been updated to reflect the \r\nnew FFT implementation. In addition, the performance has been significantly \r\nimproved (with rather drastic improvements in edge cases).\r\n\r\nThe function ``upfirdn`` now has a ``mode`` keyword argument that can be used\r\nto select the signal extension mode used at the signal boundaries. These modes\r\nare also available for use in ``resample_poly`` via a newly added ``padtype``\r\nargument.\r\n\r\n`scipy.signal.sosfilt` now benefits from Cython code for improved performance\r\n\r\n`scipy.signal.resample` should be more efficient by leveraging ``rfft`` when\r\npossible\r\n\r\n`scipy.sparse` improvements\r\n----------------------------------\r\nIt is now possible to use the LOBPCG method in `scipy.sparse.linalg.svds`.\r\n\r\n`scipy.sparse.linalg.LinearOperator` now supports the operation ``rmatmat`` \r\nfor adjoint matrix-matrix multiplication, in addition to ``rmatvec``.\r\n\r\nMultiple stability updates enable float32 support in the LOBPCG eigenvalue \r\nsolver for symmetric and Hermitian eigenvalues problems in \r\n``scipy.sparse.linalg.lobpcg``.\r\n\r\nA solver for the maximum flow problem has been added as\r\n`scipy.sparse.csgraph.maximum_flow`.\r\n\r\n`scipy.sparse.csgraph.maximum_bipartite_matching` now allows non-square inputs,\r\nno longer requires a perfect matching to exist, and has improved performance.\r\n\r\n`scipy.sparse.lil_matrix` conversions now perform better in some scenarios\r\n\r\nBasic support is available for ``pydata/sparse`` arrays in\r\n`scipy.sparse.linalg`\r\n\r\n`scipy.sparse.linalg.spsolve_triangular` now supports the ``unit_diagonal``\r\nargument to improve call signature similarity with its dense counterpart,\r\n`scipy.linalg.solve_triangular`\r\n\r\n``assertAlmostEqual`` may now be used with sparse matrices, which have added\r\nsupport for ``__round__``\r\n\r\n`scipy.spatial` improvements\r\n----------------------------------\r\nThe bundled Qhull library was upgraded to version 2019.1, fixing several\r\nissues. Scipy-specific patches are no longer applied to it.\r\n\r\n`scipy.spatial.SphericalVoronoi` now has linear memory complexity, improved\r\nperformance, and supports single-hemisphere generators. Support has also been\r\nadded for handling generators that lie on a great circle arc (geodesic input)\r\nand for generators in n-dimensions.\r\n\r\n`scipy.spatial.transform.Rotation` now includes functions for calculation of a\r\nmean rotation, generation of the 3D rotation groups, and reduction of rotations\r\nwith rotational symmetries.\r\n\r\n`scipy.spatial.transform.Slerp` is now callable with a scalar argument\r\n\r\n`scipy.spatial.voronoi_plot_2d` now supports furthest site Voronoi diagrams\r\n\r\n`scipy.spatial.Delaunay` and `scipy.spatial.Voronoi` now have attributes\r\nfor tracking whether they are furthest site diagrams\r\n\r\n`scipy.special` improvements\r\n----------------------------------\r\nThe Voigt profile has been added as `scipy.special.voigt_profile`.\r\n\r\nA real dispatch has been added for the Wright Omega function\r\n(`scipy.special.wrightomega`).\r\n\r\nThe analytic continuation of the Riemann zeta function has been added. (The \r\nRiemann zeta function is the one-argument variant of `scipy.special.zeta`.)\r\n\r\nThe complete elliptic integral of the first kind (`scipy.special.ellipk`) is \r\nnow available in `scipy.special.cython_special`.\r\n\r\nThe accuracy of `scipy.special.hyp1f1` for real arguments has been improved.\r\n\r\nThe documentation of many functions has been improved.\r\n\r\n`scipy.stats` improvements\r\n--------------------------------\r\n`scipy.stats.multiscale_graphcorr` added as an independence test that\r\noperates on high dimensional and nonlinear data sets. It has higher statistical\r\npower than other `scipy.stats` tests while being the only one that operates on\r\nmultivariate data.\r\n\r\nThe generalized inverse Gaussian distribution (`scipy.stats.geninvgauss`) has \r\nbeen added.\r\n\r\nIt is now possible to efficiently reuse `scipy.stats.binned_statistic_dd` \r\nwith new values by providing the result of a previous call to the function.\r\n\r\n`scipy.stats.hmean` now handles input with zeros more gracefully.\r\n\r\nThe beta-binomial distribution is now available in `scipy.stats.betabinom`.\r\n\r\n`scipy.stats.zscore`, `scipy.stats.circmean`, `scipy.stats.circstd`, and\r\n`scipy.stats.circvar` now support the ``nan_policy`` argument for enhanced\r\nhandling of ``NaN`` values\r\n\r\n`scipy.stats.entropy` now accepts an ``axis`` argument\r\n\r\n`scipy.stats.gaussian_kde.resample` now accepts a ``seed`` argument to empower\r\nreproducibility\r\n\r\n`scipy.stats.kendalltau` performance has improved, especially for large inputs,\r\ndue to improved cache usage\r\n\r\n`scipy.stats.truncnorm` distribution has been rewritten to support much wider\r\ntails\r\n\r\n\r\nDeprecated features\r\n===================\r\n\r\n`scipy` deprecations\r\n-------------------------\r\nSupport for NumPy functions exposed via the root SciPy namespace is deprecated\r\nand will be removed in 2.0.0. For example, if you use ``scipy.rand`` or\r\n``scipy.diag``, you should change your code to directly use\r\n``numpy.random.default_rng`` or ``numpy.diag``, respectively.\r\nThey remain available in the currently continuing Scipy 1.x release series.\r\n\r\nThe exception to this rule is using ``scipy.fft`` as a function --\r\n:mod:`scipy.fft` is now meant to be used only as a module, so the ability to\r\ncall ``scipy.fft(...)`` will be removed in SciPy 1.5.0.\r\n\r\nIn `scipy.spatial.Rotation` methods ``from_dcm``, ``as_dcm`` were renamed to \r\n``from_matrix``, ``as_matrix`` respectively. The old names will be removed in \r\nSciPy 1.6.0.\r\n\r\nMethod ``Rotation.match_vectors`` was deprecated in favor of \r\n``Rotation.align_vectors``, which provides a more logical and \r\ngeneral API to the same functionality. The old method \r\nwill be removed in SciPy 1.6.0.\r\n\r\nBackwards incompatible changes\r\n==============================\r\n\r\n`scipy.special` changes\r\n--------------------------------\r\nThe deprecated functions ``hyp2f0``, ``hyp1f2``, and ``hyp3f0`` have been\r\nremoved.\r\n\r\nThe deprecated function ``bessel_diff_formula`` has been removed.\r\n\r\nThe function ``i0`` is no longer registered with ``numpy.dual``, so that \r\n``numpy.dual.i0`` will unconditionally refer to the NumPy version regardless \r\nof whether `scipy.special` is imported.\r\n\r\nThe function ``expn`` has been changed to return ``nan`` outside of its \r\ndomain of definition (``x, n < 0``) instead of ``inf``.\r\n\r\n`scipy.sparse` changes\r\n------------------------------\r\nSparse matrix reshape now raises an error if shape is not two-dimensional, \r\nrather than guessing what was meant. The behavior is now the same as before \r\nSciPy 1.1.0.\r\n\r\n``CSR`` and ``CSC`` sparse matrix classes should now return empty matrices\r\nof the same type when indexed out of bounds. Previously, for some versions\r\nof SciPy, this would raise an ``IndexError``. The change is largely motivated\r\nby greater consistency with ``ndarray`` and ``numpy.matrix`` semantics.\r\n\r\n`scipy.signal` changes\r\n--------------------------\r\n`scipy.signal.resample` behavior for length-1 signal inputs has been\r\nfixed to output a constant (DC) value rather than an impulse, consistent with\r\nthe assumption of signal periodicity in the FFT method.\r\n\r\n`scipy.signal.cwt` now performs complex conjugation and time-reversal of\r\nwavelet data, which is a backwards-incompatible bugfix for\r\ntime-asymmetric wavelets.\r\n\r\n`scipy.stats` changes\r\n-------------------------\r\n`scipy.stats.loguniform` added with better documentation as (an alias for\r\n``scipy.stats.reciprocal``). ``loguniform`` generates random variables\r\nthat are equally likely in the log space; e.g., ``1``, ``10`` and ``100``\r\nare all equally likely if ``loguniform(10 ** 0, 10 ** 2).rvs()`` is used.\r\n\r\n\r\nOther changes\r\n=============\r\nThe ``LSODA`` method of `scipy.integrate.solve_ivp` now correctly detects stiff\r\nproblems.\r\n\r\n`scipy.spatial.cKDTree` now accepts and correctly handles empty input data\r\n\r\n`scipy.stats.binned_statistic_dd` now calculates the standard deviation \r\nstatistic in a numerically stable way.\r\n\r\n`scipy.stats.binned_statistic_dd` now throws an error if the input data \r\ncontains either ``np.nan`` or ``np.inf``. Similarly, in `scipy.stats` now all \r\ncontinuous distributions' ``.fit()`` methods throw an error if the input data\r\ncontain any instance of either ``np.nan`` or ``np.inf``.\r\n\r\n\r\nAuthors\r\n=======\r\n\r\n* @endolith\r\n* @wenhui-prudencemed +\r\n* Abhinav +\r\n* Anne Archibald\r\n* ashwinpathak20nov1996 +\r\n* Danilo Augusto +\r\n* Nelson Auner +\r\n* aypiggott +\r\n* Christoph Baumgarten\r\n* Peter Bell\r\n* Sebastian Berg\r\n* Arman Bilge +\r\n* Benedikt Boecking +\r\n* Christoph Boeddeker +\r\n* Daniel Bunting\r\n* Evgeni Burovski\r\n* Angeline Burrell +\r\n* Angeline G. Burrell +\r\n* CJ Carey\r\n* Carlos Ramos Carre\u00f1o +\r\n* Mak Sze Chun +\r\n* Malayaja Chutani +\r\n* Christian Clauss +\r\n* Jonathan Conroy +\r\n* Stephen P Cook +\r\n* Dylan Cutler +\r\n* Anirudh Dagar +\r\n* Aidan Dang +\r\n* dankleeman +\r\n* Brandon David +\r\n* Tyler Dawson +\r\n* Dieter Werthm\u00fcller\r\n* Joe Driscoll +\r\n* Jakub Dyczek +\r\n* D\u00e1vid Bodn\u00e1r\r\n* Fletcher Easton +\r\n* Stefan Endres\r\n* etienne +\r\n* Johann Faouzi\r\n* Yu Feng\r\n* Isuru Fernando +\r\n* Matthew H Flamm\r\n* Martin Gauch +\r\n* Gabriel Gerlero +\r\n* Ralf Gommers\r\n* Chris Gorgolewski +\r\n* Domen Gorjup +\r\n* Edouard Goudenhoofdt +\r\n* Jan Gwinner +\r\n* Maja Gwozdz +\r\n* Matt Haberland\r\n* hadshirt +\r\n* Pierre Haessig +\r\n* David Hagen\r\n* Charles Harris\r\n* Gina Helfrich +\r\n* Alex Henrie +\r\n* Francisco J. Hernandez Heras +\r\n* Andreas Hilboll\r\n* Lindsey Hiltner\r\n* Thomas Hisch\r\n* Min ho Kim +\r\n* Gert-Ludwig Ingold\r\n* jakobjakobson13 +\r\n* Todd Jennings\r\n* He Jia\r\n* Muhammad Firmansyah Kasim +\r\n* Andrew Knyazev +\r\n* Holger Kohr +\r\n* Mateusz Konieczny +\r\n* Krzysztof Pi\u00f3ro +\r\n* Philipp Lang +\r\n* Peter Mahler Larsen +\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory R. Lee\r\n* Chelsea Liu +\r\n* Jesse Livezey\r\n* Peter Lysakovski +\r\n* Jason Manley +\r\n* Michael Marien +\r\n* Nikolay Mayorov\r\n* G. D. McBain +\r\n* Sam McCormack +\r\n* Melissa Weber Mendon\u00e7a +\r\n* Kevin Michel +\r\n* mikeWShef +\r\n* Sturla Molden\r\n* Eric Moore\r\n* Peyton Murray +\r\n* Andrew Nelson\r\n* Clement Ng +\r\n* Juan Nunez-Iglesias\r\n* Renee Otten +\r\n* Kellie Ottoboni +\r\n* Ayappan P\r\n* Sambit Panda +\r\n* Tapasweni Pathak +\r\n* Oleksandr Pavlyk\r\n* Fabian Pedregosa\r\n* Petar Mlinari\u0107\r\n* Matti Picus\r\n* Marcel Plch +\r\n* Christoph Pohl +\r\n* Ilhan Polat\r\n* Siddhesh Poyarekar +\r\n* Ioannis Prapas +\r\n* James Alan Preiss +\r\n* Yisheng Qiu +\r\n* Eric Quintero\r\n* Bharat Raghunathan +\r\n* Tyler Reddy\r\n* Joscha Reimer\r\n* Antonio Horta Ribeiro\r\n* Lucas Roberts\r\n* rtshort +\r\n* Josua Sassen\r\n* Kevin Sheppard\r\n* Scott Sievert\r\n* Leo Singer\r\n* Kai Striega\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* tborisow +\r\n* \u00c9tienne Tremblay +\r\n* tuxcell +\r\n* Miguel de Val-Borro\r\n* Andrew Valentine +\r\n* Hugo van Kemenade\r\n* Paul van Mulbregt\r\n* Sebastiano Vigna\r\n* Pauli Virtanen\r\n* Dany Vohl +\r\n* Ben Walsh +\r\n* Huize Wang +\r\n* Warren Weckesser\r\n* Anreas Weh +\r\n* Joseph Weston +\r\n* Adrian Wijaya +\r\n* Timothy Willard +\r\n* Josh Wilson\r\n* Kentaro Yamamoto +\r\n* Dave Zbarsky +\r\n\r\nA total of 142 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.\r\n", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.4.0rc2", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.4.0rc2", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.4.0rc2", "url": "https://api.github.com/repos/scipy/scipy/releases/22058725", "dateCreated": "2019-12-07T22:47:38Z", "datePublished": "2019-12-08T20:41:08Z"}, {"tagName": "v1.3.3", "name": "SciPy 1.3.3", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.3.3 Release Notes\r\n==========================\r\n\r\nSciPy `1.3.3` is a bug-fix release with no new features\r\ncompared to `1.3.2`. In particular, a test suite issue\r\ninvolving multiprocessing was fixed for Windows and\r\nPython `3.8` on macOS. \r\n\r\nWheels were also updated to place `msvcp140.dll` at the \r\nappropriate location, which was previously causing issues.\r\n\r\nAuthors\r\n=======\r\n\r\nIlhan Polat\r\nTyler Reddy\r\nRalf Gommers", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.3.3", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.3.3", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.3.3", "url": "https://api.github.com/repos/scipy/scipy/releases/21709111", "dateCreated": "2019-11-22T23:26:22Z", "datePublished": "2019-11-23T21:51:19Z"}, {"tagName": "v1.4.0rc1", "name": "SciPy 1.4.0rc1", "authorName": "tylerjereddy", "authorType": "User", "body": "SciPy 1.4.0 Release Notes\r\n==========================\r\n\r\n**Note**: SciPy 1.4.0 is not released yet!\r\n\r\nSciPy 1.4.0 is the culmination of 6 months of hard work. It contains\r\nmany new features, numerous bug-fixes, improved test coverage and better\r\ndocumentation. There have been a number of deprecations and API changes\r\nin this release, which are documented below. All users are encouraged to\r\nupgrade to this release, as there are a large number of bug-fixes and\r\noptimizations. Before upgrading, we recommend that users check that\r\ntheir own code does not use deprecated SciPy functionality (to do so,\r\nrun your code with ``python -Wd`` and check for ``DeprecationWarning`` s).\r\nOur development attention will now shift to bug-fix releases on the\r\n1.4.x branch, and on adding new features on the master branch.\r\n\r\nThis release requires Python 3.5+ and NumPy `>=1.13.3` (for Python 3.5, 3.6),\r\n`>=1.14.5` (for Python 3.7), `>= 1.17.3` (for Python 3.8)\r\n\r\nFor running on PyPy, PyPy3 6.0+ and NumPy 1.15.0 are required.\r\n\r\nHighlights of this release\r\n---------------------------\r\n\r\n - a new submodule, `scipy.fft`, now supersedes `scipy.fftpack`; this\r\n  means support for ``long double`` transforms, faster multi-dimensional\r\n  transforms, improved algorithm time complexity, release of the global\r\n  intepreter lock, and control over threading behavior\r\n - support for ``pydata/sparse`` arrays in `scipy.sparse.linalg`\r\n - substantial improvement to the documentation and functionality of\r\n  several `scipy.special` functions, and some new additions\r\n - the generalized inverse Gaussian distribution has been added to\r\n  `scipy.stats`\r\n - an implementation of the Edmonds-Karp algorithm in\r\n  `scipy.sparse.csgraph.maximum_flow`\r\n - `scipy.spatial.SphericalVoronoi` now supports n-dimensional input, \r\n   has linear memory complexity, improved performance, and\r\n   supports single-hemisphere generators\r\n\r\n\r\nNew features\r\n============\r\n\r\nInfrastructure\r\n----------------\r\nDocumentation can now be built with ``runtests.py --doc``\r\n\r\nA ``Dockerfile`` is now available in the ``scipy/scipy-dev`` repository to\r\nfacilitate getting started with SciPy development.\r\n\r\n`scipy.constants` improvements\r\n--------------------------------\r\n`scipy.constants` has been updated with the CODATA 2018 constants.\r\n\r\n\r\n`scipy.fft` added\r\n-------------------\r\n`scipy.fft` is a new submodule that supersedes the `scipy.fftpack` submodule. \r\nFor the most part, this is a drop-in replacement for ``numpy.fft`` and \r\n`scipy.fftpack` alike. With some important differences, `scipy.fft`:\r\n - uses NumPy's conventions for real transforms (``rfft``). This means the \r\nreturn value is a complex array, half the size of the full ``fft`` output.\r\nThis is different from the output of ``fftpack`` which returned a real array \r\nrepresenting complex components packed together.\r\n - the inverse real to real transforms (``idct`` and ``idst``) are normalized \r\nfor ``norm=None`` in thesame way as ``ifft``. This means the identity \r\n``idct(dct(x)) == x`` is now ``True`` for all norm modes.\r\n - does not include the convolutions or pseudo-differential operators\r\nfrom ``fftpack``.\r\n\r\nThis submodule is based on the ``pypocketfft`` library, developed by the \r\nauthor of ``pocketfft`` which was recently adopted by NumPy as well.\r\n``pypocketfft`` offers a number of advantages over fortran ``FFTPACK``:\r\n - support for long double (``np.longfloat``) precision transforms.\r\n - faster multi-dimensional transforms using vectorisation\r\n - Bluestein\u2019s algorithm removes the worst-case ``O(n^2)`` complexity of\r\n``FFTPACK``\r\n - the global interpreter lock (``GIL``) is released during transforms\r\n - optional multithreading of multi-dimensional transforms via the ``workers``\r\nargument\r\n\r\nNote that `scipy.fftpack` has not been deprecated and will continue to be \r\nmaintained but is now considered legacy. New code is recommended to use \r\n`scipy.fft` instead, where possible.\r\n\r\n`scipy.fftpack` improvements\r\n--------------------------------\r\n`scipy.fftpack` now uses pypocketfft to perform its FFTs, offering the same\r\nspeed and accuracy benefits listed for scipy.fft above but without the\r\nimproved API.\r\n\r\n`scipy.integrate` improvements\r\n--------------------------------\r\n\r\nThe function `scipy.integrate.solve_ivp` now has an ``args`` argument.\r\nThis allows the user-defined functions passed to the function to have\r\nadditional parameters without having to create wrapper functions or\r\nlambda expressions for them.\r\n\r\n`scipy.integrate.solve_ivp` can now return a ``y_events`` attribute \r\nrepresenting the solution of the ODE at event times\r\n\r\nNew ``OdeSolver`` is implemented --- ``DOP853``. This is a high-order explicit\r\nRunge-Kutta method originally implemented in Fortran. Now we provide a pure \r\nPython implementation usable through ``solve_ivp`` with all its features.\r\n\r\n`scipy.integrate.quad` provides better user feedback when break points are \r\nspecified with a weighted integrand.\r\n\r\n`scipy.integrate.quad_vec` is now available for general purpose integration\r\nof vector-valued functions\r\n\r\n\r\n`scipy.interpolate` improvements\r\n----------------------------------\r\n`scipy.interpolate.pade` now handles complex input data gracefully\r\n\r\n`scipy.interpolate.Rbf` can now interpolate multi-dimensional functions\r\n\r\n`scipy.io` improvements\r\n-------------------------\r\n\r\n`scipy.io.wavfile.read` can now read data from a `WAV` file that has a\r\nmalformed header, similar to other modern `WAV` file parsers\r\n\r\n`scipy.io.FortranFile` now has an expanded set of available ``Exception``\r\nclasses for handling poorly-formatted files\r\n\r\n\r\n`scipy.linalg` improvements\r\n-----------------------------\r\nThe function ``scipy.linalg.subspace_angles(A, B)`` now gives correct\r\nresults for complex-valued matrices. Before this, the function only returned\r\ncorrect values for real-valued matrices.\r\n\r\nNew boolean keyword argument ``check_finite`` for `scipy.linalg.norm`; whether \r\nto check that the input matrix contains only finite numbers. Disabling may \r\ngive a performance gain, but may result in problems (crashes, non-termination)\r\nif the inputs do contain infinities or NaNs.\r\n\r\n`scipy.linalg.solve_triangular` has improved performance for a C-ordered\r\ntriangular matrix\r\n\r\n``LAPACK`` wrappers have been added for ``?geequ``, ``?geequb``, ``?syequb``,\r\nand ``?heequb``\r\n\r\nSome performance improvements may be observed due to an internal optimization\r\nin operations involving LAPACK routines via ``_compute_lwork``. This is\r\nparticularly true for operations on small arrays.\r\n\r\nBlock ``QR`` wrappers are now available in `scipy.linalg.lapack`\r\n\r\n\r\n`scipy.ndimage` improvements\r\n------------------------------\r\n\r\n\r\n`scipy.optimize` improvements\r\n--------------------------------\r\nIt is now possible to use linear and non-linear constraints with \r\n`scipy.optimize.differential_evolution`.\r\n\r\n`scipy.optimize.linear_sum_assignment` has been re-written in C++ to improve \r\nperformance, and now allows input costs to be infinite.\r\n\r\nA ``ScalarFunction.fun_and_grad`` method was added for convenient simultaneous\r\nretrieval of a function and gradient evaluation\r\n\r\n`scipy.optimize.minimize` ``BFGS`` method has improved performance by avoiding\r\nduplicate evaluations in some cases\r\n\r\nBetter user feedback is provided when an objective function returns an array\r\ninstead of a scalar.\r\n\r\n\r\n`scipy.signal` improvements\r\n-----------------------------\r\n\r\nAdded a new function to calculate convolution using the overlap-add method,\r\nnamed `scipy.signal.oaconvolve`. Like `scipy.signal.fftconvolve`, this\r\nfunction supports specifying dimensions along which to do the convolution.\r\n\r\n`scipy.signal.cwt` now supports complex wavelets.\r\n\r\nThe implementation of ``choose_conv_method`` has been updated to reflect the \r\nnew FFT implementation. In addition, the performance has been significantly \r\nimproved (with rather drastic improvements in edge cases).\r\n\r\nThe function ``upfirdn`` now has a ``mode`` keyword argument that can be used\r\nto select the signal extension mode used at the signal boundaries. These modes\r\nare also available for use in ``resample_poly`` via a newly added ``padtype``\r\nargument.\r\n\r\n`scipy.signal.sosfilt` now benefits from Cython code for improved performance\r\n\r\n`scipy.signal.resample` should be more efficient by leveraging ``rfft`` when\r\npossible\r\n\r\n`scipy.sparse` improvements\r\n-------------------------------\r\nIt is now possible to use the LOBPCG method in `scipy.sparse.linalg.svds`.\r\n\r\n`scipy.sparse.linalg.LinearOperator` now supports the operation ``rmatmat`` \r\nfor adjoint matrix-matrix multiplication, in addition to ``rmatvec``.\r\n\r\nMultiple stability updates enable float32 support in the LOBPCG eigenvalue \r\nsolver for symmetric and Hermitian eigenvalues problems in \r\n``scipy.sparse.linalg.lobpcg``.\r\n\r\nA solver for the maximum flow problem has been added as\r\n`scipy.sparse.csgraph.maximum_flow`.\r\n\r\n`scipy.sparse.csgraph.maximum_bipartite_matching` now allows non-square inputs,\r\nno longer requires a perfect matching to exist, and has improved performance.\r\n\r\n`scipy.sparse.lil_matrix` conversions now perform better in some scenarios\r\n\r\nBasic support is available for ``pydata/sparse`` arrays in\r\n`scipy.sparse.linalg`\r\n\r\n`scipy.sparse.linalg.spsolve_triangular` now supports the ``unit_diagonal``\r\nargument to improve call signature similarity with its dense counterpart,\r\n`scipy.linalg.solve_triangular`\r\n\r\n``assertAlmostEqual`` may now be used with sparse matrices, which have added\r\nsupport for ``__round__``\r\n\r\n`scipy.spatial` improvements\r\n------------------------------\r\nThe bundled Qhull library was upgraded to version 2019.1, fixing several\r\nissues. Scipy-specific patches are no longer applied to it.\r\n\r\n`scipy.spatial.SphericalVoronoi` now has linear memory complexity, improved\r\nperformance, and supports single-hemisphere generators. Support has also been\r\nadded for handling generators that lie on a great circle arc (geodesic input)\r\nand for generators in n-dimensions.\r\n\r\n`scipy.spatial.transform.Rotation` now includes functions for calculation of a\r\nmean rotation, generation of the 3D rotation groups, and reduction of rotations\r\nwith rotational symmetries.\r\n\r\n`scipy.spatial.transform.Slerp` is now callable with a scalar argument\r\n\r\n`scipy.spatial.voronoi_plot_2d` now supports furthest site Voronoi diagrams\r\n\r\n`scipy.spatial.Delaunay` and `scipy.spatial.Voronoi` now have attributes\r\nfor tracking whether they are furthest site diagrams\r\n\r\n`scipy.special` improvements\r\n------------------------------\r\nThe Voigt profile has been added as `scipy.special.voigt_profile`.\r\n\r\nA real dispatch has been added for the Wright Omega function\r\n(`scipy.special.wrightomega`).\r\n\r\nThe analytic continuation of the Riemann zeta function has been added. (The \r\nRiemann zeta function is the one-argument variant of `scipy.special.zeta`.)\r\n\r\nThe complete elliptic integral of the first kind (`scipy.special.ellipk`) is \r\nnow available in `scipy.special.cython_special`.\r\n\r\nThe accuracy of `scipy.special.hyp1f1` for real arguments has been improved.\r\n\r\nThe documentation of many functions has been improved.\r\n\r\n`scipy.stats` improvements\r\n----------------------------\r\n`scipy.stats.multiscale_graphcorr` added as an independence test that\r\noperates on high dimensional and nonlinear data sets. It has higher statistical\r\npower than other `scipy.stats` tests while being the only one that operates on\r\nmultivariate data.\r\nThe generalized inverse Gaussian distribution (`scipy.stats.geninvgauss`) has \r\nbeen added.\r\n\r\nIt is now possible to efficiently reuse `scipy.stats.binned_statistic_dd` \r\nwith new values by providing the result of a previous call to the function.\r\n\r\n`scipy.stats.hmean` now handles input with zeros more gracefully.\r\n\r\nThe beta-binomial distribution is now available in `scipy.stats.betabinom`.\r\n\r\n`scipy.stats.zscore`, `scipy.stats.circmean`, `scipy.stats.circstd`, and\r\n`scipy.stats.circvar` now support the ``nan_policy`` argument for enhanced\r\nhandling of ``NaN`` values\r\n\r\n`scipy.stats.entropy` now accepts an ``axis`` argument\r\n\r\n`scipy.stats.gaussian_kde.resample` now accepts a ``seed`` argument to empower\r\nreproducibility\r\n\r\n`scipy.stats.multiscale_graphcorr` has been added for calculation of the\r\nmultiscale graph correlation (MGC) test statistic\r\n\r\n`scipy.stats.kendalltau` performance has improved, especially for large inputs,\r\ndue to improved cache usage\r\n\r\n`scipy.stats.truncnorm` distribution has been rewritten to support much wider\r\ntails\r\n\r\n\r\nDeprecated features\r\n===================\r\n\r\n`scipy` deprecations\r\n-----------------------\r\nSupport for NumPy functions exposed via the root SciPy namespace is deprecated\r\nand will be removed in 2.0.0. For example, if you use ``scipy.rand`` or\r\n``scipy.diag``, you should change your code to directly use\r\n``numpy.random.default_rng`` or ``numpy.diag``, respectively.\r\nThey remain available in the currently continuing Scipy 1.x release series.\r\n\r\nThe exception to this rule is using ``scipy.fft`` as a function --\r\n:mod:`scipy.fft` is now meant to be used only as a module, so the ability to\r\ncall ``scipy.fft(...)`` will be removed in SciPy 1.5.0.\r\n\r\nIn `scipy.spatial.Rotation` methods ``from_dcm``, ``as_dcm`` were renamed to \r\n``from_matrix``, ``as_matrix`` respectively. The old names will be removed in \r\nSciPy 1.6.0.\r\n\r\nBackwards incompatible changes\r\n==============================\r\n\r\n`scipy.special` changes\r\n-----------------------------\r\nThe deprecated functions ``hyp2f0``, ``hyp1f2``, and ``hyp3f0`` have been\r\nremoved.\r\n\r\nThe deprecated function ``bessel_diff_formula`` has been removed.\r\n\r\nThe function ``i0`` is no longer registered with ``numpy.dual``, so that \r\n``numpy.dual.i0`` will unconditionally refer to the NumPy version regardless \r\nof whether `scipy.special` is imported.\r\n\r\nThe function ``expn`` has been changed to return ``nan`` outside of its \r\ndomain of definition (``x, n < 0``) instead of ``inf``.\r\n\r\n`scipy.sparse` changes\r\n-----------------------------\r\nSparse matrix reshape now raises an error if shape is not two-dimensional, \r\nrather than guessing what was meant. The behavior is now the same as before \r\nSciPy 1.1.0.\r\n\r\n\r\n`scipy.spatial` changes\r\n--------------------------\r\nThe default behavior of the ``match_vectors`` method of \r\n`scipy.spatial.transform.Rotation` was changed for input vectors \r\nthat are not normalized and not of equal lengths.\r\nPreviously, such vectors would be normalized within the method.  \r\nNow, the calculated rotation takes the vector length into account, longer \r\nvectors will have a larger weight. For more details, see \r\nhttps://github.com/scipy/scipy/issues/10968.\r\n\r\n`scipy.signal` changes\r\n-------------------------\r\n`scipy.signal.resample` behavior for length-1 signal inputs has been\r\nfixed to output a constant (DC) value rather than an impulse, consistent with\r\nthe assumption of signal periodicity in the FFT method.\r\n\r\n`scipy.signal.cwt` now performs complex conjugation and time-reversal of\r\nwavelet data, which is a backwards-incompatible bugfix for\r\ntime-asymmetric wavelets.\r\n\r\n`scipy.stats` changes\r\n------------------------\r\n`scipy.stats.loguniform` added with better documentation as (an alias for\r\n``scipy.stats.reciprocal``). ``loguniform`` generates random variables\r\nthat are equally likely in the log space; e.g., ``1``, ``10`` and ``100``\r\nare all equally likely if ``loguniform(10 ** 0, 10 ** 2).rvs()`` is used.\r\n\r\n\r\nOther changes\r\n=============\r\nThe ``LSODA`` method of `scipy.integrate.solve_ivp` now correctly detects stiff\r\nproblems.\r\n\r\n`scipy.spatial.cKDTree` now accepts and correctly handles empty input data\r\n\r\n`scipy.stats.binned_statistic_dd` now calculates the standard deviation \r\nstatistic in a numerically stable way.\r\n\r\n`scipy.stats.binned_statistic_dd` now throws an error if the input data \r\ncontains either ``np.nan`` or ``np.inf``. Similarly, in `scipy.stats` now all \r\ncontinuous distributions' ``.fit()`` methods throw an error if the input data\r\ncontain any instance of either ``np.nan`` or ``np.inf``.\r\n\r\n\r\nAuthors\r\n=======\r\n\r\n* @endolith\r\n* Abhinav +\r\n* Anne Archibald\r\n* ashwinpathak20nov1996 +\r\n* Danilo Augusto +\r\n* Nelson Auner +\r\n* aypiggott +\r\n* Christoph Baumgarten\r\n* Peter Bell\r\n* Sebastian Berg\r\n* Arman Bilge +\r\n* Benedikt Boecking +\r\n* Christoph Boeddeker +\r\n* Daniel Bunting\r\n* Evgeni Burovski\r\n* Angeline Burrell +\r\n* Angeline G. Burrell +\r\n* CJ Carey\r\n* Carlos Ramos Carre\u00f1o +\r\n* Mak Sze Chun +\r\n* Malayaja Chutani +\r\n* Christian Clauss +\r\n* Jonathan Conroy +\r\n* Stephen P Cook +\r\n* Dylan Cutler +\r\n* Anirudh Dagar +\r\n* Aidan Dang +\r\n* dankleeman +\r\n* Brandon David +\r\n* Tyler Dawson +\r\n* Dieter Werthm\u00fcller\r\n* Joe Driscoll +\r\n* Jakub Dyczek +\r\n* D\u00e1vid Bodn\u00e1r\r\n* Fletcher Easton +\r\n* Stefan Endres\r\n* etienne +\r\n* Johann Faouzi\r\n* Yu Feng\r\n* Isuru Fernando +\r\n* Matthew H Flamm\r\n* Martin Gauch +\r\n* Gabriel Gerlero +\r\n* Ralf Gommers\r\n* Chris Gorgolewski +\r\n* Domen Gorjup +\r\n* Edouard Goudenhoofdt +\r\n* Jan Gwinner +\r\n* Maja Gwozdz +\r\n* Matt Haberland\r\n* hadshirt +\r\n* Pierre Haessig +\r\n* David Hagen\r\n* Charles Harris\r\n* Gina Helfrich +\r\n* Alex Henrie +\r\n* Francisco J. Hernandez Heras +\r\n* Andreas Hilboll\r\n* Lindsey Hiltner\r\n* Thomas Hisch\r\n* Min ho Kim +\r\n* Gert-Ludwig Ingold\r\n* jakobjakobson13 +\r\n* Todd Jennings\r\n* He Jia\r\n* Muhammad Firmansyah Kasim +\r\n* Andrew Knyazev +\r\n* Holger Kohr +\r\n* Mateusz Konieczny +\r\n* Krzysztof Pi\u00f3ro +\r\n* Philipp Lang +\r\n* Peter Mahler Larsen +\r\n* Eric Larson\r\n* Antony Lee\r\n* Gregory R. Lee\r\n* Chelsea Liu +\r\n* Jesse Livezey\r\n* Peter Lysakovski +\r\n* Jason Manley +\r\n* Michael Marien +\r\n* Nikolay Mayorov\r\n* G. D. McBain +\r\n* Sam McCormack +\r\n* Melissa Weber Mendon\u00e7a +\r\n* Kevin Michel +\r\n* mikeWShef +\r\n* Sturla Molden\r\n* Eric Moore\r\n* Peyton Murray +\r\n* Andrew Nelson\r\n* Clement Ng +\r\n* Juan Nunez-Iglesias\r\n* Renee Otten +\r\n* Kellie Ottoboni +\r\n* Ayappan P\r\n* Sambit Panda +\r\n* Tapasweni Pathak +\r\n* Oleksandr Pavlyk\r\n* Fabian Pedregosa\r\n* Petar Mlinari\u0107\r\n* Matti Picus\r\n* Marcel Plch +\r\n* Christoph Pohl +\r\n* Ilhan Polat\r\n* Siddhesh Poyarekar +\r\n* Ioannis Prapas +\r\n* James Alan Preiss +\r\n* Yisheng Qiu +\r\n* Eric Quintero\r\n* Bharat Raghunathan +\r\n* Tyler Reddy\r\n* Joscha Reimer\r\n* Antonio Horta Ribeiro\r\n* Lucas Roberts\r\n* rtshort +\r\n* Josua Sassen\r\n* Kevin Sheppard\r\n* Scott Sievert\r\n* Leo Singer\r\n* Kai Striega\r\n* S\u00f8ren Fuglede J\u00f8rgensen\r\n* tborisow +\r\n* \u00c9tienne Tremblay +\r\n* tuxcell +\r\n* Miguel de Val-Borro\r\n* Andrew Valentine +\r\n* Hugo van Kemenade\r\n* Paul van Mulbregt\r\n* Sebastiano Vigna\r\n* Pauli Virtanen\r\n* Dany Vohl +\r\n* Ben Walsh +\r\n* Huize Wang +\r\n* Warren Weckesser\r\n* Anreas Weh +\r\n* Joseph Weston +\r\n* Adrian Wijaya +\r\n* Timothy Willard +\r\n* Josh Wilson\r\n* Kentaro Yamamoto +\r\n* Dave Zbarsky +\r\n\r\nA total of 141 people contributed to this release.\r\nPeople with a \"+\" by their names contributed a patch for the first time.\r\nThis list of names is automatically generated, and may not be fully complete.\r\n", "tarballUrl": "https://api.github.com/repos/scipy/scipy/tarball/v1.4.0rc1", "zipballUrl": "https://api.github.com/repos/scipy/scipy/zipball/v1.4.0rc1", "htmlUrl": "https://github.com/scipy/scipy/releases/tag/v1.4.0rc1", "url": "https://api.github.com/repos/scipy/scipy/releases/21675421", "dateCreated": "2019-11-21T20:41:36Z", "datePublished": "2019-11-22T05:11:55Z"}], "confidence": [1.0], "technique": "GitHub API"}}